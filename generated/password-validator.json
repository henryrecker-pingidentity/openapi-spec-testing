{
    "apiVersion": "9.2.0.0",
    "swaggerVersion": "1.2",
    "basePath": "https://localhost:1443/config",
    "authorizations": {
        "basic": {
            "type": "basicAuth"
        }
    },
    "apis": [
        {
            "path": "/password-validators",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Returns a list of all Password Validator objects",
                    "type": "password-validator-list-response",
                    "nickname": "list-password-validators",
                    "parameters": [
                        {
                            "paramType": "query",
                            "name": "filter",
                            "description": "SCIM filter",
                            "required": false,
                            "type": "string"
                        },
                        {
                            "paramType": "query",
                            "name": "sortBy",
                            "description": "Specifies a property value by which to sort",
                            "required": false,
                            "type": "string"
                        },
                        {
                            "paramType": "query",
                            "name": "sortOrder",
                            "description": "Specifies either ascending or descending alphabetical order",
                            "required": false,
                            "type": "string",
                            "enum": [
                                "ascending",
                                "descending"
                            ]
                        },
                        {
                            "paramType": "query",
                            "name": "startIndex",
                            "description": "1-based index of the first result to return",
                            "required": false,
                            "type": "string"
                        },
                        {
                            "paramType": "query",
                            "name": "count",
                            "description": "Indicates the number of results per page",
                            "required": false,
                            "type": "string"
                        },
                        {
                            "paramType": "query",
                            "name": "attributes",
                            "description": "Comma-separated list of attributes to include in the response",
                            "required": false,
                            "type": "string"
                        },
                        {
                            "paramType": "query",
                            "name": "excludeAttributes",
                            "description": "Comma-separated list of attributes to exclude from the response",
                            "required": false,
                            "type": "string"
                        }
                    ],
                    "responseMessages": [
                        {
                            "code": 200,
                            "message": "The requested operation succeeded"
                        },
                        {
                            "code": 204,
                            "message": "The requested operation succeeded and no further information has been provided, such as in the case of a DELETE operation."
                        },
                        {
                            "code": 400,
                            "message": "The request contents are incorrectly formatted or the request was made for an invalid API version."
                        },
                        {
                            "code": 401,
                            "message": "The requester cannot be authenticated"
                        },
                        {
                            "code": 403,
                            "message": "The requester does not have the required privileges or another constraint failed, such as attempting to delete an edit-only object."
                        },
                        {
                            "code": 404,
                            "message": "The requested path does not refer to an existing object or object relation."
                        },
                        {
                            "code": 409,
                            "message": "The requested operation could not be performed due to the current state of the configuration. For example, an attempt was made to create an object that already exists or an attempt was made to delete an object that is referred to by another object."
                        },
                        {
                            "code": 415,
                            "message": "The request is such that the Accept header does not indicate that JSON is an acceptable format for a response."
                        },
                        {
                            "code": 500,
                            "message": "The server encountered an unexpected error."
                        }
                    ]
                },
                {
                    "method": "POST",
                    "summary": "Add a new Password Validator to the config",
                    "nickname": "add-password-validator",
                    "type": "password-validator-response",
                    "parameters": [
                        {
                            "paramType": "body",
                            "required": true,
                            "description": "Password Validator to add",
                            "name": "add-password-validator-request",
                            "type": "add-password-validator-request"
                        },
                        {
                            "paramType": "query",
                            "name": "attributes",
                            "description": "Comma-separated list of attributes to include in the response",
                            "required": false,
                            "type": "string"
                        },
                        {
                            "paramType": "query",
                            "name": "excludeAttributes",
                            "description": "Comma-separated list of attributes to exclude from the response",
                            "required": false,
                            "type": "string"
                        },
                        {
                            "paramType": "query",
                            "name": "applyChangeTo",
                            "description": "Specify whether to apply this configuration change to a single server or the whole server group. This does not apply to mirrored subtree objects",
                            "required": false,
                            "type": "string",
                            "enum": [
                                "singleServer",
                                "serverGroup"
                            ]
                        }
                    ],
                    "responseMessages": [
                        {
                            "code": 200,
                            "message": "The requested operation succeeded"
                        },
                        {
                            "code": 204,
                            "message": "The requested operation succeeded and no further information has been provided, such as in the case of a DELETE operation."
                        },
                        {
                            "code": 400,
                            "message": "The request contents are incorrectly formatted or the request was made for an invalid API version."
                        },
                        {
                            "code": 401,
                            "message": "The requester cannot be authenticated"
                        },
                        {
                            "code": 403,
                            "message": "The requester does not have the required privileges or another constraint failed, such as attempting to delete an edit-only object."
                        },
                        {
                            "code": 404,
                            "message": "The requested path does not refer to an existing object or object relation."
                        },
                        {
                            "code": 409,
                            "message": "The requested operation could not be performed due to the current state of the configuration. For example, an attempt was made to create an object that already exists or an attempt was made to delete an object that is referred to by another object."
                        },
                        {
                            "code": 415,
                            "message": "The request is such that the Accept header does not indicate that JSON is an acceptable format for a response."
                        },
                        {
                            "code": 500,
                            "message": "The server encountered an unexpected error."
                        }
                    ]
                }
            ]
        },
        {
            "path": "/password-validators/{password-validator-name}",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Returns a single Password Validator",
                    "type": "password-validator-response",
                    "nickname": "get-password-validator",
                    "parameters": [
                        {
                            "paramType": "query",
                            "name": "attributes",
                            "description": "Comma-separated list of attributes to include in the response",
                            "required": false,
                            "type": "string"
                        },
                        {
                            "paramType": "query",
                            "name": "excludeAttributes",
                            "description": "Comma-separated list of attributes to exclude from the response",
                            "required": false,
                            "type": "string"
                        },
                        {
                          "name": "password-validator-name",
                          "description": "Name of the Password Validator",
                          "required": true,
                          "type": "string",
                          "paramType": "path"
                        }
                    ],
                    "responseMessages": [
                        {
                            "code": 200,
                            "message": "The requested operation succeeded"
                        },
                        {
                            "code": 204,
                            "message": "The requested operation succeeded and no further information has been provided, such as in the case of a DELETE operation."
                        },
                        {
                            "code": 400,
                            "message": "The request contents are incorrectly formatted or the request was made for an invalid API version."
                        },
                        {
                            "code": 401,
                            "message": "The requester cannot be authenticated"
                        },
                        {
                            "code": 403,
                            "message": "The requester does not have the required privileges or another constraint failed, such as attempting to delete an edit-only object."
                        },
                        {
                            "code": 404,
                            "message": "The requested path does not refer to an existing object or object relation."
                        },
                        {
                            "code": 409,
                            "message": "The requested operation could not be performed due to the current state of the configuration. For example, an attempt was made to create an object that already exists or an attempt was made to delete an object that is referred to by another object."
                        },
                        {
                            "code": 415,
                            "message": "The request is such that the Accept header does not indicate that JSON is an acceptable format for a response."
                        },
                        {
                            "code": 500,
                            "message": "The server encountered an unexpected error."
                        }
                    ]
                },
                {
                    "method": "PUT",
                    "summary": "Update an existing Password Validator by name, replacing any attributes specified in the request body",
                    "type": "password-validator-response",
                    "nickname": "put-password-validator",
                    "parameters": [
                        {
                            "paramType": "query",
                            "name": "attributes",
                            "description": "Comma-separated list of attributes to include in the response",
                            "required": false,
                            "type": "string"
                        },
                        {
                            "paramType": "query",
                            "name": "excludeAttributes",
                            "description": "Comma-separated list of attributes to exclude from the response",
                            "required": false,
                            "type": "string"
                        },
                        {
                            "paramType": "query",
                            "name": "applyChangeTo",
                            "description": "Specify whether to apply this configuration change to a single server or the whole server group. This does not apply to mirrored subtree objects",
                            "required": false,
                            "type": "string",
                            "enum": [
                                "singleServer",
                                "serverGroup"
                            ]
                        },
                        {
                          "name": "password-validator-name",
                          "description": "Name of the Password Validator",
                          "required": true,
                          "type": "string",
                          "paramType": "path"
                        },
                        {
                            "paramType": "body",
                            "required": true,
                            "description": "Password Validator attributes to update",
                            "name": "password-validator-properties",
                            "type": "password-validator-properties"
                        }
                    ],
                    "responseMessages": [
                        {
                            "code": 200,
                            "message": "The requested operation succeeded"
                        },
                        {
                            "code": 204,
                            "message": "The requested operation succeeded and no further information has been provided, such as in the case of a DELETE operation."
                        },
                        {
                            "code": 400,
                            "message": "The request contents are incorrectly formatted or the request was made for an invalid API version."
                        },
                        {
                            "code": 401,
                            "message": "The requester cannot be authenticated"
                        },
                        {
                            "code": 403,
                            "message": "The requester does not have the required privileges or another constraint failed, such as attempting to delete an edit-only object."
                        },
                        {
                            "code": 404,
                            "message": "The requested path does not refer to an existing object or object relation."
                        },
                        {
                            "code": 409,
                            "message": "The requested operation could not be performed due to the current state of the configuration. For example, an attempt was made to create an object that already exists or an attempt was made to delete an object that is referred to by another object."
                        },
                        {
                            "code": 415,
                            "message": "The request is such that the Accept header does not indicate that JSON is an acceptable format for a response."
                        },
                        {
                            "code": 500,
                            "message": "The server encountered an unexpected error."
                        }
                    ]
                },
                {
                    "method": "PATCH",
                    "summary": "Update an existing Password Validator by name, using a SCIM patch request",
                    "type": "password-validator-response",
                    "nickname": "patch-password-validator",
                    "parameters": [
                        {
                            "paramType": "query",
                            "name": "attributes",
                            "description": "Comma-separated list of attributes to include in the response",
                            "required": false,
                            "type": "string"
                        },
                        {
                            "paramType": "query",
                            "name": "excludeAttributes",
                            "description": "Comma-separated list of attributes to exclude from the response",
                            "required": false,
                            "type": "string"
                        },
                        {
                            "paramType": "query",
                            "name": "applyChangeTo",
                            "description": "Specify whether to apply this configuration change to a single server or the whole server group. This does not apply to mirrored subtree objects",
                            "required": false,
                            "type": "string",
                            "enum": [
                                "singleServer",
                                "serverGroup"
                            ]
                        },
                        {
                          "name": "password-validator-name",
                          "description": "Name of the Password Validator",
                          "required": true,
                          "type": "string",
                          "paramType": "path"
                        },
                        {
                            "paramType": "body",
                            "required": true,
                            "description": "SCIM operations to apply to the Password Validator",
                            "name": "Operations",
                            "type": "Operations"
                        }
                    ],
                    "responseMessages": [
                        {
                            "code": 200,
                            "message": "The requested operation succeeded"
                        },
                        {
                            "code": 204,
                            "message": "The requested operation succeeded and no further information has been provided, such as in the case of a DELETE operation."
                        },
                        {
                            "code": 400,
                            "message": "The request contents are incorrectly formatted or the request was made for an invalid API version."
                        },
                        {
                            "code": 401,
                            "message": "The requester cannot be authenticated"
                        },
                        {
                            "code": 403,
                            "message": "The requester does not have the required privileges or another constraint failed, such as attempting to delete an edit-only object."
                        },
                        {
                            "code": 404,
                            "message": "The requested path does not refer to an existing object or object relation."
                        },
                        {
                            "code": 409,
                            "message": "The requested operation could not be performed due to the current state of the configuration. For example, an attempt was made to create an object that already exists or an attempt was made to delete an object that is referred to by another object."
                        },
                        {
                            "code": 415,
                            "message": "The request is such that the Accept header does not indicate that JSON is an acceptable format for a response."
                        },
                        {
                            "code": 500,
                            "message": "The server encountered an unexpected error."
                        }
                    ]
                },
                {
                    "method": "DELETE",
                    "summary": "Delete a Password Validator",
                    "nickname": "delete-password-validator",
                    "parameters": [
                        {
                          "name": "password-validator-name",
                          "description": "Name of the Password Validator",
                          "required": true,
                          "type": "string",
                          "paramType": "path"
                        }
                    ],
                    "responseMessages": [
                        {
                            "code": 200,
                            "message": "The requested operation succeeded"
                        },
                        {
                            "code": 204,
                            "message": "The requested operation succeeded and no further information has been provided, such as in the case of a DELETE operation."
                        },
                        {
                            "code": 400,
                            "message": "The request contents are incorrectly formatted or the request was made for an invalid API version."
                        },
                        {
                            "code": 401,
                            "message": "The requester cannot be authenticated"
                        },
                        {
                            "code": 403,
                            "message": "The requester does not have the required privileges or another constraint failed, such as attempting to delete an edit-only object."
                        },
                        {
                            "code": 404,
                            "message": "The requested path does not refer to an existing object or object relation."
                        },
                        {
                            "code": 409,
                            "message": "The requested operation could not be performed due to the current state of the configuration. For example, an attempt was made to create an object that already exists or an attempt was made to delete an object that is referred to by another object."
                        },
                        {
                            "code": 415,
                            "message": "The request is such that the Accept header does not indicate that JSON is an acceptable format for a response."
                        },
                        {
                            "code": 500,
                            "message": "The server encountered an unexpected error."
                        }
                    ]
                }
            ]
        }

    ],
    "models": {
        "Meta": {
            "id": "Meta",
            "properties": {
                "resourceType": {
                    "type": "string"
                },
                "location": {
                    "type": "string"
                }
            }
        },
        "Messages": {
            "id": "Messages",
            "properties": {
                "notifications": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "requiredActions": {
                    "type": "array",
                    "items": {
                        "$ref": "RequiredAction"
                    }
                }
            }
        },
        "RequiredAction": {
            "id": "RequiredAction",
            "required": [
                "type",
                "synopsis"
            ],
            "properties": {
                "property": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "synopsis": {
                    "type": "string"
                }
            }
        },
        "Operations": {
            "id": "Operations",
            "required": [
                "operations"
            ],
            "properties": {
                "operations": {
                    "type": "array",
                    "items": {
                        "$ref": "Operation"
                    }
                }
            }
        },
        "Operation": {
            "id": "Operation",
            "required": [
                "op",
                "path"
            ],
            "properties": {
                "op": {
                    "type": "string",
                    "enum": [
                        "add",
                        "remove",
                        "replace"
                    ]
                },
                "path": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "password-validator-list-response": {
            "id": "password-validator-list-response",
            "description": "Password Validator list response",
            "required": [
                "schemas",
                "totalResults"
            ],
            "properties": {
                "schemas": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "enum": [
                            "urn:ietf:params:scim:api:messages:2.0:ListResponse"
                        ]
                    }
                },
                "totalResults": {
                    "type": "integer"
                },
                "Resources": {
                    "type": "array",
                    "items": {
                        "$ref": "password-validator-response"
                    }
                }
            }
        },
        "add-password-validator-request": {
            "id": "add-password-validator-request",
            "description": "A Password Validator resource request",
            "required": [
                "validatorName"
            ],
            "properties": {
                "validatorName": {
                    "type": "string",
                    "description": "Name of the new Password Validator"
                },
                "schemas": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "enum": [
                            "urn:pingidentity:schemas:configuration:2.0:password-validator:character-set"
                            ,
                            "urn:pingidentity:schemas:configuration:2.0:password-validator:similarity-based"
                            ,
                            "urn:pingidentity:schemas:configuration:2.0:password-validator:attribute-value"
                            ,
                            "urn:pingidentity:schemas:configuration:2.0:password-validator:custom"
                            ,
                            "urn:pingidentity:schemas:configuration:2.0:password-validator:repeated-characters"
                            ,
                            "urn:pingidentity:schemas:configuration:2.0:password-validator:dictionary"
                            ,
                            "urn:pingidentity:schemas:configuration:2.0:password-validator:haystack"
                            ,
                            "urn:pingidentity:schemas:configuration:2.0:password-validator:groovy-scripted"
                            ,
                            "urn:pingidentity:schemas:configuration:2.0:password-validator:pwned-passwords"
                            ,
                            "urn:pingidentity:schemas:configuration:2.0:password-validator:length-based"
                            ,
                            "urn:pingidentity:schemas:configuration:2.0:password-validator:regular-expression"
                            ,
                            "urn:pingidentity:schemas:configuration:2.0:password-validator:unique-characters"
                            ,
                            "urn:pingidentity:schemas:configuration:2.0:password-validator:third-party"
                        ]
                    }
                },
                "extensionClass": {
                    "description": "The fully-qualified name of the Java class providing the logic for the Third Party Password Validator.",
                    "type": "string"
                }
                ,
                "characterSet": {
                    "description": "Specifies a character set containing characters that a password may contain and a value indicating the minimum number of characters required from that set.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
                ,
                "matchAttribute": {
                    "description": "Specifies the name(s) of the attribute(s) whose values should be checked to determine whether they match the provided password. If no values are provided, then the server checks if the proposed password matches the value of any user attribute in the target user's entry.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
                ,
                "validatorRequirementDescription": {
                    "description": "Specifies a message that can be used to describe the requirements imposed by this password validator to end users. If a value is provided for this property, then it will override any description that may have otherwise been generated by the validator.",
                    "type": "string"
                }
                ,
                "minimumAcceptableTimeToExhaustSearchSpace": {
                    "description": "The minimum length of time (using the configured number of password guesses per second) required to exhaust the entire search space for a proposed password in order for that password to be considered acceptable.",
                    "type": "string"
                }
                ,
                "acceptPasswordOnServiceError": {
                    "description": "Indicates whether to accept the proposed password if an error occurs while attempting to interact with the Pwned Passwords service.",
                    "type": "boolean"
                }
                ,
                "description": {
                    "description": "A description for this Password Validator",
                    "type": "string"
                }
                ,
                "testPasswordSubstringOfAttributeValue": {
                    "description": "Indicates whether to reject any proposed password that is a substring of a value in one of the match attributes in the target user's entry.",
                    "type": "boolean"
                }
                ,
                "invokeForAdminReset": {
                    "description": "Indicates whether this password validator should be used to validate clear-text passwords provided by administrators when changing the password for another user.",
                    "type": "boolean"
                }
                ,
                "maxPasswordLength": {
                    "description": "Specifies the maximum number of characters that can be included in a proposed password.",
                    "type": "integer"
                }
                ,
                "enabled": {
                    "description": "Indicates whether the password validator is enabled for use.",
                    "type": "boolean"
                }
                ,
                "extensionArgument": {
                    "description": "The set of arguments used to customize the behavior for the Third Party Password Validator. Each configuration property should be given in the form 'name=value'.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
                ,
                "caseSensitiveValidation": {
                    "description": "Indicates whether this password validator should treat password characters in a case-sensitive manner.",
                    "type": "boolean"
                }
                ,
                "validatorFailureMessage": {
                    "description": "Specifies a message that may be provided to the end user in the event that a proposed password is rejected by this validator. If a value is provided for this property, then it will override any failure message that may have otherwise been generated by the validator.",
                    "type": "string"
                }
                ,
                "keyManagerProvider": {
                    "description": "Specifies which key manager provider should be used to obtain a client certificate to present to the validation server when performing HTTPS communication. This may be left undefined if communication will not be secured with HTTPS, or if there is no need to present a client certificate to the validation service.",
                    "type": "string"
                }
                ,
                "allowUnclassifiedCharacters": {
                    "description": "Indicates whether this password validator allows passwords to contain characters outside of any of the user-defined character sets.",
                    "type": "boolean"
                }
                ,
                "minUniqueCharacters": {
                    "description": "Specifies the minimum number of unique characters that a password will be allowed to contain.",
                    "type": "integer"
                }
                ,
                "minPasswordDifference": {
                    "description": "Specifies the minimum difference of new and old password.",
                    "type": "integer"
                }
                ,
                "testReversedPassword": {
                    "description": "Indicates whether to perform matching against the reversed value of the provided password in addition to the order in which it was given.",
                    "type": "boolean"
                }
                ,
                "maximumAllowedPercentOfPassword": {
                    "description": "The maximum allowed percent of a proposed password that any single dictionary word is allowed to comprise. A value of 100 indicates that a proposed password will only be rejected if the dictionary contains the entire proposed password (after any configured transformations have been applied).",
                    "type": "integer"
                }
                ,
                "scriptArgument": {
                    "description": "The set of arguments used to customize the behavior for the Scripted Password Validator. Each configuration property should be given in the form 'name=value'.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
                ,
                "matchPattern": {
                    "description": "The regular expression to use for this password validator.",
                    "type": "string"
                }
                ,
                "matchBehavior": {
                    "description": "The behavior to exhibit if a user's proposed password matches the regular expression defined in the match-pattern property.",
                    "type": "string"
                    , "enum": [
                        "require-match"
                        ,
                        "reject-match"
                    ]
                }
                ,
                "maxConsecutiveLength": {
                    "description": "Specifies the maximum number of times that any character can appear consecutively in a password value.",
                    "type": "integer"
                }
                ,
                "ignoreLeadingNonAlphabeticCharacters": {
                    "description": "Indicates whether to ignore any digits, symbols, or other non-alphabetic characters that may appear at the beginning of a proposed password.",
                    "type": "boolean"
                }
                ,
                "dictionaryFile": {
                    "description": "Specifies the path to the file containing a list of words that cannot be used as passwords.",
                    "type": "string"
                }
                ,
                "trustManagerProvider": {
                    "description": "Specifies which trust manager provider should be used to determine whether to trust the certificate presented by the server when performing HTTPS communication. This may be left undefined if HTTPS communication is not needed, or if the validation service presents a certificate that is trusted by the default JVM configuration (which should be the case for the Pwned Password servers).",
                    "type": "string"
                }
                ,
                "invokeForSelfChange": {
                    "description": "Indicates whether this password validator should be used to validate clear-text passwords provided by an end user in the course of changing their own password.",
                    "type": "boolean"
                }
                ,
                "alternativePasswordCharacterMapping": {
                    "description": "Provides a set of character substitutions that can be applied to the proposed password when checking to see if it is in the provided dictionary. Each mapping should consist of a single character followed by a colon and a list of the alternative characters that may be used in place of that character.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
                ,
                "scriptClass": {
                    "description": "The fully-qualified name of the Groovy class providing the logic for the Groovy Scripted Password Validator.",
                    "type": "string"
                }
                ,
                "minimumAttributeValueLengthForSubstringMatches": {
                    "description": "The minimum length that an attribute value must have for it to be considered when rejecting passwords that contain the value of another attribute as a substring.",
                    "type": "integer"
                }
                ,
                "stripDiacriticalMarks": {
                    "description": "Indicates whether to strip characters of any diacritical marks (like accents, cedillas, circumflexes, diaereses, tildes, and umlauts) they may contain. Any characters with a diacritical mark would be replaced with a base version",
                    "type": "boolean"
                }
                ,
                "invokeForAdd": {
                    "description": "Indicates whether this password validator should be used to validate clear-text passwords provided in LDAP add requests.",
                    "type": "boolean"
                }
                ,
                "ignoreTrailingNonAlphabeticCharacters": {
                    "description": "Indicates whether to ignore any digits, symbols, or other non-alphabetic characters that may appear at the end of a proposed password.",
                    "type": "boolean"
                }
                ,
                "testAttributeValueSubstringOfPassword": {
                    "description": "Indicates whether to reject any proposed password in which a value in one of the match attributes in the target user's entry is a substring of that password.",
                    "type": "boolean"
                }
                ,
                "assumedPasswordGuessesPerSecond": {
                    "description": "The number of password guesses per second that a potential attacker may be expected to make.",
                    "type": "string"
                }
                ,
                "minPasswordLength": {
                    "description": "Specifies the minimum number of characters that must be included in a proposed password.",
                    "type": "integer"
                }
                ,
                "pwnedPasswordsBaseURL": {
                    "description": "The base URL for requests used to interact with the Pwned Passwords service. The first five characters of the hexadecimal representation of the unsalted SHA-1 digest of a proposed password will be appended to this base URL to construct the HTTP GET request used to obtain information about potential matches.",
                    "type": "string"
                }
                ,
                "httpProxyExternalServer": {
                    "description": "A reference to an HTTP proxy server that should be used for requests sent to the Pwned Passwords service.",
                    "type": "string"
                }
                ,
                "minimumRequiredCharacterSets": {
                    "description": "Specifies the minimum number of character sets that must be represented in a proposed password.",
                    "type": "integer"
                }
            }
        },
        "password-validator-response": {
            "id": "password-validator-response",
            "description": "A Password Validator resource response",
            "required": [
                "id"
            ],
            "properties": {
                "schemas": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "enum": [
                            "urn:pingidentity:schemas:configuration:2.0:password-validator:character-set"
                            ,
                            "urn:pingidentity:schemas:configuration:2.0:password-validator:similarity-based"
                            ,
                            "urn:pingidentity:schemas:configuration:2.0:password-validator:attribute-value"
                            ,
                            "urn:pingidentity:schemas:configuration:2.0:password-validator:custom"
                            ,
                            "urn:pingidentity:schemas:configuration:2.0:password-validator:repeated-characters"
                            ,
                            "urn:pingidentity:schemas:configuration:2.0:password-validator:dictionary"
                            ,
                            "urn:pingidentity:schemas:configuration:2.0:password-validator:haystack"
                            ,
                            "urn:pingidentity:schemas:configuration:2.0:password-validator:groovy-scripted"
                            ,
                            "urn:pingidentity:schemas:configuration:2.0:password-validator:pwned-passwords"
                            ,
                            "urn:pingidentity:schemas:configuration:2.0:password-validator:length-based"
                            ,
                            "urn:pingidentity:schemas:configuration:2.0:password-validator:regular-expression"
                            ,
                            "urn:pingidentity:schemas:configuration:2.0:password-validator:unique-characters"
                            ,
                            "urn:pingidentity:schemas:configuration:2.0:password-validator:third-party"
                        ]
                    }
                },
                "id": {
                    "type": "string",
                    "description": "Name of the Password Validator"
                },
                "meta": {
                    "$ref": "Meta"
                },
                "urn:pingidentity:schemas:configuration:messages:2.0": {
                    "$ref": "Messages"
                },
                "extensionClass": {
                    "description": "The fully-qualified name of the Java class providing the logic for the Third Party Password Validator.",
                    "type": "string"
                }
                ,
                "characterSet": {
                    "description": "Specifies a character set containing characters that a password may contain and a value indicating the minimum number of characters required from that set.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
                ,
                "matchAttribute": {
                    "description": "Specifies the name(s) of the attribute(s) whose values should be checked to determine whether they match the provided password. If no values are provided, then the server checks if the proposed password matches the value of any user attribute in the target user's entry.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
                ,
                "validatorRequirementDescription": {
                    "description": "Specifies a message that can be used to describe the requirements imposed by this password validator to end users. If a value is provided for this property, then it will override any description that may have otherwise been generated by the validator.",
                    "type": "string"
                }
                ,
                "minimumAcceptableTimeToExhaustSearchSpace": {
                    "description": "The minimum length of time (using the configured number of password guesses per second) required to exhaust the entire search space for a proposed password in order for that password to be considered acceptable.",
                    "type": "string"
                }
                ,
                "acceptPasswordOnServiceError": {
                    "description": "Indicates whether to accept the proposed password if an error occurs while attempting to interact with the Pwned Passwords service.",
                    "type": "boolean"
                }
                ,
                "description": {
                    "description": "A description for this Password Validator",
                    "type": "string"
                }
                ,
                "testPasswordSubstringOfAttributeValue": {
                    "description": "Indicates whether to reject any proposed password that is a substring of a value in one of the match attributes in the target user's entry.",
                    "type": "boolean"
                }
                ,
                "invokeForAdminReset": {
                    "description": "Indicates whether this password validator should be used to validate clear-text passwords provided by administrators when changing the password for another user.",
                    "type": "boolean"
                }
                ,
                "maxPasswordLength": {
                    "description": "Specifies the maximum number of characters that can be included in a proposed password.",
                    "type": "integer"
                }
                ,
                "enabled": {
                    "description": "Indicates whether the password validator is enabled for use.",
                    "type": "boolean"
                }
                ,
                "extensionArgument": {
                    "description": "The set of arguments used to customize the behavior for the Third Party Password Validator. Each configuration property should be given in the form 'name=value'.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
                ,
                "caseSensitiveValidation": {
                    "description": "Indicates whether this password validator should treat password characters in a case-sensitive manner.",
                    "type": "boolean"
                }
                ,
                "validatorFailureMessage": {
                    "description": "Specifies a message that may be provided to the end user in the event that a proposed password is rejected by this validator. If a value is provided for this property, then it will override any failure message that may have otherwise been generated by the validator.",
                    "type": "string"
                }
                ,
                "keyManagerProvider": {
                    "description": "Specifies which key manager provider should be used to obtain a client certificate to present to the validation server when performing HTTPS communication. This may be left undefined if communication will not be secured with HTTPS, or if there is no need to present a client certificate to the validation service.",
                    "type": "string"
                }
                ,
                "allowUnclassifiedCharacters": {
                    "description": "Indicates whether this password validator allows passwords to contain characters outside of any of the user-defined character sets.",
                    "type": "boolean"
                }
                ,
                "minUniqueCharacters": {
                    "description": "Specifies the minimum number of unique characters that a password will be allowed to contain.",
                    "type": "integer"
                }
                ,
                "minPasswordDifference": {
                    "description": "Specifies the minimum difference of new and old password.",
                    "type": "integer"
                }
                ,
                "testReversedPassword": {
                    "description": "Indicates whether to perform matching against the reversed value of the provided password in addition to the order in which it was given.",
                    "type": "boolean"
                }
                ,
                "maximumAllowedPercentOfPassword": {
                    "description": "The maximum allowed percent of a proposed password that any single dictionary word is allowed to comprise. A value of 100 indicates that a proposed password will only be rejected if the dictionary contains the entire proposed password (after any configured transformations have been applied).",
                    "type": "integer"
                }
                ,
                "scriptArgument": {
                    "description": "The set of arguments used to customize the behavior for the Scripted Password Validator. Each configuration property should be given in the form 'name=value'.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
                ,
                "matchPattern": {
                    "description": "The regular expression to use for this password validator.",
                    "type": "string"
                }
                ,
                "matchBehavior": {
                    "description": "The behavior to exhibit if a user's proposed password matches the regular expression defined in the match-pattern property.",
                    "type": "string"
                    , "enum": [
                        "require-match"
                        ,
                        "reject-match"
                    ]
                }
                ,
                "maxConsecutiveLength": {
                    "description": "Specifies the maximum number of times that any character can appear consecutively in a password value.",
                    "type": "integer"
                }
                ,
                "ignoreLeadingNonAlphabeticCharacters": {
                    "description": "Indicates whether to ignore any digits, symbols, or other non-alphabetic characters that may appear at the beginning of a proposed password.",
                    "type": "boolean"
                }
                ,
                "dictionaryFile": {
                    "description": "Specifies the path to the file containing a list of words that cannot be used as passwords.",
                    "type": "string"
                }
                ,
                "trustManagerProvider": {
                    "description": "Specifies which trust manager provider should be used to determine whether to trust the certificate presented by the server when performing HTTPS communication. This may be left undefined if HTTPS communication is not needed, or if the validation service presents a certificate that is trusted by the default JVM configuration (which should be the case for the Pwned Password servers).",
                    "type": "string"
                }
                ,
                "invokeForSelfChange": {
                    "description": "Indicates whether this password validator should be used to validate clear-text passwords provided by an end user in the course of changing their own password.",
                    "type": "boolean"
                }
                ,
                "alternativePasswordCharacterMapping": {
                    "description": "Provides a set of character substitutions that can be applied to the proposed password when checking to see if it is in the provided dictionary. Each mapping should consist of a single character followed by a colon and a list of the alternative characters that may be used in place of that character.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
                ,
                "scriptClass": {
                    "description": "The fully-qualified name of the Groovy class providing the logic for the Groovy Scripted Password Validator.",
                    "type": "string"
                }
                ,
                "minimumAttributeValueLengthForSubstringMatches": {
                    "description": "The minimum length that an attribute value must have for it to be considered when rejecting passwords that contain the value of another attribute as a substring.",
                    "type": "integer"
                }
                ,
                "stripDiacriticalMarks": {
                    "description": "Indicates whether to strip characters of any diacritical marks (like accents, cedillas, circumflexes, diaereses, tildes, and umlauts) they may contain. Any characters with a diacritical mark would be replaced with a base version",
                    "type": "boolean"
                }
                ,
                "invokeForAdd": {
                    "description": "Indicates whether this password validator should be used to validate clear-text passwords provided in LDAP add requests.",
                    "type": "boolean"
                }
                ,
                "ignoreTrailingNonAlphabeticCharacters": {
                    "description": "Indicates whether to ignore any digits, symbols, or other non-alphabetic characters that may appear at the end of a proposed password.",
                    "type": "boolean"
                }
                ,
                "testAttributeValueSubstringOfPassword": {
                    "description": "Indicates whether to reject any proposed password in which a value in one of the match attributes in the target user's entry is a substring of that password.",
                    "type": "boolean"
                }
                ,
                "assumedPasswordGuessesPerSecond": {
                    "description": "The number of password guesses per second that a potential attacker may be expected to make.",
                    "type": "string"
                }
                ,
                "minPasswordLength": {
                    "description": "Specifies the minimum number of characters that must be included in a proposed password.",
                    "type": "integer"
                }
                ,
                "pwnedPasswordsBaseURL": {
                    "description": "The base URL for requests used to interact with the Pwned Passwords service. The first five characters of the hexadecimal representation of the unsalted SHA-1 digest of a proposed password will be appended to this base URL to construct the HTTP GET request used to obtain information about potential matches.",
                    "type": "string"
                }
                ,
                "httpProxyExternalServer": {
                    "description": "A reference to an HTTP proxy server that should be used for requests sent to the Pwned Passwords service.",
                    "type": "string"
                }
                ,
                "minimumRequiredCharacterSets": {
                    "description": "Specifies the minimum number of character sets that must be represented in a proposed password.",
                    "type": "integer"
                }
            }
        },
        "password-validator-properties": {
            "id": "password-validator-properties",
            "description": "Password Validator properties",
            "properties": {
                "schemas": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "enum": [
                            "urn:pingidentity:schemas:configuration:2.0:password-validator:character-set"
                            ,
                            "urn:pingidentity:schemas:configuration:2.0:password-validator:similarity-based"
                            ,
                            "urn:pingidentity:schemas:configuration:2.0:password-validator:attribute-value"
                            ,
                            "urn:pingidentity:schemas:configuration:2.0:password-validator:custom"
                            ,
                            "urn:pingidentity:schemas:configuration:2.0:password-validator:repeated-characters"
                            ,
                            "urn:pingidentity:schemas:configuration:2.0:password-validator:dictionary"
                            ,
                            "urn:pingidentity:schemas:configuration:2.0:password-validator:haystack"
                            ,
                            "urn:pingidentity:schemas:configuration:2.0:password-validator:groovy-scripted"
                            ,
                            "urn:pingidentity:schemas:configuration:2.0:password-validator:pwned-passwords"
                            ,
                            "urn:pingidentity:schemas:configuration:2.0:password-validator:length-based"
                            ,
                            "urn:pingidentity:schemas:configuration:2.0:password-validator:regular-expression"
                            ,
                            "urn:pingidentity:schemas:configuration:2.0:password-validator:unique-characters"
                            ,
                            "urn:pingidentity:schemas:configuration:2.0:password-validator:third-party"
                        ]
                    }
                },
                "extensionClass": {
                    "description": "The fully-qualified name of the Java class providing the logic for the Third Party Password Validator.",
                    "type": "string"
                }
                ,
                "characterSet": {
                    "description": "Specifies a character set containing characters that a password may contain and a value indicating the minimum number of characters required from that set.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
                ,
                "matchAttribute": {
                    "description": "Specifies the name(s) of the attribute(s) whose values should be checked to determine whether they match the provided password. If no values are provided, then the server checks if the proposed password matches the value of any user attribute in the target user's entry.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
                ,
                "validatorRequirementDescription": {
                    "description": "Specifies a message that can be used to describe the requirements imposed by this password validator to end users. If a value is provided for this property, then it will override any description that may have otherwise been generated by the validator.",
                    "type": "string"
                }
                ,
                "minimumAcceptableTimeToExhaustSearchSpace": {
                    "description": "The minimum length of time (using the configured number of password guesses per second) required to exhaust the entire search space for a proposed password in order for that password to be considered acceptable.",
                    "type": "string"
                }
                ,
                "acceptPasswordOnServiceError": {
                    "description": "Indicates whether to accept the proposed password if an error occurs while attempting to interact with the Pwned Passwords service.",
                    "type": "boolean"
                }
                ,
                "description": {
                    "description": "A description for this Password Validator",
                    "type": "string"
                }
                ,
                "testPasswordSubstringOfAttributeValue": {
                    "description": "Indicates whether to reject any proposed password that is a substring of a value in one of the match attributes in the target user's entry.",
                    "type": "boolean"
                }
                ,
                "invokeForAdminReset": {
                    "description": "Indicates whether this password validator should be used to validate clear-text passwords provided by administrators when changing the password for another user.",
                    "type": "boolean"
                }
                ,
                "maxPasswordLength": {
                    "description": "Specifies the maximum number of characters that can be included in a proposed password.",
                    "type": "integer"
                }
                ,
                "enabled": {
                    "description": "Indicates whether the password validator is enabled for use.",
                    "type": "boolean"
                }
                ,
                "extensionArgument": {
                    "description": "The set of arguments used to customize the behavior for the Third Party Password Validator. Each configuration property should be given in the form 'name=value'.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
                ,
                "caseSensitiveValidation": {
                    "description": "Indicates whether this password validator should treat password characters in a case-sensitive manner.",
                    "type": "boolean"
                }
                ,
                "validatorFailureMessage": {
                    "description": "Specifies a message that may be provided to the end user in the event that a proposed password is rejected by this validator. If a value is provided for this property, then it will override any failure message that may have otherwise been generated by the validator.",
                    "type": "string"
                }
                ,
                "keyManagerProvider": {
                    "description": "Specifies which key manager provider should be used to obtain a client certificate to present to the validation server when performing HTTPS communication. This may be left undefined if communication will not be secured with HTTPS, or if there is no need to present a client certificate to the validation service.",
                    "type": "string"
                }
                ,
                "allowUnclassifiedCharacters": {
                    "description": "Indicates whether this password validator allows passwords to contain characters outside of any of the user-defined character sets.",
                    "type": "boolean"
                }
                ,
                "minUniqueCharacters": {
                    "description": "Specifies the minimum number of unique characters that a password will be allowed to contain.",
                    "type": "integer"
                }
                ,
                "minPasswordDifference": {
                    "description": "Specifies the minimum difference of new and old password.",
                    "type": "integer"
                }
                ,
                "testReversedPassword": {
                    "description": "Indicates whether to perform matching against the reversed value of the provided password in addition to the order in which it was given.",
                    "type": "boolean"
                }
                ,
                "maximumAllowedPercentOfPassword": {
                    "description": "The maximum allowed percent of a proposed password that any single dictionary word is allowed to comprise. A value of 100 indicates that a proposed password will only be rejected if the dictionary contains the entire proposed password (after any configured transformations have been applied).",
                    "type": "integer"
                }
                ,
                "scriptArgument": {
                    "description": "The set of arguments used to customize the behavior for the Scripted Password Validator. Each configuration property should be given in the form 'name=value'.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
                ,
                "matchPattern": {
                    "description": "The regular expression to use for this password validator.",
                    "type": "string"
                }
                ,
                "matchBehavior": {
                    "description": "The behavior to exhibit if a user's proposed password matches the regular expression defined in the match-pattern property.",
                    "type": "string"
                    , "enum": [
                        "require-match"
                        ,
                        "reject-match"
                    ]
                }
                ,
                "maxConsecutiveLength": {
                    "description": "Specifies the maximum number of times that any character can appear consecutively in a password value.",
                    "type": "integer"
                }
                ,
                "ignoreLeadingNonAlphabeticCharacters": {
                    "description": "Indicates whether to ignore any digits, symbols, or other non-alphabetic characters that may appear at the beginning of a proposed password.",
                    "type": "boolean"
                }
                ,
                "dictionaryFile": {
                    "description": "Specifies the path to the file containing a list of words that cannot be used as passwords.",
                    "type": "string"
                }
                ,
                "trustManagerProvider": {
                    "description": "Specifies which trust manager provider should be used to determine whether to trust the certificate presented by the server when performing HTTPS communication. This may be left undefined if HTTPS communication is not needed, or if the validation service presents a certificate that is trusted by the default JVM configuration (which should be the case for the Pwned Password servers).",
                    "type": "string"
                }
                ,
                "invokeForSelfChange": {
                    "description": "Indicates whether this password validator should be used to validate clear-text passwords provided by an end user in the course of changing their own password.",
                    "type": "boolean"
                }
                ,
                "alternativePasswordCharacterMapping": {
                    "description": "Provides a set of character substitutions that can be applied to the proposed password when checking to see if it is in the provided dictionary. Each mapping should consist of a single character followed by a colon and a list of the alternative characters that may be used in place of that character.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
                ,
                "scriptClass": {
                    "description": "The fully-qualified name of the Groovy class providing the logic for the Groovy Scripted Password Validator.",
                    "type": "string"
                }
                ,
                "minimumAttributeValueLengthForSubstringMatches": {
                    "description": "The minimum length that an attribute value must have for it to be considered when rejecting passwords that contain the value of another attribute as a substring.",
                    "type": "integer"
                }
                ,
                "stripDiacriticalMarks": {
                    "description": "Indicates whether to strip characters of any diacritical marks (like accents, cedillas, circumflexes, diaereses, tildes, and umlauts) they may contain. Any characters with a diacritical mark would be replaced with a base version",
                    "type": "boolean"
                }
                ,
                "invokeForAdd": {
                    "description": "Indicates whether this password validator should be used to validate clear-text passwords provided in LDAP add requests.",
                    "type": "boolean"
                }
                ,
                "ignoreTrailingNonAlphabeticCharacters": {
                    "description": "Indicates whether to ignore any digits, symbols, or other non-alphabetic characters that may appear at the end of a proposed password.",
                    "type": "boolean"
                }
                ,
                "testAttributeValueSubstringOfPassword": {
                    "description": "Indicates whether to reject any proposed password in which a value in one of the match attributes in the target user's entry is a substring of that password.",
                    "type": "boolean"
                }
                ,
                "assumedPasswordGuessesPerSecond": {
                    "description": "The number of password guesses per second that a potential attacker may be expected to make.",
                    "type": "string"
                }
                ,
                "minPasswordLength": {
                    "description": "Specifies the minimum number of characters that must be included in a proposed password.",
                    "type": "integer"
                }
                ,
                "pwnedPasswordsBaseURL": {
                    "description": "The base URL for requests used to interact with the Pwned Passwords service. The first five characters of the hexadecimal representation of the unsalted SHA-1 digest of a proposed password will be appended to this base URL to construct the HTTP GET request used to obtain information about potential matches.",
                    "type": "string"
                }
                ,
                "httpProxyExternalServer": {
                    "description": "A reference to an HTTP proxy server that should be used for requests sent to the Pwned Passwords service.",
                    "type": "string"
                }
                ,
                "minimumRequiredCharacterSets": {
                    "description": "Specifies the minimum number of character sets that must be represented in a proposed password.",
                    "type": "integer"
                }
            }
        }
    }
}
