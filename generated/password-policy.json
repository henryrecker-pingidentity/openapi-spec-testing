{
    "apiVersion": "9.2.0.0",
    "swaggerVersion": "1.2",
    "basePath": "https://localhost:1443/config",
    "authorizations": {
        "basic": {
            "type": "basicAuth"
        }
    },
    "apis": [
        {
            "path": "/password-policies",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Returns a list of all Password Policy objects",
                    "type": "password-policy-list-response",
                    "nickname": "list-password-policies",
                    "parameters": [
                        {
                            "paramType": "query",
                            "name": "filter",
                            "description": "SCIM filter",
                            "required": false,
                            "type": "string"
                        },
                        {
                            "paramType": "query",
                            "name": "sortBy",
                            "description": "Specifies a property value by which to sort",
                            "required": false,
                            "type": "string"
                        },
                        {
                            "paramType": "query",
                            "name": "sortOrder",
                            "description": "Specifies either ascending or descending alphabetical order",
                            "required": false,
                            "type": "string",
                            "enum": [
                                "ascending",
                                "descending"
                            ]
                        },
                        {
                            "paramType": "query",
                            "name": "startIndex",
                            "description": "1-based index of the first result to return",
                            "required": false,
                            "type": "string"
                        },
                        {
                            "paramType": "query",
                            "name": "count",
                            "description": "Indicates the number of results per page",
                            "required": false,
                            "type": "string"
                        },
                        {
                            "paramType": "query",
                            "name": "attributes",
                            "description": "Comma-separated list of attributes to include in the response",
                            "required": false,
                            "type": "string"
                        },
                        {
                            "paramType": "query",
                            "name": "excludeAttributes",
                            "description": "Comma-separated list of attributes to exclude from the response",
                            "required": false,
                            "type": "string"
                        }
                    ],
                    "responseMessages": [
                        {
                            "code": 200,
                            "message": "The requested operation succeeded"
                        },
                        {
                            "code": 204,
                            "message": "The requested operation succeeded and no further information has been provided, such as in the case of a DELETE operation."
                        },
                        {
                            "code": 400,
                            "message": "The request contents are incorrectly formatted or the request was made for an invalid API version."
                        },
                        {
                            "code": 401,
                            "message": "The requester cannot be authenticated"
                        },
                        {
                            "code": 403,
                            "message": "The requester does not have the required privileges or another constraint failed, such as attempting to delete an edit-only object."
                        },
                        {
                            "code": 404,
                            "message": "The requested path does not refer to an existing object or object relation."
                        },
                        {
                            "code": 409,
                            "message": "The requested operation could not be performed due to the current state of the configuration. For example, an attempt was made to create an object that already exists or an attempt was made to delete an object that is referred to by another object."
                        },
                        {
                            "code": 415,
                            "message": "The request is such that the Accept header does not indicate that JSON is an acceptable format for a response."
                        },
                        {
                            "code": 500,
                            "message": "The server encountered an unexpected error."
                        }
                    ]
                },
                {
                    "method": "POST",
                    "summary": "Add a new Password Policy to the config",
                    "nickname": "add-password-policy",
                    "type": "password-policy-response",
                    "parameters": [
                        {
                            "paramType": "body",
                            "required": true,
                            "description": "Password Policy to add",
                            "name": "add-password-policy-request",
                            "type": "add-password-policy-request"
                        },
                        {
                            "paramType": "query",
                            "name": "attributes",
                            "description": "Comma-separated list of attributes to include in the response",
                            "required": false,
                            "type": "string"
                        },
                        {
                            "paramType": "query",
                            "name": "excludeAttributes",
                            "description": "Comma-separated list of attributes to exclude from the response",
                            "required": false,
                            "type": "string"
                        },
                        {
                            "paramType": "query",
                            "name": "applyChangeTo",
                            "description": "Specify whether to apply this configuration change to a single server or the whole server group. This does not apply to mirrored subtree objects",
                            "required": false,
                            "type": "string",
                            "enum": [
                                "singleServer",
                                "serverGroup"
                            ]
                        }
                    ],
                    "responseMessages": [
                        {
                            "code": 200,
                            "message": "The requested operation succeeded"
                        },
                        {
                            "code": 204,
                            "message": "The requested operation succeeded and no further information has been provided, such as in the case of a DELETE operation."
                        },
                        {
                            "code": 400,
                            "message": "The request contents are incorrectly formatted or the request was made for an invalid API version."
                        },
                        {
                            "code": 401,
                            "message": "The requester cannot be authenticated"
                        },
                        {
                            "code": 403,
                            "message": "The requester does not have the required privileges or another constraint failed, such as attempting to delete an edit-only object."
                        },
                        {
                            "code": 404,
                            "message": "The requested path does not refer to an existing object or object relation."
                        },
                        {
                            "code": 409,
                            "message": "The requested operation could not be performed due to the current state of the configuration. For example, an attempt was made to create an object that already exists or an attempt was made to delete an object that is referred to by another object."
                        },
                        {
                            "code": 415,
                            "message": "The request is such that the Accept header does not indicate that JSON is an acceptable format for a response."
                        },
                        {
                            "code": 500,
                            "message": "The server encountered an unexpected error."
                        }
                    ]
                }
            ]
        },
        {
            "path": "/password-policies/{password-policy-name}",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Returns a single Password Policy",
                    "type": "password-policy-response",
                    "nickname": "get-password-policy",
                    "parameters": [
                        {
                            "paramType": "query",
                            "name": "attributes",
                            "description": "Comma-separated list of attributes to include in the response",
                            "required": false,
                            "type": "string"
                        },
                        {
                            "paramType": "query",
                            "name": "excludeAttributes",
                            "description": "Comma-separated list of attributes to exclude from the response",
                            "required": false,
                            "type": "string"
                        },
                        {
                          "name": "password-policy-name",
                          "description": "Name of the Password Policy",
                          "required": true,
                          "type": "string",
                          "paramType": "path"
                        }
                    ],
                    "responseMessages": [
                        {
                            "code": 200,
                            "message": "The requested operation succeeded"
                        },
                        {
                            "code": 204,
                            "message": "The requested operation succeeded and no further information has been provided, such as in the case of a DELETE operation."
                        },
                        {
                            "code": 400,
                            "message": "The request contents are incorrectly formatted or the request was made for an invalid API version."
                        },
                        {
                            "code": 401,
                            "message": "The requester cannot be authenticated"
                        },
                        {
                            "code": 403,
                            "message": "The requester does not have the required privileges or another constraint failed, such as attempting to delete an edit-only object."
                        },
                        {
                            "code": 404,
                            "message": "The requested path does not refer to an existing object or object relation."
                        },
                        {
                            "code": 409,
                            "message": "The requested operation could not be performed due to the current state of the configuration. For example, an attempt was made to create an object that already exists or an attempt was made to delete an object that is referred to by another object."
                        },
                        {
                            "code": 415,
                            "message": "The request is such that the Accept header does not indicate that JSON is an acceptable format for a response."
                        },
                        {
                            "code": 500,
                            "message": "The server encountered an unexpected error."
                        }
                    ]
                },
                {
                    "method": "PUT",
                    "summary": "Update an existing Password Policy by name, replacing any attributes specified in the request body",
                    "type": "password-policy-response",
                    "nickname": "put-password-policy",
                    "parameters": [
                        {
                            "paramType": "query",
                            "name": "attributes",
                            "description": "Comma-separated list of attributes to include in the response",
                            "required": false,
                            "type": "string"
                        },
                        {
                            "paramType": "query",
                            "name": "excludeAttributes",
                            "description": "Comma-separated list of attributes to exclude from the response",
                            "required": false,
                            "type": "string"
                        },
                        {
                            "paramType": "query",
                            "name": "applyChangeTo",
                            "description": "Specify whether to apply this configuration change to a single server or the whole server group. This does not apply to mirrored subtree objects",
                            "required": false,
                            "type": "string",
                            "enum": [
                                "singleServer",
                                "serverGroup"
                            ]
                        },
                        {
                          "name": "password-policy-name",
                          "description": "Name of the Password Policy",
                          "required": true,
                          "type": "string",
                          "paramType": "path"
                        },
                        {
                            "paramType": "body",
                            "required": true,
                            "description": "Password Policy attributes to update",
                            "name": "password-policy-properties",
                            "type": "password-policy-properties"
                        }
                    ],
                    "responseMessages": [
                        {
                            "code": 200,
                            "message": "The requested operation succeeded"
                        },
                        {
                            "code": 204,
                            "message": "The requested operation succeeded and no further information has been provided, such as in the case of a DELETE operation."
                        },
                        {
                            "code": 400,
                            "message": "The request contents are incorrectly formatted or the request was made for an invalid API version."
                        },
                        {
                            "code": 401,
                            "message": "The requester cannot be authenticated"
                        },
                        {
                            "code": 403,
                            "message": "The requester does not have the required privileges or another constraint failed, such as attempting to delete an edit-only object."
                        },
                        {
                            "code": 404,
                            "message": "The requested path does not refer to an existing object or object relation."
                        },
                        {
                            "code": 409,
                            "message": "The requested operation could not be performed due to the current state of the configuration. For example, an attempt was made to create an object that already exists or an attempt was made to delete an object that is referred to by another object."
                        },
                        {
                            "code": 415,
                            "message": "The request is such that the Accept header does not indicate that JSON is an acceptable format for a response."
                        },
                        {
                            "code": 500,
                            "message": "The server encountered an unexpected error."
                        }
                    ]
                },
                {
                    "method": "PATCH",
                    "summary": "Update an existing Password Policy by name, using a SCIM patch request",
                    "type": "password-policy-response",
                    "nickname": "patch-password-policy",
                    "parameters": [
                        {
                            "paramType": "query",
                            "name": "attributes",
                            "description": "Comma-separated list of attributes to include in the response",
                            "required": false,
                            "type": "string"
                        },
                        {
                            "paramType": "query",
                            "name": "excludeAttributes",
                            "description": "Comma-separated list of attributes to exclude from the response",
                            "required": false,
                            "type": "string"
                        },
                        {
                            "paramType": "query",
                            "name": "applyChangeTo",
                            "description": "Specify whether to apply this configuration change to a single server or the whole server group. This does not apply to mirrored subtree objects",
                            "required": false,
                            "type": "string",
                            "enum": [
                                "singleServer",
                                "serverGroup"
                            ]
                        },
                        {
                          "name": "password-policy-name",
                          "description": "Name of the Password Policy",
                          "required": true,
                          "type": "string",
                          "paramType": "path"
                        },
                        {
                            "paramType": "body",
                            "required": true,
                            "description": "SCIM operations to apply to the Password Policy",
                            "name": "Operations",
                            "type": "Operations"
                        }
                    ],
                    "responseMessages": [
                        {
                            "code": 200,
                            "message": "The requested operation succeeded"
                        },
                        {
                            "code": 204,
                            "message": "The requested operation succeeded and no further information has been provided, such as in the case of a DELETE operation."
                        },
                        {
                            "code": 400,
                            "message": "The request contents are incorrectly formatted or the request was made for an invalid API version."
                        },
                        {
                            "code": 401,
                            "message": "The requester cannot be authenticated"
                        },
                        {
                            "code": 403,
                            "message": "The requester does not have the required privileges or another constraint failed, such as attempting to delete an edit-only object."
                        },
                        {
                            "code": 404,
                            "message": "The requested path does not refer to an existing object or object relation."
                        },
                        {
                            "code": 409,
                            "message": "The requested operation could not be performed due to the current state of the configuration. For example, an attempt was made to create an object that already exists or an attempt was made to delete an object that is referred to by another object."
                        },
                        {
                            "code": 415,
                            "message": "The request is such that the Accept header does not indicate that JSON is an acceptable format for a response."
                        },
                        {
                            "code": 500,
                            "message": "The server encountered an unexpected error."
                        }
                    ]
                },
                {
                    "method": "DELETE",
                    "summary": "Delete a Password Policy",
                    "nickname": "delete-password-policy",
                    "parameters": [
                        {
                          "name": "password-policy-name",
                          "description": "Name of the Password Policy",
                          "required": true,
                          "type": "string",
                          "paramType": "path"
                        }
                    ],
                    "responseMessages": [
                        {
                            "code": 200,
                            "message": "The requested operation succeeded"
                        },
                        {
                            "code": 204,
                            "message": "The requested operation succeeded and no further information has been provided, such as in the case of a DELETE operation."
                        },
                        {
                            "code": 400,
                            "message": "The request contents are incorrectly formatted or the request was made for an invalid API version."
                        },
                        {
                            "code": 401,
                            "message": "The requester cannot be authenticated"
                        },
                        {
                            "code": 403,
                            "message": "The requester does not have the required privileges or another constraint failed, such as attempting to delete an edit-only object."
                        },
                        {
                            "code": 404,
                            "message": "The requested path does not refer to an existing object or object relation."
                        },
                        {
                            "code": 409,
                            "message": "The requested operation could not be performed due to the current state of the configuration. For example, an attempt was made to create an object that already exists or an attempt was made to delete an object that is referred to by another object."
                        },
                        {
                            "code": 415,
                            "message": "The request is such that the Accept header does not indicate that JSON is an acceptable format for a response."
                        },
                        {
                            "code": 500,
                            "message": "The server encountered an unexpected error."
                        }
                    ]
                }
            ]
        }

    ],
    "models": {
        "Meta": {
            "id": "Meta",
            "properties": {
                "resourceType": {
                    "type": "string"
                },
                "location": {
                    "type": "string"
                }
            }
        },
        "Messages": {
            "id": "Messages",
            "properties": {
                "notifications": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "requiredActions": {
                    "type": "array",
                    "items": {
                        "$ref": "RequiredAction"
                    }
                }
            }
        },
        "RequiredAction": {
            "id": "RequiredAction",
            "required": [
                "type",
                "synopsis"
            ],
            "properties": {
                "property": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "synopsis": {
                    "type": "string"
                }
            }
        },
        "Operations": {
            "id": "Operations",
            "required": [
                "operations"
            ],
            "properties": {
                "operations": {
                    "type": "array",
                    "items": {
                        "$ref": "Operation"
                    }
                }
            }
        },
        "Operation": {
            "id": "Operation",
            "required": [
                "op",
                "path"
            ],
            "properties": {
                "op": {
                    "type": "string",
                    "enum": [
                        "add",
                        "remove",
                        "replace"
                    ]
                },
                "path": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "password-policy-list-response": {
            "id": "password-policy-list-response",
            "description": "Password Policy list response",
            "required": [
                "schemas",
                "totalResults"
            ],
            "properties": {
                "schemas": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "enum": [
                            "urn:ietf:params:scim:api:messages:2.0:ListResponse"
                        ]
                    }
                },
                "totalResults": {
                    "type": "integer"
                },
                "Resources": {
                    "type": "array",
                    "items": {
                        "$ref": "password-policy-response"
                    }
                }
            }
        },
        "add-password-policy-request": {
            "id": "add-password-policy-request",
            "description": "A Password Policy resource request",
            "required": [
                "policyName"
            ],
            "properties": {
                "policyName": {
                    "type": "string",
                    "description": "Name of the new Password Policy"
                },
                "schemas": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "enum": [
                            "urn:pingidentity:schemas:configuration:2.0:password-policy"
                        ]
                    }
                },
                "previousLastLoginTimeFormat": {
                    "description": "Specifies the format string(s) that might have been used with the last login time at any point in the past for users associated with the password policy.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
                ,
                "recentLoginHistorySimilarAttemptBehavior": {
                    "description": "The behavior that the server will exhibit when multiple similar authentication attempts (with the same values for the successful, authentication-method, client-ip-address, and failure-reason fields) are processed for an account.",
                    "type": "string"
                    , "enum": [
                        "collapse-similar-attempts-on-the-same-date"
                        ,
                        "maintain-every-attempt"
                        ,
                        "update-at-most-once-per-day"
                    ]
                }
                ,
                "maxPasswordAge": {
                    "description": "Specifies the maximum length of time that a user can continue using the same password before it must be changed (that is, the password expiration interval).",
                    "type": "string"
                }
                ,
                "requireChangeByTime": {
                    "description": "Specifies the time by which all users with the associated password policy must change their passwords.",
                    "type": "string"
                }
                ,
                "requireSecurePasswordChanges": {
                    "description": "Indicates whether users with the associated password policy are required to change their password in a secure manner that does not expose the credentials.",
                    "type": "boolean"
                }
                ,
                "accountStatusNotificationHandler": {
                    "description": "Specifies the names of the account status notification handlers that are used with the associated password storage scheme.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
                ,
                "passwordHistoryDuration": {
                    "description": "Specifies the maximum length of time that passwords remain in the password history.",
                    "type": "string"
                }
                ,
                "deprecatedPasswordStorageScheme": {
                    "description": "Specifies the names of the password storage schemes that are considered deprecated for this password policy.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
                ,
                "lockoutFailureCount": {
                    "description": "Specifies the maximum number of authentication failures that a user is allowed before the account is locked out.",
                    "type": "integer"
                }
                ,
                "failureLockoutAction": {
                    "description": "The action that the server should take for authentication attempts that target a user with more than the configured number of outstanding authentication failures.",
                    "type": "string"
                }
                ,
                "requireSecureAuthentication": {
                    "description": "Indicates whether users with the associated password policy are required to authenticate in a secure manner.",
                    "type": "boolean"
                }
                ,
                "defaultPasswordStorageScheme": {
                    "description": "Specifies the names of the password storage schemes that are used to encode clear-text passwords for this password policy.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
                ,
                "maxPasswordResetAge": {
                    "description": "Specifies the maximum length of time that users have to change passwords after they have been reset by an administrator before they become locked.",
                    "type": "string"
                }
                ,
                "forceChangeOnReset": {
                    "description": "Indicates whether users are forced to change their passwords if they are reset by an administrator. If a user's password is changed by any other user, that is considered an administrative password reset.",
                    "type": "boolean"
                }
                ,
                "minPasswordAge": {
                    "description": "Specifies the minimum length of time after a password change before the user is allowed to change the password again.",
                    "type": "string"
                }
                ,
                "minimumBindPasswordValidationFrequency": {
                    "description": "Indicates how frequently password validation should be performed during bind operations for each user to whom this password policy is assigned.",
                    "type": "string"
                }
                ,
                "skipValidationForAdministrators": {
                    "description": "Indicates whether passwords set by administrators are allowed to bypass the password validation process that is required for user password changes.",
                    "type": "boolean"
                }
                ,
                "forceChangeOnAdd": {
                    "description": "Indicates whether users are forced to change their passwords upon first authenticating to the Directory Server after their account has been created.",
                    "type": "boolean"
                }
                ,
                "maximumRecentLoginHistoryFailedAuthenticationCount": {
                    "description": "The maximum number of failed authentication attempts to include in the recent login history for each account.",
                    "type": "integer"
                }
                ,
                "ignoreDuplicatePasswordFailures": {
                    "description": "Indicates whether to ignore subsequent authentication failures using the same password as an earlier failed authentication attempt (within the time frame defined by the lockout failure expiration interval). If this option is "true", then multiple failed attempts using the same password will be considered only a single failure. If this option is "false", then any failure will be tracked regardless of whether it used the same password as an earlier attempt.",
                    "type": "boolean"
                }
                ,
                "lastLoginTimeFormat": {
                    "description": "Specifies the format string that is used to generate the last login time value for users with the associated password policy. Last login time values will be written using the UTC (also known as GMT, or Greenwich Mean Time) time zone.",
                    "type": "string"
                }
                ,
                "passwordGenerator": {
                    "description": "Specifies the name of the password generator that is used with the associated password policy.",
                    "type": "string"
                }
                ,
                "expirePasswordsWithoutWarning": {
                    "description": "Indicates whether the Directory Server allows a user's password to expire even if that user has never seen an expiration warning notification.",
                    "type": "boolean"
                }
                ,
                "passwordAttribute": {
                    "description": "Specifies the attribute type used to hold user passwords.",
                    "type": "string"
                }
                ,
                "passwordChangeRequiresCurrentPassword": {
                    "description": "Indicates whether user password changes must use the password modify extended operation and must include the user's current password before the change is allowed.",
                    "type": "boolean"
                }
                ,
                "lastLoginTimeAttribute": {
                    "description": "Specifies the name or OID of the attribute type that is used to hold the last login time for users with the associated password policy.",
                    "type": "string"
                }
                ,
                "lastLoginIPAddressAttribute": {
                    "description": "Specifies the name or OID of the attribute type that is used to hold the IP address of the client from which the user last authenticated.",
                    "type": "string"
                }
                ,
                "enableDebug": {
                    "description": "Indicates whether to enable debugging for the password policy state.",
                    "type": "boolean"
                }
                ,
                "returnPasswordExpirationControls": {
                    "description": "Indicates whether the server should return the password expiring and password expired response controls (as described in draft-vchu-ldap-pwd-policy).",
                    "type": "string"
                    , "enum": [
                        "unless-password-policy-control-is-used"
                        ,
                        "always"
                        ,
                        "never"
                    ]
                }
                ,
                "passwordExpirationWarningInterval": {
                    "description": "Specifies the maximum length of time before a user's password actually expires that the server begins to include warning notifications in bind responses for that user.",
                    "type": "string"
                }
                ,
                "graceLoginCount": {
                    "description": "Specifies the number of grace logins that a user is allowed after the account has expired to allow that user to choose a new password.",
                    "type": "integer"
                }
                ,
                "description": {
                    "description": "A description for this Password Policy",
                    "type": "string"
                }
                ,
                "bindPasswordValidator": {
                    "description": "Specifies the names of the password validators that should be invoked for bind operations.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
                ,
                "maximumRecentLoginHistorySuccessfulAuthenticationDuration": {
                    "description": "The maximum age of successful authentication attempts to include in the recent login history for each account.",
                    "type": "string"
                }
                ,
                "idleLockoutInterval": {
                    "description": "Specifies the maximum length of time that an account may remain idle (that is, the associated user does not authenticate to the server) before that user is locked out.",
                    "type": "string"
                }
                ,
                "lockoutFailureExpirationInterval": {
                    "description": "Specifies the length of time before an authentication failure is no longer counted against a user for the purposes of account lockout.",
                    "type": "string"
                }
                ,
                "allowPreEncodedPasswords": {
                    "description": "Indicates whether users can change their passwords by providing a pre-encoded value.",
                    "type": "boolean"
                }
                ,
                "stateUpdateFailurePolicy": {
                    "description": "Specifies how the server deals with the inability to update password policy state information during an authentication attempt.",
                    "type": "string"
                    , "enum": [
                        "ignore"
                        ,
                        "reactive"
                        ,
                        "proactive"
                    ]
                }
                ,
                "allowMultiplePasswordValues": {
                    "description": "Indicates whether user entries can have multiple distinct values for the password attribute.",
                    "type": "boolean"
                }
                ,
                "allowExpiredPasswordChanges": {
                    "description": "Indicates whether a user whose password is expired is still allowed to change that password using the password modify extended operation.",
                    "type": "boolean"
                }
                ,
                "maximumRecentLoginHistorySuccessfulAuthenticationCount": {
                    "description": "The maximum number of successful authentication attempts to include in the recent login history for each account.",
                    "type": "integer"
                }
                ,
                "maxRetiredPasswordAge": {
                    "description": "Specifies the maximum length of time that a retired password should be considered valid and may be used to authenticate to the server.",
                    "type": "string"
                }
                ,
                "allowedPasswordResetTokenUseCondition": {
                    "description": "The set of conditions under which a user governed by this Password Policy will be permitted to generate a password reset token via the deliver password reset token extended operation, and to use that token in lieu of the current password via the password modify extended operation.",
                    "type": "array",
                    "items": {
                        "type": "string"
                        , "enum": [
                            "account-usable"
                            ,
                            "password-expired"
                            ,
                            "account-locked-due-to-failures"
                            ,
                            "account-locked-due-to-idle-time-limit"
                            ,
                            "account-locked-due-to-admin-reset-timeout"
                            ,
                            "account-locked-due-to-validation-failure"
                        ]
                    }
                }
                ,
                "maximumRecentLoginHistoryFailedAuthenticationDuration": {
                    "description": "The maximum age of failed authentication attempts to include in the recent login history for each account.",
                    "type": "string"
                }
                ,
                "bindPasswordValidationFailureAction": {
                    "description": "Specifies the behavior that the server should exhibit if a bind password fails validation by one or more of the configured bind password validators.",
                    "type": "string"
                    , "enum": [
                        "reject-bind"
                        ,
                        "force-password-change"
                        ,
                        "generate-account-status-notification"
                    ]
                }
                ,
                "passwordHistoryCount": {
                    "description": "Specifies the maximum number of former passwords to maintain in the password history.",
                    "type": "integer"
                }
                ,
                "lockoutDuration": {
                    "description": "Specifies the length of time that an account is locked after too many authentication failures.",
                    "type": "string"
                }
                ,
                "allowUserPasswordChanges": {
                    "description": "Indicates whether users can change their own passwords.",
                    "type": "boolean"
                }
                ,
                "passwordValidator": {
                    "description": "Specifies the names of the password validators that are used with the associated password storage scheme.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
                ,
                "passwordRetirementBehavior": {
                    "description": "Specifies the conditions under which the server may retire a user's current password in the course of setting a new password for that user (whether via a modify operation or a password modify extended operation).",
                    "type": "array",
                    "items": {
                        "type": "string"
                        , "enum": [
                            "retire-on-self-change"
                            ,
                            "retire-on-administrative-reset"
                            ,
                            "retire-on-request-with-control"
                        ]
                    }
                }
            }
        },
        "password-policy-response": {
            "id": "password-policy-response",
            "description": "A Password Policy resource response",
            "required": [
                "id"
            ],
            "properties": {
                "schemas": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "enum": [
                            "urn:pingidentity:schemas:configuration:2.0:password-policy"
                        ]
                    }
                },
                "id": {
                    "type": "string",
                    "description": "Name of the Password Policy"
                },
                "meta": {
                    "$ref": "Meta"
                },
                "urn:pingidentity:schemas:configuration:messages:2.0": {
                    "$ref": "Messages"
                },
                "previousLastLoginTimeFormat": {
                    "description": "Specifies the format string(s) that might have been used with the last login time at any point in the past for users associated with the password policy.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
                ,
                "recentLoginHistorySimilarAttemptBehavior": {
                    "description": "The behavior that the server will exhibit when multiple similar authentication attempts (with the same values for the successful, authentication-method, client-ip-address, and failure-reason fields) are processed for an account.",
                    "type": "string"
                    , "enum": [
                        "collapse-similar-attempts-on-the-same-date"
                        ,
                        "maintain-every-attempt"
                        ,
                        "update-at-most-once-per-day"
                    ]
                }
                ,
                "maxPasswordAge": {
                    "description": "Specifies the maximum length of time that a user can continue using the same password before it must be changed (that is, the password expiration interval).",
                    "type": "string"
                }
                ,
                "requireChangeByTime": {
                    "description": "Specifies the time by which all users with the associated password policy must change their passwords.",
                    "type": "string"
                }
                ,
                "requireSecurePasswordChanges": {
                    "description": "Indicates whether users with the associated password policy are required to change their password in a secure manner that does not expose the credentials.",
                    "type": "boolean"
                }
                ,
                "accountStatusNotificationHandler": {
                    "description": "Specifies the names of the account status notification handlers that are used with the associated password storage scheme.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
                ,
                "passwordHistoryDuration": {
                    "description": "Specifies the maximum length of time that passwords remain in the password history.",
                    "type": "string"
                }
                ,
                "deprecatedPasswordStorageScheme": {
                    "description": "Specifies the names of the password storage schemes that are considered deprecated for this password policy.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
                ,
                "lockoutFailureCount": {
                    "description": "Specifies the maximum number of authentication failures that a user is allowed before the account is locked out.",
                    "type": "integer"
                }
                ,
                "failureLockoutAction": {
                    "description": "The action that the server should take for authentication attempts that target a user with more than the configured number of outstanding authentication failures.",
                    "type": "string"
                }
                ,
                "requireSecureAuthentication": {
                    "description": "Indicates whether users with the associated password policy are required to authenticate in a secure manner.",
                    "type": "boolean"
                }
                ,
                "defaultPasswordStorageScheme": {
                    "description": "Specifies the names of the password storage schemes that are used to encode clear-text passwords for this password policy.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
                ,
                "maxPasswordResetAge": {
                    "description": "Specifies the maximum length of time that users have to change passwords after they have been reset by an administrator before they become locked.",
                    "type": "string"
                }
                ,
                "forceChangeOnReset": {
                    "description": "Indicates whether users are forced to change their passwords if they are reset by an administrator. If a user's password is changed by any other user, that is considered an administrative password reset.",
                    "type": "boolean"
                }
                ,
                "minPasswordAge": {
                    "description": "Specifies the minimum length of time after a password change before the user is allowed to change the password again.",
                    "type": "string"
                }
                ,
                "minimumBindPasswordValidationFrequency": {
                    "description": "Indicates how frequently password validation should be performed during bind operations for each user to whom this password policy is assigned.",
                    "type": "string"
                }
                ,
                "skipValidationForAdministrators": {
                    "description": "Indicates whether passwords set by administrators are allowed to bypass the password validation process that is required for user password changes.",
                    "type": "boolean"
                }
                ,
                "forceChangeOnAdd": {
                    "description": "Indicates whether users are forced to change their passwords upon first authenticating to the Directory Server after their account has been created.",
                    "type": "boolean"
                }
                ,
                "maximumRecentLoginHistoryFailedAuthenticationCount": {
                    "description": "The maximum number of failed authentication attempts to include in the recent login history for each account.",
                    "type": "integer"
                }
                ,
                "ignoreDuplicatePasswordFailures": {
                    "description": "Indicates whether to ignore subsequent authentication failures using the same password as an earlier failed authentication attempt (within the time frame defined by the lockout failure expiration interval). If this option is "true", then multiple failed attempts using the same password will be considered only a single failure. If this option is "false", then any failure will be tracked regardless of whether it used the same password as an earlier attempt.",
                    "type": "boolean"
                }
                ,
                "lastLoginTimeFormat": {
                    "description": "Specifies the format string that is used to generate the last login time value for users with the associated password policy. Last login time values will be written using the UTC (also known as GMT, or Greenwich Mean Time) time zone.",
                    "type": "string"
                }
                ,
                "passwordGenerator": {
                    "description": "Specifies the name of the password generator that is used with the associated password policy.",
                    "type": "string"
                }
                ,
                "expirePasswordsWithoutWarning": {
                    "description": "Indicates whether the Directory Server allows a user's password to expire even if that user has never seen an expiration warning notification.",
                    "type": "boolean"
                }
                ,
                "passwordAttribute": {
                    "description": "Specifies the attribute type used to hold user passwords.",
                    "type": "string"
                }
                ,
                "passwordChangeRequiresCurrentPassword": {
                    "description": "Indicates whether user password changes must use the password modify extended operation and must include the user's current password before the change is allowed.",
                    "type": "boolean"
                }
                ,
                "lastLoginTimeAttribute": {
                    "description": "Specifies the name or OID of the attribute type that is used to hold the last login time for users with the associated password policy.",
                    "type": "string"
                }
                ,
                "lastLoginIPAddressAttribute": {
                    "description": "Specifies the name or OID of the attribute type that is used to hold the IP address of the client from which the user last authenticated.",
                    "type": "string"
                }
                ,
                "enableDebug": {
                    "description": "Indicates whether to enable debugging for the password policy state.",
                    "type": "boolean"
                }
                ,
                "returnPasswordExpirationControls": {
                    "description": "Indicates whether the server should return the password expiring and password expired response controls (as described in draft-vchu-ldap-pwd-policy).",
                    "type": "string"
                    , "enum": [
                        "unless-password-policy-control-is-used"
                        ,
                        "always"
                        ,
                        "never"
                    ]
                }
                ,
                "passwordExpirationWarningInterval": {
                    "description": "Specifies the maximum length of time before a user's password actually expires that the server begins to include warning notifications in bind responses for that user.",
                    "type": "string"
                }
                ,
                "graceLoginCount": {
                    "description": "Specifies the number of grace logins that a user is allowed after the account has expired to allow that user to choose a new password.",
                    "type": "integer"
                }
                ,
                "description": {
                    "description": "A description for this Password Policy",
                    "type": "string"
                }
                ,
                "bindPasswordValidator": {
                    "description": "Specifies the names of the password validators that should be invoked for bind operations.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
                ,
                "maximumRecentLoginHistorySuccessfulAuthenticationDuration": {
                    "description": "The maximum age of successful authentication attempts to include in the recent login history for each account.",
                    "type": "string"
                }
                ,
                "idleLockoutInterval": {
                    "description": "Specifies the maximum length of time that an account may remain idle (that is, the associated user does not authenticate to the server) before that user is locked out.",
                    "type": "string"
                }
                ,
                "lockoutFailureExpirationInterval": {
                    "description": "Specifies the length of time before an authentication failure is no longer counted against a user for the purposes of account lockout.",
                    "type": "string"
                }
                ,
                "allowPreEncodedPasswords": {
                    "description": "Indicates whether users can change their passwords by providing a pre-encoded value.",
                    "type": "boolean"
                }
                ,
                "stateUpdateFailurePolicy": {
                    "description": "Specifies how the server deals with the inability to update password policy state information during an authentication attempt.",
                    "type": "string"
                    , "enum": [
                        "ignore"
                        ,
                        "reactive"
                        ,
                        "proactive"
                    ]
                }
                ,
                "allowMultiplePasswordValues": {
                    "description": "Indicates whether user entries can have multiple distinct values for the password attribute.",
                    "type": "boolean"
                }
                ,
                "allowExpiredPasswordChanges": {
                    "description": "Indicates whether a user whose password is expired is still allowed to change that password using the password modify extended operation.",
                    "type": "boolean"
                }
                ,
                "maximumRecentLoginHistorySuccessfulAuthenticationCount": {
                    "description": "The maximum number of successful authentication attempts to include in the recent login history for each account.",
                    "type": "integer"
                }
                ,
                "maxRetiredPasswordAge": {
                    "description": "Specifies the maximum length of time that a retired password should be considered valid and may be used to authenticate to the server.",
                    "type": "string"
                }
                ,
                "allowedPasswordResetTokenUseCondition": {
                    "description": "The set of conditions under which a user governed by this Password Policy will be permitted to generate a password reset token via the deliver password reset token extended operation, and to use that token in lieu of the current password via the password modify extended operation.",
                    "type": "array",
                    "items": {
                        "type": "string"
                        , "enum": [
                            "account-usable"
                            ,
                            "password-expired"
                            ,
                            "account-locked-due-to-failures"
                            ,
                            "account-locked-due-to-idle-time-limit"
                            ,
                            "account-locked-due-to-admin-reset-timeout"
                            ,
                            "account-locked-due-to-validation-failure"
                        ]
                    }
                }
                ,
                "maximumRecentLoginHistoryFailedAuthenticationDuration": {
                    "description": "The maximum age of failed authentication attempts to include in the recent login history for each account.",
                    "type": "string"
                }
                ,
                "bindPasswordValidationFailureAction": {
                    "description": "Specifies the behavior that the server should exhibit if a bind password fails validation by one or more of the configured bind password validators.",
                    "type": "string"
                    , "enum": [
                        "reject-bind"
                        ,
                        "force-password-change"
                        ,
                        "generate-account-status-notification"
                    ]
                }
                ,
                "passwordHistoryCount": {
                    "description": "Specifies the maximum number of former passwords to maintain in the password history.",
                    "type": "integer"
                }
                ,
                "lockoutDuration": {
                    "description": "Specifies the length of time that an account is locked after too many authentication failures.",
                    "type": "string"
                }
                ,
                "allowUserPasswordChanges": {
                    "description": "Indicates whether users can change their own passwords.",
                    "type": "boolean"
                }
                ,
                "passwordValidator": {
                    "description": "Specifies the names of the password validators that are used with the associated password storage scheme.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
                ,
                "passwordRetirementBehavior": {
                    "description": "Specifies the conditions under which the server may retire a user's current password in the course of setting a new password for that user (whether via a modify operation or a password modify extended operation).",
                    "type": "array",
                    "items": {
                        "type": "string"
                        , "enum": [
                            "retire-on-self-change"
                            ,
                            "retire-on-administrative-reset"
                            ,
                            "retire-on-request-with-control"
                        ]
                    }
                }
            }
        },
        "password-policy-properties": {
            "id": "password-policy-properties",
            "description": "Password Policy properties",
            "properties": {
                "schemas": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "enum": [
                            "urn:pingidentity:schemas:configuration:2.0:password-policy"
                        ]
                    }
                },
                "previousLastLoginTimeFormat": {
                    "description": "Specifies the format string(s) that might have been used with the last login time at any point in the past for users associated with the password policy.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
                ,
                "recentLoginHistorySimilarAttemptBehavior": {
                    "description": "The behavior that the server will exhibit when multiple similar authentication attempts (with the same values for the successful, authentication-method, client-ip-address, and failure-reason fields) are processed for an account.",
                    "type": "string"
                    , "enum": [
                        "collapse-similar-attempts-on-the-same-date"
                        ,
                        "maintain-every-attempt"
                        ,
                        "update-at-most-once-per-day"
                    ]
                }
                ,
                "maxPasswordAge": {
                    "description": "Specifies the maximum length of time that a user can continue using the same password before it must be changed (that is, the password expiration interval).",
                    "type": "string"
                }
                ,
                "requireChangeByTime": {
                    "description": "Specifies the time by which all users with the associated password policy must change their passwords.",
                    "type": "string"
                }
                ,
                "requireSecurePasswordChanges": {
                    "description": "Indicates whether users with the associated password policy are required to change their password in a secure manner that does not expose the credentials.",
                    "type": "boolean"
                }
                ,
                "accountStatusNotificationHandler": {
                    "description": "Specifies the names of the account status notification handlers that are used with the associated password storage scheme.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
                ,
                "passwordHistoryDuration": {
                    "description": "Specifies the maximum length of time that passwords remain in the password history.",
                    "type": "string"
                }
                ,
                "deprecatedPasswordStorageScheme": {
                    "description": "Specifies the names of the password storage schemes that are considered deprecated for this password policy.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
                ,
                "lockoutFailureCount": {
                    "description": "Specifies the maximum number of authentication failures that a user is allowed before the account is locked out.",
                    "type": "integer"
                }
                ,
                "failureLockoutAction": {
                    "description": "The action that the server should take for authentication attempts that target a user with more than the configured number of outstanding authentication failures.",
                    "type": "string"
                }
                ,
                "requireSecureAuthentication": {
                    "description": "Indicates whether users with the associated password policy are required to authenticate in a secure manner.",
                    "type": "boolean"
                }
                ,
                "defaultPasswordStorageScheme": {
                    "description": "Specifies the names of the password storage schemes that are used to encode clear-text passwords for this password policy.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
                ,
                "maxPasswordResetAge": {
                    "description": "Specifies the maximum length of time that users have to change passwords after they have been reset by an administrator before they become locked.",
                    "type": "string"
                }
                ,
                "forceChangeOnReset": {
                    "description": "Indicates whether users are forced to change their passwords if they are reset by an administrator. If a user's password is changed by any other user, that is considered an administrative password reset.",
                    "type": "boolean"
                }
                ,
                "minPasswordAge": {
                    "description": "Specifies the minimum length of time after a password change before the user is allowed to change the password again.",
                    "type": "string"
                }
                ,
                "minimumBindPasswordValidationFrequency": {
                    "description": "Indicates how frequently password validation should be performed during bind operations for each user to whom this password policy is assigned.",
                    "type": "string"
                }
                ,
                "skipValidationForAdministrators": {
                    "description": "Indicates whether passwords set by administrators are allowed to bypass the password validation process that is required for user password changes.",
                    "type": "boolean"
                }
                ,
                "forceChangeOnAdd": {
                    "description": "Indicates whether users are forced to change their passwords upon first authenticating to the Directory Server after their account has been created.",
                    "type": "boolean"
                }
                ,
                "maximumRecentLoginHistoryFailedAuthenticationCount": {
                    "description": "The maximum number of failed authentication attempts to include in the recent login history for each account.",
                    "type": "integer"
                }
                ,
                "ignoreDuplicatePasswordFailures": {
                    "description": "Indicates whether to ignore subsequent authentication failures using the same password as an earlier failed authentication attempt (within the time frame defined by the lockout failure expiration interval). If this option is "true", then multiple failed attempts using the same password will be considered only a single failure. If this option is "false", then any failure will be tracked regardless of whether it used the same password as an earlier attempt.",
                    "type": "boolean"
                }
                ,
                "lastLoginTimeFormat": {
                    "description": "Specifies the format string that is used to generate the last login time value for users with the associated password policy. Last login time values will be written using the UTC (also known as GMT, or Greenwich Mean Time) time zone.",
                    "type": "string"
                }
                ,
                "passwordGenerator": {
                    "description": "Specifies the name of the password generator that is used with the associated password policy.",
                    "type": "string"
                }
                ,
                "expirePasswordsWithoutWarning": {
                    "description": "Indicates whether the Directory Server allows a user's password to expire even if that user has never seen an expiration warning notification.",
                    "type": "boolean"
                }
                ,
                "passwordAttribute": {
                    "description": "Specifies the attribute type used to hold user passwords.",
                    "type": "string"
                }
                ,
                "passwordChangeRequiresCurrentPassword": {
                    "description": "Indicates whether user password changes must use the password modify extended operation and must include the user's current password before the change is allowed.",
                    "type": "boolean"
                }
                ,
                "lastLoginTimeAttribute": {
                    "description": "Specifies the name or OID of the attribute type that is used to hold the last login time for users with the associated password policy.",
                    "type": "string"
                }
                ,
                "lastLoginIPAddressAttribute": {
                    "description": "Specifies the name or OID of the attribute type that is used to hold the IP address of the client from which the user last authenticated.",
                    "type": "string"
                }
                ,
                "enableDebug": {
                    "description": "Indicates whether to enable debugging for the password policy state.",
                    "type": "boolean"
                }
                ,
                "returnPasswordExpirationControls": {
                    "description": "Indicates whether the server should return the password expiring and password expired response controls (as described in draft-vchu-ldap-pwd-policy).",
                    "type": "string"
                    , "enum": [
                        "unless-password-policy-control-is-used"
                        ,
                        "always"
                        ,
                        "never"
                    ]
                }
                ,
                "passwordExpirationWarningInterval": {
                    "description": "Specifies the maximum length of time before a user's password actually expires that the server begins to include warning notifications in bind responses for that user.",
                    "type": "string"
                }
                ,
                "graceLoginCount": {
                    "description": "Specifies the number of grace logins that a user is allowed after the account has expired to allow that user to choose a new password.",
                    "type": "integer"
                }
                ,
                "description": {
                    "description": "A description for this Password Policy",
                    "type": "string"
                }
                ,
                "bindPasswordValidator": {
                    "description": "Specifies the names of the password validators that should be invoked for bind operations.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
                ,
                "maximumRecentLoginHistorySuccessfulAuthenticationDuration": {
                    "description": "The maximum age of successful authentication attempts to include in the recent login history for each account.",
                    "type": "string"
                }
                ,
                "idleLockoutInterval": {
                    "description": "Specifies the maximum length of time that an account may remain idle (that is, the associated user does not authenticate to the server) before that user is locked out.",
                    "type": "string"
                }
                ,
                "lockoutFailureExpirationInterval": {
                    "description": "Specifies the length of time before an authentication failure is no longer counted against a user for the purposes of account lockout.",
                    "type": "string"
                }
                ,
                "allowPreEncodedPasswords": {
                    "description": "Indicates whether users can change their passwords by providing a pre-encoded value.",
                    "type": "boolean"
                }
                ,
                "stateUpdateFailurePolicy": {
                    "description": "Specifies how the server deals with the inability to update password policy state information during an authentication attempt.",
                    "type": "string"
                    , "enum": [
                        "ignore"
                        ,
                        "reactive"
                        ,
                        "proactive"
                    ]
                }
                ,
                "allowMultiplePasswordValues": {
                    "description": "Indicates whether user entries can have multiple distinct values for the password attribute.",
                    "type": "boolean"
                }
                ,
                "allowExpiredPasswordChanges": {
                    "description": "Indicates whether a user whose password is expired is still allowed to change that password using the password modify extended operation.",
                    "type": "boolean"
                }
                ,
                "maximumRecentLoginHistorySuccessfulAuthenticationCount": {
                    "description": "The maximum number of successful authentication attempts to include in the recent login history for each account.",
                    "type": "integer"
                }
                ,
                "maxRetiredPasswordAge": {
                    "description": "Specifies the maximum length of time that a retired password should be considered valid and may be used to authenticate to the server.",
                    "type": "string"
                }
                ,
                "allowedPasswordResetTokenUseCondition": {
                    "description": "The set of conditions under which a user governed by this Password Policy will be permitted to generate a password reset token via the deliver password reset token extended operation, and to use that token in lieu of the current password via the password modify extended operation.",
                    "type": "array",
                    "items": {
                        "type": "string"
                        , "enum": [
                            "account-usable"
                            ,
                            "password-expired"
                            ,
                            "account-locked-due-to-failures"
                            ,
                            "account-locked-due-to-idle-time-limit"
                            ,
                            "account-locked-due-to-admin-reset-timeout"
                            ,
                            "account-locked-due-to-validation-failure"
                        ]
                    }
                }
                ,
                "maximumRecentLoginHistoryFailedAuthenticationDuration": {
                    "description": "The maximum age of failed authentication attempts to include in the recent login history for each account.",
                    "type": "string"
                }
                ,
                "bindPasswordValidationFailureAction": {
                    "description": "Specifies the behavior that the server should exhibit if a bind password fails validation by one or more of the configured bind password validators.",
                    "type": "string"
                    , "enum": [
                        "reject-bind"
                        ,
                        "force-password-change"
                        ,
                        "generate-account-status-notification"
                    ]
                }
                ,
                "passwordHistoryCount": {
                    "description": "Specifies the maximum number of former passwords to maintain in the password history.",
                    "type": "integer"
                }
                ,
                "lockoutDuration": {
                    "description": "Specifies the length of time that an account is locked after too many authentication failures.",
                    "type": "string"
                }
                ,
                "allowUserPasswordChanges": {
                    "description": "Indicates whether users can change their own passwords.",
                    "type": "boolean"
                }
                ,
                "passwordValidator": {
                    "description": "Specifies the names of the password validators that are used with the associated password storage scheme.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
                ,
                "passwordRetirementBehavior": {
                    "description": "Specifies the conditions under which the server may retire a user's current password in the course of setting a new password for that user (whether via a modify operation or a password modify extended operation).",
                    "type": "array",
                    "items": {
                        "type": "string"
                        , "enum": [
                            "retire-on-self-change"
                            ,
                            "retire-on-administrative-reset"
                            ,
                            "retire-on-request-with-control"
                        ]
                    }
                }
            }
        }
    }
}
