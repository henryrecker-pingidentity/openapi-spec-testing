{
    "apiVersion": "9.2.0.0",
    "swaggerVersion": "1.2",
    "basePath": "https://localhost:1443/config",
    "authorizations": {
        "basic": {
            "type": "basicAuth"
        }
    },
    "apis": [
        {
            "path": "/backends",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Returns a list of all Backend objects",
                    "type": "backend-list-response",
                    "nickname": "list-backends",
                    "parameters": [
                        {
                            "paramType": "query",
                            "name": "filter",
                            "description": "SCIM filter",
                            "required": false,
                            "type": "string"
                        },
                        {
                            "paramType": "query",
                            "name": "sortBy",
                            "description": "Specifies a property value by which to sort",
                            "required": false,
                            "type": "string"
                        },
                        {
                            "paramType": "query",
                            "name": "sortOrder",
                            "description": "Specifies either ascending or descending alphabetical order",
                            "required": false,
                            "type": "string",
                            "enum": [
                                "ascending",
                                "descending"
                            ]
                        },
                        {
                            "paramType": "query",
                            "name": "startIndex",
                            "description": "1-based index of the first result to return",
                            "required": false,
                            "type": "string"
                        },
                        {
                            "paramType": "query",
                            "name": "count",
                            "description": "Indicates the number of results per page",
                            "required": false,
                            "type": "string"
                        },
                        {
                            "paramType": "query",
                            "name": "attributes",
                            "description": "Comma-separated list of attributes to include in the response",
                            "required": false,
                            "type": "string"
                        },
                        {
                            "paramType": "query",
                            "name": "excludeAttributes",
                            "description": "Comma-separated list of attributes to exclude from the response",
                            "required": false,
                            "type": "string"
                        }
                    ],
                    "responseMessages": [
                        {
                            "code": 200,
                            "message": "The requested operation succeeded"
                        },
                        {
                            "code": 204,
                            "message": "The requested operation succeeded and no further information has been provided, such as in the case of a DELETE operation."
                        },
                        {
                            "code": 400,
                            "message": "The request contents are incorrectly formatted or the request was made for an invalid API version."
                        },
                        {
                            "code": 401,
                            "message": "The requester cannot be authenticated"
                        },
                        {
                            "code": 403,
                            "message": "The requester does not have the required privileges or another constraint failed, such as attempting to delete an edit-only object."
                        },
                        {
                            "code": 404,
                            "message": "The requested path does not refer to an existing object or object relation."
                        },
                        {
                            "code": 409,
                            "message": "The requested operation could not be performed due to the current state of the configuration. For example, an attempt was made to create an object that already exists or an attempt was made to delete an object that is referred to by another object."
                        },
                        {
                            "code": 415,
                            "message": "The request is such that the Accept header does not indicate that JSON is an acceptable format for a response."
                        },
                        {
                            "code": 500,
                            "message": "The server encountered an unexpected error."
                        }
                    ]
                },
                {
                    "method": "POST",
                    "summary": "Add a new Backend to the config",
                    "nickname": "add-backend",
                    "type": "backend-response",
                    "parameters": [
                        {
                            "paramType": "body",
                            "required": true,
                            "description": "Backend to add",
                            "name": "add-backend-request",
                            "type": "add-backend-request"
                        },
                        {
                            "paramType": "query",
                            "name": "attributes",
                            "description": "Comma-separated list of attributes to include in the response",
                            "required": false,
                            "type": "string"
                        },
                        {
                            "paramType": "query",
                            "name": "excludeAttributes",
                            "description": "Comma-separated list of attributes to exclude from the response",
                            "required": false,
                            "type": "string"
                        },
                        {
                            "paramType": "query",
                            "name": "applyChangeTo",
                            "description": "Specify whether to apply this configuration change to a single server or the whole server group. This does not apply to mirrored subtree objects",
                            "required": false,
                            "type": "string",
                            "enum": [
                                "singleServer",
                                "serverGroup"
                            ]
                        }
                    ],
                    "responseMessages": [
                        {
                            "code": 200,
                            "message": "The requested operation succeeded"
                        },
                        {
                            "code": 204,
                            "message": "The requested operation succeeded and no further information has been provided, such as in the case of a DELETE operation."
                        },
                        {
                            "code": 400,
                            "message": "The request contents are incorrectly formatted or the request was made for an invalid API version."
                        },
                        {
                            "code": 401,
                            "message": "The requester cannot be authenticated"
                        },
                        {
                            "code": 403,
                            "message": "The requester does not have the required privileges or another constraint failed, such as attempting to delete an edit-only object."
                        },
                        {
                            "code": 404,
                            "message": "The requested path does not refer to an existing object or object relation."
                        },
                        {
                            "code": 409,
                            "message": "The requested operation could not be performed due to the current state of the configuration. For example, an attempt was made to create an object that already exists or an attempt was made to delete an object that is referred to by another object."
                        },
                        {
                            "code": 415,
                            "message": "The request is such that the Accept header does not indicate that JSON is an acceptable format for a response."
                        },
                        {
                            "code": 500,
                            "message": "The server encountered an unexpected error."
                        }
                    ]
                }
            ]
        },
        {
            "path": "/backends/{backend-name}",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Returns a single Backend",
                    "type": "backend-response",
                    "nickname": "get-backend",
                    "parameters": [
                        {
                            "paramType": "query",
                            "name": "attributes",
                            "description": "Comma-separated list of attributes to include in the response",
                            "required": false,
                            "type": "string"
                        },
                        {
                            "paramType": "query",
                            "name": "excludeAttributes",
                            "description": "Comma-separated list of attributes to exclude from the response",
                            "required": false,
                            "type": "string"
                        },
                        {
                          "name": "backend-name",
                          "description": "Name of the Backend",
                          "required": true,
                          "type": "string",
                          "paramType": "path"
                        }
                    ],
                    "responseMessages": [
                        {
                            "code": 200,
                            "message": "The requested operation succeeded"
                        },
                        {
                            "code": 204,
                            "message": "The requested operation succeeded and no further information has been provided, such as in the case of a DELETE operation."
                        },
                        {
                            "code": 400,
                            "message": "The request contents are incorrectly formatted or the request was made for an invalid API version."
                        },
                        {
                            "code": 401,
                            "message": "The requester cannot be authenticated"
                        },
                        {
                            "code": 403,
                            "message": "The requester does not have the required privileges or another constraint failed, such as attempting to delete an edit-only object."
                        },
                        {
                            "code": 404,
                            "message": "The requested path does not refer to an existing object or object relation."
                        },
                        {
                            "code": 409,
                            "message": "The requested operation could not be performed due to the current state of the configuration. For example, an attempt was made to create an object that already exists or an attempt was made to delete an object that is referred to by another object."
                        },
                        {
                            "code": 415,
                            "message": "The request is such that the Accept header does not indicate that JSON is an acceptable format for a response."
                        },
                        {
                            "code": 500,
                            "message": "The server encountered an unexpected error."
                        }
                    ]
                },
                {
                    "method": "PUT",
                    "summary": "Update an existing Backend by name, replacing any attributes specified in the request body",
                    "type": "backend-response",
                    "nickname": "put-backend",
                    "parameters": [
                        {
                            "paramType": "query",
                            "name": "attributes",
                            "description": "Comma-separated list of attributes to include in the response",
                            "required": false,
                            "type": "string"
                        },
                        {
                            "paramType": "query",
                            "name": "excludeAttributes",
                            "description": "Comma-separated list of attributes to exclude from the response",
                            "required": false,
                            "type": "string"
                        },
                        {
                            "paramType": "query",
                            "name": "applyChangeTo",
                            "description": "Specify whether to apply this configuration change to a single server or the whole server group. This does not apply to mirrored subtree objects",
                            "required": false,
                            "type": "string",
                            "enum": [
                                "singleServer",
                                "serverGroup"
                            ]
                        },
                        {
                          "name": "backend-name",
                          "description": "Name of the Backend",
                          "required": true,
                          "type": "string",
                          "paramType": "path"
                        },
                        {
                            "paramType": "body",
                            "required": true,
                            "description": "Backend attributes to update",
                            "name": "backend-properties",
                            "type": "backend-properties"
                        }
                    ],
                    "responseMessages": [
                        {
                            "code": 200,
                            "message": "The requested operation succeeded"
                        },
                        {
                            "code": 204,
                            "message": "The requested operation succeeded and no further information has been provided, such as in the case of a DELETE operation."
                        },
                        {
                            "code": 400,
                            "message": "The request contents are incorrectly formatted or the request was made for an invalid API version."
                        },
                        {
                            "code": 401,
                            "message": "The requester cannot be authenticated"
                        },
                        {
                            "code": 403,
                            "message": "The requester does not have the required privileges or another constraint failed, such as attempting to delete an edit-only object."
                        },
                        {
                            "code": 404,
                            "message": "The requested path does not refer to an existing object or object relation."
                        },
                        {
                            "code": 409,
                            "message": "The requested operation could not be performed due to the current state of the configuration. For example, an attempt was made to create an object that already exists or an attempt was made to delete an object that is referred to by another object."
                        },
                        {
                            "code": 415,
                            "message": "The request is such that the Accept header does not indicate that JSON is an acceptable format for a response."
                        },
                        {
                            "code": 500,
                            "message": "The server encountered an unexpected error."
                        }
                    ]
                },
                {
                    "method": "PATCH",
                    "summary": "Update an existing Backend by name, using a SCIM patch request",
                    "type": "backend-response",
                    "nickname": "patch-backend",
                    "parameters": [
                        {
                            "paramType": "query",
                            "name": "attributes",
                            "description": "Comma-separated list of attributes to include in the response",
                            "required": false,
                            "type": "string"
                        },
                        {
                            "paramType": "query",
                            "name": "excludeAttributes",
                            "description": "Comma-separated list of attributes to exclude from the response",
                            "required": false,
                            "type": "string"
                        },
                        {
                            "paramType": "query",
                            "name": "applyChangeTo",
                            "description": "Specify whether to apply this configuration change to a single server or the whole server group. This does not apply to mirrored subtree objects",
                            "required": false,
                            "type": "string",
                            "enum": [
                                "singleServer",
                                "serverGroup"
                            ]
                        },
                        {
                          "name": "backend-name",
                          "description": "Name of the Backend",
                          "required": true,
                          "type": "string",
                          "paramType": "path"
                        },
                        {
                            "paramType": "body",
                            "required": true,
                            "description": "SCIM operations to apply to the Backend",
                            "name": "Operations",
                            "type": "Operations"
                        }
                    ],
                    "responseMessages": [
                        {
                            "code": 200,
                            "message": "The requested operation succeeded"
                        },
                        {
                            "code": 204,
                            "message": "The requested operation succeeded and no further information has been provided, such as in the case of a DELETE operation."
                        },
                        {
                            "code": 400,
                            "message": "The request contents are incorrectly formatted or the request was made for an invalid API version."
                        },
                        {
                            "code": 401,
                            "message": "The requester cannot be authenticated"
                        },
                        {
                            "code": 403,
                            "message": "The requester does not have the required privileges or another constraint failed, such as attempting to delete an edit-only object."
                        },
                        {
                            "code": 404,
                            "message": "The requested path does not refer to an existing object or object relation."
                        },
                        {
                            "code": 409,
                            "message": "The requested operation could not be performed due to the current state of the configuration. For example, an attempt was made to create an object that already exists or an attempt was made to delete an object that is referred to by another object."
                        },
                        {
                            "code": 415,
                            "message": "The request is such that the Accept header does not indicate that JSON is an acceptable format for a response."
                        },
                        {
                            "code": 500,
                            "message": "The server encountered an unexpected error."
                        }
                    ]
                },
                {
                    "method": "DELETE",
                    "summary": "Delete a Backend",
                    "nickname": "delete-backend",
                    "parameters": [
                        {
                          "name": "backend-name",
                          "description": "Name of the Backend",
                          "required": true,
                          "type": "string",
                          "paramType": "path"
                        }
                    ],
                    "responseMessages": [
                        {
                            "code": 200,
                            "message": "The requested operation succeeded"
                        },
                        {
                            "code": 204,
                            "message": "The requested operation succeeded and no further information has been provided, such as in the case of a DELETE operation."
                        },
                        {
                            "code": 400,
                            "message": "The request contents are incorrectly formatted or the request was made for an invalid API version."
                        },
                        {
                            "code": 401,
                            "message": "The requester cannot be authenticated"
                        },
                        {
                            "code": 403,
                            "message": "The requester does not have the required privileges or another constraint failed, such as attempting to delete an edit-only object."
                        },
                        {
                            "code": 404,
                            "message": "The requested path does not refer to an existing object or object relation."
                        },
                        {
                            "code": 409,
                            "message": "The requested operation could not be performed due to the current state of the configuration. For example, an attempt was made to create an object that already exists or an attempt was made to delete an object that is referred to by another object."
                        },
                        {
                            "code": 415,
                            "message": "The request is such that the Accept header does not indicate that JSON is an acceptable format for a response."
                        },
                        {
                            "code": 500,
                            "message": "The server encountered an unexpected error."
                        }
                    ]
                }
            ]
        }

        ,
        {
            "path": "/backends/{backend-name}/local-db-composite-indexes",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Returns a list of all Local DB Composite Index objects",
                    "type": "local-db-composite-index-list-response",
                    "nickname": "list-local-db-composite-indexes",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "backend-name",
                            "required": true,
                            "type": "string"
                        },
                        {
                            "paramType": "query",
                            "name": "filter",
                            "description": "SCIM filter",
                            "required": false,
                            "type": "string"
                        },
                        {
                            "paramType": "query",
                            "name": "sortBy",
                            "description": "Specifies a property value by which to sort",
                            "required": false,
                            "type": "string"
                        },
                        {
                            "paramType": "query",
                            "name": "sortOrder",
                            "description": "Specifies either ascending or descending alphabetical order",
                            "required": false,
                            "type": "string",
                            "enum": [
                                "ascending",
                                "descending"
                            ]
                        },
                        {
                            "paramType": "query",
                            "name": "startIndex",
                            "description": "1-based index of the first result to return",
                            "required": false,
                            "type": "string"
                        },
                        {
                            "paramType": "query",
                            "name": "count",
                            "description": "Indicates the number of results per page",
                            "required": false,
                            "type": "string"
                        },
                        {
                            "paramType": "query",
                            "name": "attributes",
                            "description": "Comma-separated list of attributes to include in the response",
                            "required": false,
                            "type": "string"
                        },
                        {
                            "paramType": "query",
                            "name": "excludeAttributes",
                            "description": "Comma-separated list of attributes to exclude from the response",
                            "required": false,
                            "type": "string"
                        }
                    ],
                    "responseMessages": [
                        {
                            "code": 200,
                            "message": "The requested operation succeeded"
                        },
                        {
                            "code": 204,
                            "message": "The requested operation succeeded and no further information has been provided, such as in the case of a DELETE operation."
                        },
                        {
                            "code": 400,
                            "message": "The request contents are incorrectly formatted or the request was made for an invalid API version."
                        },
                        {
                            "code": 401,
                            "message": "The requester cannot be authenticated"
                        },
                        {
                            "code": 403,
                            "message": "The requester does not have the required privileges or another constraint failed, such as attempting to delete an edit-only object."
                        },
                        {
                            "code": 404,
                            "message": "The requested path does not refer to an existing object or object relation."
                        },
                        {
                            "code": 409,
                            "message": "The requested operation could not be performed due to the current state of the configuration. For example, an attempt was made to create an object that already exists or an attempt was made to delete an object that is referred to by another object."
                        },
                        {
                            "code": 415,
                            "message": "The request is such that the Accept header does not indicate that JSON is an acceptable format for a response."
                        },
                        {
                            "code": 500,
                            "message": "The server encountered an unexpected error."
                        }
                    ]
                },
                {
                    "method": "POST",
                    "summary": "Add a new Local DB Composite Index to the config",
                    "nickname": "add-local-db-composite-index",
                    "type": "local-db-composite-index-response",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "backend-name",
                            "required": true,
                            "type": "string"
                        },
                        {
                            "paramType": "body",
                            "required": true,
                            "description": "Local DB Composite Index to add",
                            "name": "add-local-db-composite-index-request",
                            "type": "add-local-db-composite-index-request"
                        },
                        {
                            "paramType": "query",
                            "name": "attributes",
                            "description": "Comma-separated list of attributes to include in the response",
                            "required": false,
                            "type": "string"
                        },
                        {
                            "paramType": "query",
                            "name": "excludeAttributes",
                            "description": "Comma-separated list of attributes to exclude from the response",
                            "required": false,
                            "type": "string"
                        },
                        {
                            "paramType": "query",
                            "name": "applyChangeTo",
                            "description": "Specify whether to apply this configuration change to a single server or the whole server group. This does not apply to mirrored subtree objects",
                            "required": false,
                            "type": "string",
                            "enum": [
                                "singleServer",
                                "serverGroup"
                            ]
                        }
                    ],
                    "responseMessages": [
                        {
                            "code": 200,
                            "message": "The requested operation succeeded"
                        },
                        {
                            "code": 204,
                            "message": "The requested operation succeeded and no further information has been provided, such as in the case of a DELETE operation."
                        },
                        {
                            "code": 400,
                            "message": "The request contents are incorrectly formatted or the request was made for an invalid API version."
                        },
                        {
                            "code": 401,
                            "message": "The requester cannot be authenticated"
                        },
                        {
                            "code": 403,
                            "message": "The requester does not have the required privileges or another constraint failed, such as attempting to delete an edit-only object."
                        },
                        {
                            "code": 404,
                            "message": "The requested path does not refer to an existing object or object relation."
                        },
                        {
                            "code": 409,
                            "message": "The requested operation could not be performed due to the current state of the configuration. For example, an attempt was made to create an object that already exists or an attempt was made to delete an object that is referred to by another object."
                        },
                        {
                            "code": 415,
                            "message": "The request is such that the Accept header does not indicate that JSON is an acceptable format for a response."
                        },
                        {
                            "code": 500,
                            "message": "The server encountered an unexpected error."
                        }
                    ]
                }
            ]
        },
        {
            "path": "/backends/{backend-name}/local-db-composite-indexes/{local-db-composite-index-name}",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Returns a single Local DB Composite Index",
                    "type": "local-db-composite-index-response",
                    "nickname": "get-local-db-composite-index",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "backend-name",
                            "required": true,
                            "type": "string"
                        },
                        {
                            "paramType": "query",
                            "name": "attributes",
                            "description": "Comma-separated list of attributes to include in the response",
                            "required": false,
                            "type": "string"
                        },
                        {
                            "paramType": "query",
                            "name": "excludeAttributes",
                            "description": "Comma-separated list of attributes to exclude from the response",
                            "required": false,
                            "type": "string"
                        },
                        {
                          "name": "local-db-composite-index-name",
                          "description": "Name of the Local DB Composite Index",
                          "required": true,
                          "type": "string",
                          "paramType": "path"
                        }
                    ],
                    "responseMessages": [
                        {
                            "code": 200,
                            "message": "The requested operation succeeded"
                        },
                        {
                            "code": 204,
                            "message": "The requested operation succeeded and no further information has been provided, such as in the case of a DELETE operation."
                        },
                        {
                            "code": 400,
                            "message": "The request contents are incorrectly formatted or the request was made for an invalid API version."
                        },
                        {
                            "code": 401,
                            "message": "The requester cannot be authenticated"
                        },
                        {
                            "code": 403,
                            "message": "The requester does not have the required privileges or another constraint failed, such as attempting to delete an edit-only object."
                        },
                        {
                            "code": 404,
                            "message": "The requested path does not refer to an existing object or object relation."
                        },
                        {
                            "code": 409,
                            "message": "The requested operation could not be performed due to the current state of the configuration. For example, an attempt was made to create an object that already exists or an attempt was made to delete an object that is referred to by another object."
                        },
                        {
                            "code": 415,
                            "message": "The request is such that the Accept header does not indicate that JSON is an acceptable format for a response."
                        },
                        {
                            "code": 500,
                            "message": "The server encountered an unexpected error."
                        }
                    ]
                },
                {
                    "method": "PUT",
                    "summary": "Update an existing Local DB Composite Index by name, replacing any attributes specified in the request body",
                    "type": "local-db-composite-index-response",
                    "nickname": "put-local-db-composite-index",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "backend-name",
                            "required": true,
                            "type": "string"
                        },
                        {
                            "paramType": "query",
                            "name": "attributes",
                            "description": "Comma-separated list of attributes to include in the response",
                            "required": false,
                            "type": "string"
                        },
                        {
                            "paramType": "query",
                            "name": "excludeAttributes",
                            "description": "Comma-separated list of attributes to exclude from the response",
                            "required": false,
                            "type": "string"
                        },
                        {
                            "paramType": "query",
                            "name": "applyChangeTo",
                            "description": "Specify whether to apply this configuration change to a single server or the whole server group. This does not apply to mirrored subtree objects",
                            "required": false,
                            "type": "string",
                            "enum": [
                                "singleServer",
                                "serverGroup"
                            ]
                        },
                        {
                          "name": "local-db-composite-index-name",
                          "description": "Name of the Local DB Composite Index",
                          "required": true,
                          "type": "string",
                          "paramType": "path"
                        },
                        {
                            "paramType": "body",
                            "required": true,
                            "description": "Local DB Composite Index attributes to update",
                            "name": "local-db-composite-index-properties",
                            "type": "local-db-composite-index-properties"
                        }
                    ],
                    "responseMessages": [
                        {
                            "code": 200,
                            "message": "The requested operation succeeded"
                        },
                        {
                            "code": 204,
                            "message": "The requested operation succeeded and no further information has been provided, such as in the case of a DELETE operation."
                        },
                        {
                            "code": 400,
                            "message": "The request contents are incorrectly formatted or the request was made for an invalid API version."
                        },
                        {
                            "code": 401,
                            "message": "The requester cannot be authenticated"
                        },
                        {
                            "code": 403,
                            "message": "The requester does not have the required privileges or another constraint failed, such as attempting to delete an edit-only object."
                        },
                        {
                            "code": 404,
                            "message": "The requested path does not refer to an existing object or object relation."
                        },
                        {
                            "code": 409,
                            "message": "The requested operation could not be performed due to the current state of the configuration. For example, an attempt was made to create an object that already exists or an attempt was made to delete an object that is referred to by another object."
                        },
                        {
                            "code": 415,
                            "message": "The request is such that the Accept header does not indicate that JSON is an acceptable format for a response."
                        },
                        {
                            "code": 500,
                            "message": "The server encountered an unexpected error."
                        }
                    ]
                },
                {
                    "method": "PATCH",
                    "summary": "Update an existing Local DB Composite Index by name, using a SCIM patch request",
                    "type": "local-db-composite-index-response",
                    "nickname": "patch-local-db-composite-index",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "backend-name",
                            "required": true,
                            "type": "string"
                        },
                        {
                            "paramType": "query",
                            "name": "attributes",
                            "description": "Comma-separated list of attributes to include in the response",
                            "required": false,
                            "type": "string"
                        },
                        {
                            "paramType": "query",
                            "name": "excludeAttributes",
                            "description": "Comma-separated list of attributes to exclude from the response",
                            "required": false,
                            "type": "string"
                        },
                        {
                            "paramType": "query",
                            "name": "applyChangeTo",
                            "description": "Specify whether to apply this configuration change to a single server or the whole server group. This does not apply to mirrored subtree objects",
                            "required": false,
                            "type": "string",
                            "enum": [
                                "singleServer",
                                "serverGroup"
                            ]
                        },
                        {
                          "name": "local-db-composite-index-name",
                          "description": "Name of the Local DB Composite Index",
                          "required": true,
                          "type": "string",
                          "paramType": "path"
                        },
                        {
                            "paramType": "body",
                            "required": true,
                            "description": "SCIM operations to apply to the Local DB Composite Index",
                            "name": "Operations",
                            "type": "Operations"
                        }
                    ],
                    "responseMessages": [
                        {
                            "code": 200,
                            "message": "The requested operation succeeded"
                        },
                        {
                            "code": 204,
                            "message": "The requested operation succeeded and no further information has been provided, such as in the case of a DELETE operation."
                        },
                        {
                            "code": 400,
                            "message": "The request contents are incorrectly formatted or the request was made for an invalid API version."
                        },
                        {
                            "code": 401,
                            "message": "The requester cannot be authenticated"
                        },
                        {
                            "code": 403,
                            "message": "The requester does not have the required privileges or another constraint failed, such as attempting to delete an edit-only object."
                        },
                        {
                            "code": 404,
                            "message": "The requested path does not refer to an existing object or object relation."
                        },
                        {
                            "code": 409,
                            "message": "The requested operation could not be performed due to the current state of the configuration. For example, an attempt was made to create an object that already exists or an attempt was made to delete an object that is referred to by another object."
                        },
                        {
                            "code": 415,
                            "message": "The request is such that the Accept header does not indicate that JSON is an acceptable format for a response."
                        },
                        {
                            "code": 500,
                            "message": "The server encountered an unexpected error."
                        }
                    ]
                },
                {
                    "method": "DELETE",
                    "summary": "Delete a Local DB Composite Index",
                    "nickname": "delete-local-db-composite-index",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "backend-name",
                            "required": true,
                            "type": "string"
                        },
                        {
                          "name": "local-db-composite-index-name",
                          "description": "Name of the Local DB Composite Index",
                          "required": true,
                          "type": "string",
                          "paramType": "path"
                        }
                    ],
                    "responseMessages": [
                        {
                            "code": 200,
                            "message": "The requested operation succeeded"
                        },
                        {
                            "code": 204,
                            "message": "The requested operation succeeded and no further information has been provided, such as in the case of a DELETE operation."
                        },
                        {
                            "code": 400,
                            "message": "The request contents are incorrectly formatted or the request was made for an invalid API version."
                        },
                        {
                            "code": 401,
                            "message": "The requester cannot be authenticated"
                        },
                        {
                            "code": 403,
                            "message": "The requester does not have the required privileges or another constraint failed, such as attempting to delete an edit-only object."
                        },
                        {
                            "code": 404,
                            "message": "The requested path does not refer to an existing object or object relation."
                        },
                        {
                            "code": 409,
                            "message": "The requested operation could not be performed due to the current state of the configuration. For example, an attempt was made to create an object that already exists or an attempt was made to delete an object that is referred to by another object."
                        },
                        {
                            "code": 415,
                            "message": "The request is such that the Accept header does not indicate that JSON is an acceptable format for a response."
                        },
                        {
                            "code": 500,
                            "message": "The server encountered an unexpected error."
                        }
                    ]
                }
            ]
        }

        ,
        {
            "path": "/backends/{backend-name}/local-db-vlv-indexes",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Returns a list of all Local DB VLV Index objects",
                    "type": "local-db-vlv-index-list-response",
                    "nickname": "list-local-db-vlv-indexes",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "backend-name",
                            "required": true,
                            "type": "string"
                        },
                        {
                            "paramType": "query",
                            "name": "filter",
                            "description": "SCIM filter",
                            "required": false,
                            "type": "string"
                        },
                        {
                            "paramType": "query",
                            "name": "sortBy",
                            "description": "Specifies a property value by which to sort",
                            "required": false,
                            "type": "string"
                        },
                        {
                            "paramType": "query",
                            "name": "sortOrder",
                            "description": "Specifies either ascending or descending alphabetical order",
                            "required": false,
                            "type": "string",
                            "enum": [
                                "ascending",
                                "descending"
                            ]
                        },
                        {
                            "paramType": "query",
                            "name": "startIndex",
                            "description": "1-based index of the first result to return",
                            "required": false,
                            "type": "string"
                        },
                        {
                            "paramType": "query",
                            "name": "count",
                            "description": "Indicates the number of results per page",
                            "required": false,
                            "type": "string"
                        },
                        {
                            "paramType": "query",
                            "name": "attributes",
                            "description": "Comma-separated list of attributes to include in the response",
                            "required": false,
                            "type": "string"
                        },
                        {
                            "paramType": "query",
                            "name": "excludeAttributes",
                            "description": "Comma-separated list of attributes to exclude from the response",
                            "required": false,
                            "type": "string"
                        }
                    ],
                    "responseMessages": [
                        {
                            "code": 200,
                            "message": "The requested operation succeeded"
                        },
                        {
                            "code": 204,
                            "message": "The requested operation succeeded and no further information has been provided, such as in the case of a DELETE operation."
                        },
                        {
                            "code": 400,
                            "message": "The request contents are incorrectly formatted or the request was made for an invalid API version."
                        },
                        {
                            "code": 401,
                            "message": "The requester cannot be authenticated"
                        },
                        {
                            "code": 403,
                            "message": "The requester does not have the required privileges or another constraint failed, such as attempting to delete an edit-only object."
                        },
                        {
                            "code": 404,
                            "message": "The requested path does not refer to an existing object or object relation."
                        },
                        {
                            "code": 409,
                            "message": "The requested operation could not be performed due to the current state of the configuration. For example, an attempt was made to create an object that already exists or an attempt was made to delete an object that is referred to by another object."
                        },
                        {
                            "code": 415,
                            "message": "The request is such that the Accept header does not indicate that JSON is an acceptable format for a response."
                        },
                        {
                            "code": 500,
                            "message": "The server encountered an unexpected error."
                        }
                    ]
                },
                {
                    "method": "POST",
                    "summary": "Add a new Local DB VLV Index to the config",
                    "nickname": "add-local-db-vlv-index",
                    "type": "local-db-vlv-index-response",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "backend-name",
                            "required": true,
                            "type": "string"
                        },
                        {
                            "paramType": "body",
                            "required": true,
                            "description": "Local DB VLV Index to add",
                            "name": "add-local-db-vlv-index-request",
                            "type": "add-local-db-vlv-index-request"
                        },
                        {
                            "paramType": "query",
                            "name": "attributes",
                            "description": "Comma-separated list of attributes to include in the response",
                            "required": false,
                            "type": "string"
                        },
                        {
                            "paramType": "query",
                            "name": "excludeAttributes",
                            "description": "Comma-separated list of attributes to exclude from the response",
                            "required": false,
                            "type": "string"
                        },
                        {
                            "paramType": "query",
                            "name": "applyChangeTo",
                            "description": "Specify whether to apply this configuration change to a single server or the whole server group. This does not apply to mirrored subtree objects",
                            "required": false,
                            "type": "string",
                            "enum": [
                                "singleServer",
                                "serverGroup"
                            ]
                        }
                    ],
                    "responseMessages": [
                        {
                            "code": 200,
                            "message": "The requested operation succeeded"
                        },
                        {
                            "code": 204,
                            "message": "The requested operation succeeded and no further information has been provided, such as in the case of a DELETE operation."
                        },
                        {
                            "code": 400,
                            "message": "The request contents are incorrectly formatted or the request was made for an invalid API version."
                        },
                        {
                            "code": 401,
                            "message": "The requester cannot be authenticated"
                        },
                        {
                            "code": 403,
                            "message": "The requester does not have the required privileges or another constraint failed, such as attempting to delete an edit-only object."
                        },
                        {
                            "code": 404,
                            "message": "The requested path does not refer to an existing object or object relation."
                        },
                        {
                            "code": 409,
                            "message": "The requested operation could not be performed due to the current state of the configuration. For example, an attempt was made to create an object that already exists or an attempt was made to delete an object that is referred to by another object."
                        },
                        {
                            "code": 415,
                            "message": "The request is such that the Accept header does not indicate that JSON is an acceptable format for a response."
                        },
                        {
                            "code": 500,
                            "message": "The server encountered an unexpected error."
                        }
                    ]
                }
            ]
        },
        {
            "path": "/backends/{backend-name}/local-db-vlv-indexes/{local-db-vlv-index-name}",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Returns a single Local DB VLV Index",
                    "type": "local-db-vlv-index-response",
                    "nickname": "get-local-db-vlv-index",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "backend-name",
                            "required": true,
                            "type": "string"
                        },
                        {
                            "paramType": "query",
                            "name": "attributes",
                            "description": "Comma-separated list of attributes to include in the response",
                            "required": false,
                            "type": "string"
                        },
                        {
                            "paramType": "query",
                            "name": "excludeAttributes",
                            "description": "Comma-separated list of attributes to exclude from the response",
                            "required": false,
                            "type": "string"
                        },
                        {
                          "name": "local-db-vlv-index-name",
                          "description": "Name of the Local DB VLV Index",
                          "required": true,
                          "type": "string",
                          "paramType": "path"
                        }
                    ],
                    "responseMessages": [
                        {
                            "code": 200,
                            "message": "The requested operation succeeded"
                        },
                        {
                            "code": 204,
                            "message": "The requested operation succeeded and no further information has been provided, such as in the case of a DELETE operation."
                        },
                        {
                            "code": 400,
                            "message": "The request contents are incorrectly formatted or the request was made for an invalid API version."
                        },
                        {
                            "code": 401,
                            "message": "The requester cannot be authenticated"
                        },
                        {
                            "code": 403,
                            "message": "The requester does not have the required privileges or another constraint failed, such as attempting to delete an edit-only object."
                        },
                        {
                            "code": 404,
                            "message": "The requested path does not refer to an existing object or object relation."
                        },
                        {
                            "code": 409,
                            "message": "The requested operation could not be performed due to the current state of the configuration. For example, an attempt was made to create an object that already exists or an attempt was made to delete an object that is referred to by another object."
                        },
                        {
                            "code": 415,
                            "message": "The request is such that the Accept header does not indicate that JSON is an acceptable format for a response."
                        },
                        {
                            "code": 500,
                            "message": "The server encountered an unexpected error."
                        }
                    ]
                },
                {
                    "method": "PUT",
                    "summary": "Update an existing Local DB VLV Index by name, replacing any attributes specified in the request body",
                    "type": "local-db-vlv-index-response",
                    "nickname": "put-local-db-vlv-index",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "backend-name",
                            "required": true,
                            "type": "string"
                        },
                        {
                            "paramType": "query",
                            "name": "attributes",
                            "description": "Comma-separated list of attributes to include in the response",
                            "required": false,
                            "type": "string"
                        },
                        {
                            "paramType": "query",
                            "name": "excludeAttributes",
                            "description": "Comma-separated list of attributes to exclude from the response",
                            "required": false,
                            "type": "string"
                        },
                        {
                            "paramType": "query",
                            "name": "applyChangeTo",
                            "description": "Specify whether to apply this configuration change to a single server or the whole server group. This does not apply to mirrored subtree objects",
                            "required": false,
                            "type": "string",
                            "enum": [
                                "singleServer",
                                "serverGroup"
                            ]
                        },
                        {
                          "name": "local-db-vlv-index-name",
                          "description": "Name of the Local DB VLV Index",
                          "required": true,
                          "type": "string",
                          "paramType": "path"
                        },
                        {
                            "paramType": "body",
                            "required": true,
                            "description": "Local DB VLV Index attributes to update",
                            "name": "local-db-vlv-index-properties",
                            "type": "local-db-vlv-index-properties"
                        }
                    ],
                    "responseMessages": [
                        {
                            "code": 200,
                            "message": "The requested operation succeeded"
                        },
                        {
                            "code": 204,
                            "message": "The requested operation succeeded and no further information has been provided, such as in the case of a DELETE operation."
                        },
                        {
                            "code": 400,
                            "message": "The request contents are incorrectly formatted or the request was made for an invalid API version."
                        },
                        {
                            "code": 401,
                            "message": "The requester cannot be authenticated"
                        },
                        {
                            "code": 403,
                            "message": "The requester does not have the required privileges or another constraint failed, such as attempting to delete an edit-only object."
                        },
                        {
                            "code": 404,
                            "message": "The requested path does not refer to an existing object or object relation."
                        },
                        {
                            "code": 409,
                            "message": "The requested operation could not be performed due to the current state of the configuration. For example, an attempt was made to create an object that already exists or an attempt was made to delete an object that is referred to by another object."
                        },
                        {
                            "code": 415,
                            "message": "The request is such that the Accept header does not indicate that JSON is an acceptable format for a response."
                        },
                        {
                            "code": 500,
                            "message": "The server encountered an unexpected error."
                        }
                    ]
                },
                {
                    "method": "PATCH",
                    "summary": "Update an existing Local DB VLV Index by name, using a SCIM patch request",
                    "type": "local-db-vlv-index-response",
                    "nickname": "patch-local-db-vlv-index",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "backend-name",
                            "required": true,
                            "type": "string"
                        },
                        {
                            "paramType": "query",
                            "name": "attributes",
                            "description": "Comma-separated list of attributes to include in the response",
                            "required": false,
                            "type": "string"
                        },
                        {
                            "paramType": "query",
                            "name": "excludeAttributes",
                            "description": "Comma-separated list of attributes to exclude from the response",
                            "required": false,
                            "type": "string"
                        },
                        {
                            "paramType": "query",
                            "name": "applyChangeTo",
                            "description": "Specify whether to apply this configuration change to a single server or the whole server group. This does not apply to mirrored subtree objects",
                            "required": false,
                            "type": "string",
                            "enum": [
                                "singleServer",
                                "serverGroup"
                            ]
                        },
                        {
                          "name": "local-db-vlv-index-name",
                          "description": "Name of the Local DB VLV Index",
                          "required": true,
                          "type": "string",
                          "paramType": "path"
                        },
                        {
                            "paramType": "body",
                            "required": true,
                            "description": "SCIM operations to apply to the Local DB VLV Index",
                            "name": "Operations",
                            "type": "Operations"
                        }
                    ],
                    "responseMessages": [
                        {
                            "code": 200,
                            "message": "The requested operation succeeded"
                        },
                        {
                            "code": 204,
                            "message": "The requested operation succeeded and no further information has been provided, such as in the case of a DELETE operation."
                        },
                        {
                            "code": 400,
                            "message": "The request contents are incorrectly formatted or the request was made for an invalid API version."
                        },
                        {
                            "code": 401,
                            "message": "The requester cannot be authenticated"
                        },
                        {
                            "code": 403,
                            "message": "The requester does not have the required privileges or another constraint failed, such as attempting to delete an edit-only object."
                        },
                        {
                            "code": 404,
                            "message": "The requested path does not refer to an existing object or object relation."
                        },
                        {
                            "code": 409,
                            "message": "The requested operation could not be performed due to the current state of the configuration. For example, an attempt was made to create an object that already exists or an attempt was made to delete an object that is referred to by another object."
                        },
                        {
                            "code": 415,
                            "message": "The request is such that the Accept header does not indicate that JSON is an acceptable format for a response."
                        },
                        {
                            "code": 500,
                            "message": "The server encountered an unexpected error."
                        }
                    ]
                },
                {
                    "method": "DELETE",
                    "summary": "Delete a Local DB VLV Index",
                    "nickname": "delete-local-db-vlv-index",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "backend-name",
                            "required": true,
                            "type": "string"
                        },
                        {
                          "name": "local-db-vlv-index-name",
                          "description": "Name of the Local DB VLV Index",
                          "required": true,
                          "type": "string",
                          "paramType": "path"
                        }
                    ],
                    "responseMessages": [
                        {
                            "code": 200,
                            "message": "The requested operation succeeded"
                        },
                        {
                            "code": 204,
                            "message": "The requested operation succeeded and no further information has been provided, such as in the case of a DELETE operation."
                        },
                        {
                            "code": 400,
                            "message": "The request contents are incorrectly formatted or the request was made for an invalid API version."
                        },
                        {
                            "code": 401,
                            "message": "The requester cannot be authenticated"
                        },
                        {
                            "code": 403,
                            "message": "The requester does not have the required privileges or another constraint failed, such as attempting to delete an edit-only object."
                        },
                        {
                            "code": 404,
                            "message": "The requested path does not refer to an existing object or object relation."
                        },
                        {
                            "code": 409,
                            "message": "The requested operation could not be performed due to the current state of the configuration. For example, an attempt was made to create an object that already exists or an attempt was made to delete an object that is referred to by another object."
                        },
                        {
                            "code": 415,
                            "message": "The request is such that the Accept header does not indicate that JSON is an acceptable format for a response."
                        },
                        {
                            "code": 500,
                            "message": "The server encountered an unexpected error."
                        }
                    ]
                }
            ]
        }

        ,
        {
            "path": "/backends/{backend-name}/local-db-indexes",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Returns a list of all Local DB Index objects",
                    "type": "local-db-index-list-response",
                    "nickname": "list-local-db-indexes",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "backend-name",
                            "required": true,
                            "type": "string"
                        },
                        {
                            "paramType": "query",
                            "name": "filter",
                            "description": "SCIM filter",
                            "required": false,
                            "type": "string"
                        },
                        {
                            "paramType": "query",
                            "name": "sortBy",
                            "description": "Specifies a property value by which to sort",
                            "required": false,
                            "type": "string"
                        },
                        {
                            "paramType": "query",
                            "name": "sortOrder",
                            "description": "Specifies either ascending or descending alphabetical order",
                            "required": false,
                            "type": "string",
                            "enum": [
                                "ascending",
                                "descending"
                            ]
                        },
                        {
                            "paramType": "query",
                            "name": "startIndex",
                            "description": "1-based index of the first result to return",
                            "required": false,
                            "type": "string"
                        },
                        {
                            "paramType": "query",
                            "name": "count",
                            "description": "Indicates the number of results per page",
                            "required": false,
                            "type": "string"
                        },
                        {
                            "paramType": "query",
                            "name": "attributes",
                            "description": "Comma-separated list of attributes to include in the response",
                            "required": false,
                            "type": "string"
                        },
                        {
                            "paramType": "query",
                            "name": "excludeAttributes",
                            "description": "Comma-separated list of attributes to exclude from the response",
                            "required": false,
                            "type": "string"
                        }
                    ],
                    "responseMessages": [
                        {
                            "code": 200,
                            "message": "The requested operation succeeded"
                        },
                        {
                            "code": 204,
                            "message": "The requested operation succeeded and no further information has been provided, such as in the case of a DELETE operation."
                        },
                        {
                            "code": 400,
                            "message": "The request contents are incorrectly formatted or the request was made for an invalid API version."
                        },
                        {
                            "code": 401,
                            "message": "The requester cannot be authenticated"
                        },
                        {
                            "code": 403,
                            "message": "The requester does not have the required privileges or another constraint failed, such as attempting to delete an edit-only object."
                        },
                        {
                            "code": 404,
                            "message": "The requested path does not refer to an existing object or object relation."
                        },
                        {
                            "code": 409,
                            "message": "The requested operation could not be performed due to the current state of the configuration. For example, an attempt was made to create an object that already exists or an attempt was made to delete an object that is referred to by another object."
                        },
                        {
                            "code": 415,
                            "message": "The request is such that the Accept header does not indicate that JSON is an acceptable format for a response."
                        },
                        {
                            "code": 500,
                            "message": "The server encountered an unexpected error."
                        }
                    ]
                },
                {
                    "method": "POST",
                    "summary": "Add a new Local DB Index to the config",
                    "nickname": "add-local-db-index",
                    "type": "local-db-index-response",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "backend-name",
                            "required": true,
                            "type": "string"
                        },
                        {
                            "paramType": "body",
                            "required": true,
                            "description": "Local DB Index to add",
                            "name": "add-local-db-index-request",
                            "type": "add-local-db-index-request"
                        },
                        {
                            "paramType": "query",
                            "name": "attributes",
                            "description": "Comma-separated list of attributes to include in the response",
                            "required": false,
                            "type": "string"
                        },
                        {
                            "paramType": "query",
                            "name": "excludeAttributes",
                            "description": "Comma-separated list of attributes to exclude from the response",
                            "required": false,
                            "type": "string"
                        },
                        {
                            "paramType": "query",
                            "name": "applyChangeTo",
                            "description": "Specify whether to apply this configuration change to a single server or the whole server group. This does not apply to mirrored subtree objects",
                            "required": false,
                            "type": "string",
                            "enum": [
                                "singleServer",
                                "serverGroup"
                            ]
                        }
                    ],
                    "responseMessages": [
                        {
                            "code": 200,
                            "message": "The requested operation succeeded"
                        },
                        {
                            "code": 204,
                            "message": "The requested operation succeeded and no further information has been provided, such as in the case of a DELETE operation."
                        },
                        {
                            "code": 400,
                            "message": "The request contents are incorrectly formatted or the request was made for an invalid API version."
                        },
                        {
                            "code": 401,
                            "message": "The requester cannot be authenticated"
                        },
                        {
                            "code": 403,
                            "message": "The requester does not have the required privileges or another constraint failed, such as attempting to delete an edit-only object."
                        },
                        {
                            "code": 404,
                            "message": "The requested path does not refer to an existing object or object relation."
                        },
                        {
                            "code": 409,
                            "message": "The requested operation could not be performed due to the current state of the configuration. For example, an attempt was made to create an object that already exists or an attempt was made to delete an object that is referred to by another object."
                        },
                        {
                            "code": 415,
                            "message": "The request is such that the Accept header does not indicate that JSON is an acceptable format for a response."
                        },
                        {
                            "code": 500,
                            "message": "The server encountered an unexpected error."
                        }
                    ]
                }
            ]
        },
        {
            "path": "/backends/{backend-name}/local-db-indexes/{local-db-index-name}",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Returns a single Local DB Index",
                    "type": "local-db-index-response",
                    "nickname": "get-local-db-index",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "backend-name",
                            "required": true,
                            "type": "string"
                        },
                        {
                            "paramType": "query",
                            "name": "attributes",
                            "description": "Comma-separated list of attributes to include in the response",
                            "required": false,
                            "type": "string"
                        },
                        {
                            "paramType": "query",
                            "name": "excludeAttributes",
                            "description": "Comma-separated list of attributes to exclude from the response",
                            "required": false,
                            "type": "string"
                        },
                        {
                          "name": "local-db-index-name",
                          "description": "Name of the Local DB Index",
                          "required": true,
                          "type": "string",
                          "paramType": "path"
                        }
                    ],
                    "responseMessages": [
                        {
                            "code": 200,
                            "message": "The requested operation succeeded"
                        },
                        {
                            "code": 204,
                            "message": "The requested operation succeeded and no further information has been provided, such as in the case of a DELETE operation."
                        },
                        {
                            "code": 400,
                            "message": "The request contents are incorrectly formatted or the request was made for an invalid API version."
                        },
                        {
                            "code": 401,
                            "message": "The requester cannot be authenticated"
                        },
                        {
                            "code": 403,
                            "message": "The requester does not have the required privileges or another constraint failed, such as attempting to delete an edit-only object."
                        },
                        {
                            "code": 404,
                            "message": "The requested path does not refer to an existing object or object relation."
                        },
                        {
                            "code": 409,
                            "message": "The requested operation could not be performed due to the current state of the configuration. For example, an attempt was made to create an object that already exists or an attempt was made to delete an object that is referred to by another object."
                        },
                        {
                            "code": 415,
                            "message": "The request is such that the Accept header does not indicate that JSON is an acceptable format for a response."
                        },
                        {
                            "code": 500,
                            "message": "The server encountered an unexpected error."
                        }
                    ]
                },
                {
                    "method": "PUT",
                    "summary": "Update an existing Local DB Index by name, replacing any attributes specified in the request body",
                    "type": "local-db-index-response",
                    "nickname": "put-local-db-index",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "backend-name",
                            "required": true,
                            "type": "string"
                        },
                        {
                            "paramType": "query",
                            "name": "attributes",
                            "description": "Comma-separated list of attributes to include in the response",
                            "required": false,
                            "type": "string"
                        },
                        {
                            "paramType": "query",
                            "name": "excludeAttributes",
                            "description": "Comma-separated list of attributes to exclude from the response",
                            "required": false,
                            "type": "string"
                        },
                        {
                            "paramType": "query",
                            "name": "applyChangeTo",
                            "description": "Specify whether to apply this configuration change to a single server or the whole server group. This does not apply to mirrored subtree objects",
                            "required": false,
                            "type": "string",
                            "enum": [
                                "singleServer",
                                "serverGroup"
                            ]
                        },
                        {
                          "name": "local-db-index-name",
                          "description": "Name of the Local DB Index",
                          "required": true,
                          "type": "string",
                          "paramType": "path"
                        },
                        {
                            "paramType": "body",
                            "required": true,
                            "description": "Local DB Index attributes to update",
                            "name": "local-db-index-properties",
                            "type": "local-db-index-properties"
                        }
                    ],
                    "responseMessages": [
                        {
                            "code": 200,
                            "message": "The requested operation succeeded"
                        },
                        {
                            "code": 204,
                            "message": "The requested operation succeeded and no further information has been provided, such as in the case of a DELETE operation."
                        },
                        {
                            "code": 400,
                            "message": "The request contents are incorrectly formatted or the request was made for an invalid API version."
                        },
                        {
                            "code": 401,
                            "message": "The requester cannot be authenticated"
                        },
                        {
                            "code": 403,
                            "message": "The requester does not have the required privileges or another constraint failed, such as attempting to delete an edit-only object."
                        },
                        {
                            "code": 404,
                            "message": "The requested path does not refer to an existing object or object relation."
                        },
                        {
                            "code": 409,
                            "message": "The requested operation could not be performed due to the current state of the configuration. For example, an attempt was made to create an object that already exists or an attempt was made to delete an object that is referred to by another object."
                        },
                        {
                            "code": 415,
                            "message": "The request is such that the Accept header does not indicate that JSON is an acceptable format for a response."
                        },
                        {
                            "code": 500,
                            "message": "The server encountered an unexpected error."
                        }
                    ]
                },
                {
                    "method": "PATCH",
                    "summary": "Update an existing Local DB Index by name, using a SCIM patch request",
                    "type": "local-db-index-response",
                    "nickname": "patch-local-db-index",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "backend-name",
                            "required": true,
                            "type": "string"
                        },
                        {
                            "paramType": "query",
                            "name": "attributes",
                            "description": "Comma-separated list of attributes to include in the response",
                            "required": false,
                            "type": "string"
                        },
                        {
                            "paramType": "query",
                            "name": "excludeAttributes",
                            "description": "Comma-separated list of attributes to exclude from the response",
                            "required": false,
                            "type": "string"
                        },
                        {
                            "paramType": "query",
                            "name": "applyChangeTo",
                            "description": "Specify whether to apply this configuration change to a single server or the whole server group. This does not apply to mirrored subtree objects",
                            "required": false,
                            "type": "string",
                            "enum": [
                                "singleServer",
                                "serverGroup"
                            ]
                        },
                        {
                          "name": "local-db-index-name",
                          "description": "Name of the Local DB Index",
                          "required": true,
                          "type": "string",
                          "paramType": "path"
                        },
                        {
                            "paramType": "body",
                            "required": true,
                            "description": "SCIM operations to apply to the Local DB Index",
                            "name": "Operations",
                            "type": "Operations"
                        }
                    ],
                    "responseMessages": [
                        {
                            "code": 200,
                            "message": "The requested operation succeeded"
                        },
                        {
                            "code": 204,
                            "message": "The requested operation succeeded and no further information has been provided, such as in the case of a DELETE operation."
                        },
                        {
                            "code": 400,
                            "message": "The request contents are incorrectly formatted or the request was made for an invalid API version."
                        },
                        {
                            "code": 401,
                            "message": "The requester cannot be authenticated"
                        },
                        {
                            "code": 403,
                            "message": "The requester does not have the required privileges or another constraint failed, such as attempting to delete an edit-only object."
                        },
                        {
                            "code": 404,
                            "message": "The requested path does not refer to an existing object or object relation."
                        },
                        {
                            "code": 409,
                            "message": "The requested operation could not be performed due to the current state of the configuration. For example, an attempt was made to create an object that already exists or an attempt was made to delete an object that is referred to by another object."
                        },
                        {
                            "code": 415,
                            "message": "The request is such that the Accept header does not indicate that JSON is an acceptable format for a response."
                        },
                        {
                            "code": 500,
                            "message": "The server encountered an unexpected error."
                        }
                    ]
                },
                {
                    "method": "DELETE",
                    "summary": "Delete a Local DB Index",
                    "nickname": "delete-local-db-index",
                    "parameters": [
                        {
                            "paramType": "path",
                            "name": "backend-name",
                            "required": true,
                            "type": "string"
                        },
                        {
                          "name": "local-db-index-name",
                          "description": "Name of the Local DB Index",
                          "required": true,
                          "type": "string",
                          "paramType": "path"
                        }
                    ],
                    "responseMessages": [
                        {
                            "code": 200,
                            "message": "The requested operation succeeded"
                        },
                        {
                            "code": 204,
                            "message": "The requested operation succeeded and no further information has been provided, such as in the case of a DELETE operation."
                        },
                        {
                            "code": 400,
                            "message": "The request contents are incorrectly formatted or the request was made for an invalid API version."
                        },
                        {
                            "code": 401,
                            "message": "The requester cannot be authenticated"
                        },
                        {
                            "code": 403,
                            "message": "The requester does not have the required privileges or another constraint failed, such as attempting to delete an edit-only object."
                        },
                        {
                            "code": 404,
                            "message": "The requested path does not refer to an existing object or object relation."
                        },
                        {
                            "code": 409,
                            "message": "The requested operation could not be performed due to the current state of the configuration. For example, an attempt was made to create an object that already exists or an attempt was made to delete an object that is referred to by another object."
                        },
                        {
                            "code": 415,
                            "message": "The request is such that the Accept header does not indicate that JSON is an acceptable format for a response."
                        },
                        {
                            "code": 500,
                            "message": "The server encountered an unexpected error."
                        }
                    ]
                }
            ]
        }

    ],
    "models": {
        "Meta": {
            "id": "Meta",
            "properties": {
                "resourceType": {
                    "type": "string"
                },
                "location": {
                    "type": "string"
                }
            }
        },
        "Messages": {
            "id": "Messages",
            "properties": {
                "notifications": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "requiredActions": {
                    "type": "array",
                    "items": {
                        "$ref": "RequiredAction"
                    }
                }
            }
        },
        "RequiredAction": {
            "id": "RequiredAction",
            "required": [
                "type",
                "synopsis"
            ],
            "properties": {
                "property": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "synopsis": {
                    "type": "string"
                }
            }
        },
        "Operations": {
            "id": "Operations",
            "required": [
                "operations"
            ],
            "properties": {
                "operations": {
                    "type": "array",
                    "items": {
                        "$ref": "Operation"
                    }
                }
            }
        },
        "Operation": {
            "id": "Operation",
            "required": [
                "op",
                "path"
            ],
            "properties": {
                "op": {
                    "type": "string",
                    "enum": [
                        "add",
                        "remove",
                        "replace"
                    ]
                },
                "path": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "backend-list-response": {
            "id": "backend-list-response",
            "description": "Backend list response",
            "required": [
                "schemas",
                "totalResults"
            ],
            "properties": {
                "schemas": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "enum": [
                            "urn:ietf:params:scim:api:messages:2.0:ListResponse"
                        ]
                    }
                },
                "totalResults": {
                    "type": "integer"
                },
                "Resources": {
                    "type": "array",
                    "items": {
                        "$ref": "backend-response"
                    }
                }
            }
        },
        "add-backend-request": {
            "id": "add-backend-request",
            "description": "A Backend resource request",
            "required": [
                "backendName"
            ],
            "properties": {
                "backendName": {
                    "type": "string",
                    "description": "Name of the new Backend"
                },
                "schemas": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "enum": [
                            "urn:pingidentity:schemas:configuration:2.0:backend:schema"
                            ,
                            "urn:pingidentity:schemas:configuration:2.0:backend:backup"
                            ,
                            "urn:pingidentity:schemas:configuration:2.0:backend:encryption-settings"
                            ,
                            "urn:pingidentity:schemas:configuration:2.0:backend:ldif"
                            ,
                            "urn:pingidentity:schemas:configuration:2.0:backend:trust-store"
                            ,
                            "urn:pingidentity:schemas:configuration:2.0:backend:custom"
                            ,
                            "urn:pingidentity:schemas:configuration:2.0:backend:changelog"
                            ,
                            "urn:pingidentity:schemas:configuration:2.0:backend:monitor"
                            ,
                            "urn:pingidentity:schemas:configuration:2.0:backend:local-db"
                            ,
                            "urn:pingidentity:schemas:configuration:2.0:backend:config-file-handler"
                            ,
                            "urn:pingidentity:schemas:configuration:2.0:backend:task"
                            ,
                            "urn:pingidentity:schemas:configuration:2.0:backend:alert"
                            ,
                            "urn:pingidentity:schemas:configuration:2.0:backend:alarm"
                            ,
                            "urn:pingidentity:schemas:configuration:2.0:backend:metrics"
                        ]
                    }
                },
                "primeTimeLimit": {
                    "description": "Specifies the maximum length of time that the backend prime should be allowed to run. A duration of zero seconds indicates that there should not be a time limit.",
                    "type": "string"
                }
                ,
                "dbDirectory": {
                    "description": "Specifies the path to the filesystem directory that is used to hold the Berkeley DB Java Edition database files containing the data for this backend. The files for this backend are stored in a sub-directory named after the backend-id.",
                    "type": "string"
                }
                ,
                "processFiltersWithUndefinedAttributeTypes": {
                    "description": "Determines whether the Directory Server should continue filter processing for LDAP search operations in this Local DB Backend that includes a search filter with an attribute that is not defined in the schema. This will only apply if check-schema is enabled in the global configuration.",
                    "type": "boolean"
                }
                ,
                "dn2idCacheMode": {
                    "description": "Specifies the cache mode that should be used when accessing the records in the dn2id database, which provides a mapping between normalized entry DNs and the corresponding entry IDs.",
                    "type": "string"
                    , "enum": [
                        "cache-keys-and-values"
                        ,
                        "cache-keys-only"
                        ,
                        "no-caching"
                        ,
                        "keep-hot"
                        ,
                        "default"
                        ,
                        "make-cold"
                        ,
                        "evict-leaf-immediately"
                        ,
                        "evict-bin-immediately"
                    ]
                }
                ,
                "setDegradedAlertForUntrustedIndex": {
                    "description": "Determines whether the Directory Server enters a DEGRADED state when this Local DB Backend has an index whose contents cannot be trusted.",
                    "type": "boolean"
                }
                ,
                "primeAllIndexes": {
                    "description": "Indicates whether to prime all indexes associated with this backend, or to only prime the specified set of indexes (as configured with the system-index-to-prime property for the system indexes, and the prime-index property in the attribute index definition for attribute indexes).",
                    "type": "boolean"
                }
                ,
                "dn2uriCacheMode": {
                    "description": "Specifies the cache mode that should be used when accessing the records in the dn2uri database, which provides a mapping between a normalized entry DN and a set of referral URLs contained in the associated smart referral entry.",
                    "type": "string"
                    , "enum": [
                        "cache-keys-and-values"
                        ,
                        "cache-keys-only"
                        ,
                        "no-caching"
                        ,
                        "keep-hot"
                        ,
                        "default"
                        ,
                        "make-cold"
                        ,
                        "evict-leaf-immediately"
                        ,
                        "evict-bin-immediately"
                    ]
                }
                ,
                "taskBackingFile": {
                    "description": "Specifies the path to the backing file for storing information about the tasks configured in the server.",
                    "type": "string"
                }
                ,
                "changelogPurgeBatchSize": {
                    "description": "Specifies the number of changelog entries purged in a single database transaction.",
                    "type": "integer"
                }
                ,
                "trustStoreType": {
                    "description": "Specifies the format for the data in the key store file.",
                    "type": "string"
                }
                ,
                "id2childrenCacheMode": {
                    "description": "Specifies the cache mode that should be used when accessing the records in the id2children database, which provides a mapping between the entry ID of a particular entry and the entry IDs of all of its immediate children. This index may be used when performing searches with a single-level scope if the search filter cannot be resolved to a small enough candidate list. The size of this database directly depends on the number of entries that have children.",
                    "type": "string"
                    , "enum": [
                        "cache-keys-and-values"
                        ,
                        "cache-keys-only"
                        ,
                        "no-caching"
                        ,
                        "keep-hot"
                        ,
                        "default"
                        ,
                        "make-cold"
                        ,
                        "evict-leaf-immediately"
                        ,
                        "evict-bin-immediately"
                    ]
                }
                ,
                "jeProperty": {
                    "description": "Specifies the database and environment properties for the Berkeley DB Java Edition database for this changelog backend.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
                ,
                "indexExcludeAttribute": {
                    "description": "Specifies which attribute types are to be specifically excluded from the set of attribute indexes maintained on the changelog. This property is useful when the index-include-attribute property contains one of the special values "*" and "+".",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
                ,
                "compactCommonParentDN": {
                    "description": "Provides a DN of an entry that may be the parent for a large number of entries in the backend. This may be used to help increase the space efficiency when encoding entries for storage.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
                ,
                "uncachedId2entryCacheMode": {
                    "description": "Specifies the cache mode that should be used when accessing the records in the uncached-id2entry database, which provides a way to store complete or partial encoded entries with a different (and presumably less memory-intensive) cache mode than records written to id2entry.",
                    "type": "string"
                    , "enum": [
                        "cache-keys-and-values"
                        ,
                        "cache-keys-only"
                        ,
                        "no-caching"
                        ,
                        "keep-hot"
                        ,
                        "default"
                        ,
                        "make-cold"
                        ,
                        "evict-leaf-immediately"
                        ,
                        "evict-bin-immediately"
                    ]
                }
                ,
                "taskRetentionTime": {
                    "description": "Specifies the length of time that task entries should be retained after processing on the associated task has been completed.",
                    "type": "string"
                }
                ,
                "externalTxnDefaultBackendLockBehavior": {
                    "description": "Specifies the default behavior that should be exhibited by external transactions (e.g., an LDAP transaction or an atomic multi-update operation) with regard to acquiring an exclusive lock in this backend.",
                    "type": "string"
                    , "enum": [
                        "do-not-acquire"
                        ,
                        "acquire-after-retries"
                        ,
                        "acquire-before-retries"
                        ,
                        "acquire-before-initial-attempt"
                    ]
                }
                ,
                "dbCleanerMinUtilization": {
                    "description": "Specifies the minimum percentage of "live" data that the database cleaner attempts to keep in database log files.",
                    "type": "integer"
                }
                ,
                "dbUseThreadLocalHandles": {
                    "description": "Indicates whether to use thread-local database handles to reduce contention in the backend.",
                    "type": "boolean"
                }
                ,
                "changelogEntryExcludeBaseDN": {
                    "description": "The base DNs for branches in the data for which no changelog records should be generated.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
                ,
                "dbLoggingLevel": {
                    "description": "Specifies the log level that should be used by the database when it is writing information into the je.info file.",
                    "type": "string"
                }
                ,
                "dbTxnWriteNoSync": {
                    "description": "Indicates whether the database should synchronously flush data as it is written to disk.",
                    "type": "boolean"
                }
                ,
                "importTempDirectory": {
                    "description": "Specifies the location of the directory that is used to hold temporary information during the index post-processing phase of an LDIF import.",
                    "type": "string"
                }
                ,
                "setDegradedAlertWhenDisabled": {
                    "description": "Determines whether the Directory Server enters a DEGRADED state (and sends a corresponding alert) when this Backend is disabled.",
                    "type": "boolean"
                }
                ,
                "backendID": {
                    "description": "Specifies a name to identify the associated backend.",
                    "type": "string"
                }
                ,
                "targetDatabaseSize": {
                    "description": "The changelog database is allowed to grow up to this size on disk even if changes are older than the configured changelog-maximum-age.",
                    "type": "string"
                }
                ,
                "dbCheckpointerWakeupInterval": {
                    "description": "Specifies the maximum length of time that should pass between checkpoints.",
                    "type": "string"
                }
                ,
                "enabled": {
                    "description": "Indicates whether the backend is enabled in the server.",
                    "type": "boolean"
                }
                ,
                "dbBackgroundSyncInterval": {
                    "description": "Specifies the interval to use when performing background synchronous writes in the database environment in order to smooth overall write performance and increase data durability. A value of "0 s" will disable background synchronous writes.",
                    "type": "string"
                }
                ,
                "changelogEntryExcludeFilter": {
                    "description": "A filter that indicates which changelog entries should be excluded from the changelog. Note that this filter is evaluated against the changelog entry itself and not against the entry that was the target of the change referenced by the changelog entry. This filter may target any attributes that appear in changelog entries with the exception of the changeNumber and entry-size-bytes attributes, since they will not be known at the time of the filter evaluation.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
                ,
                "writeLastmodAttributes": {
                    "description": "Specifies whether values of creatorsName, createTimestamp, modifiersName and modifyTimestamp attributes will be written to changelog entries.",
                    "type": "boolean"
                }
                ,
                "trustStorePin": {
                    "description": "Specifies the clear-text PIN needed to access the Trust Store Backend.",
                    "type": "string"
                }
                ,
                "compressEntries": {
                    "description": "Indicates whether the backend should attempt to compress entries before storing them in the database.",
                    "type": "boolean"
                }
                ,
                "retentionPolicy": {
                    "description": "The retention policy to use for the Metrics Backend .",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
                ,
                "metricsDir": {
                    "description": "Specifies the path to the directory that contains metric definitions.",
                    "type": "string"
                }
                ,
                "backupDirectory": {
                    "description": "Specifies the path to a backup directory containing one or more backups for a particular backend.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
                ,
                "changelogWriteBatchSize": {
                    "description": "Specifies the number of changelog entries written in a single database transaction.",
                    "type": "integer"
                }
                ,
                "ldifFile": {
                    "description": "Specifies the path to the LDIF file containing the data for this backend.",
                    "type": "string"
                }
                ,
                "indexIncludeAttribute": {
                    "description": "Specifies which attribute types are to be specifically included in the set of attribute indexes maintained on the changelog. If this property does not have any values then no attribute types are indexed.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
                ,
                "primeThreadCount": {
                    "description": "Specifies the number of threads to use when priming. At present, this applies only to the preload and cursor-across-indexes prime methods.",
                    "type": "integer"
                }
                ,
                "readOnlySchemaFile": {
                    "description": "Specifies the name of a file (which must exist in the config/schema directory) containing schema elements that should be considered read-only. Any schema definitions contained in read-only files cannot be altered by external clients.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
                ,
                "trustStorePinPassphraseProvider": {
                    "description": "The passphrase provider to use to obtain the clear-text PIN needed to access the Trust Store Backend.",
                    "type": "string"
                }
                ,
                "systemIndexToPrimeInternalNodesOnly": {
                    "description": "Specifies the system index(es) for which internal database nodes only (i.e., the database keys but not values) should be primed when the backend is initialized.",
                    "type": "array",
                    "items": {
                        "type": "string"
                        , "enum": [
                            "dn2id"
                            ,
                            "id2entry"
                            ,
                            "uncached-id2entry"
                            ,
                            "id2children"
                            ,
                            "id2subtree"
                            ,
                            "dn2uri"
                        ]
                    }
                }
                ,
                "maxAlerts": {
                    "description": "Specifies the maximum number of alerts that should be retained. If more alerts than this configured maximum are generated within the alert retention time, then the oldest alerts will be purged to achieve this maximum.",
                    "type": "integer"
                }
                ,
                "deadlockRetryLimit": {
                    "description": "Specifies the number of times that the server should retry an attempted operation in the backend if a deadlock results from two concurrent requests that interfere with each other in a conflicting manner.",
                    "type": "integer"
                }
                ,
                "subtreeDeleteSizeLimit": {
                    "description": "Specifies the maximum number of entries that may be deleted from the backend when using the subtree delete control.",
                    "type": "integer"
                }
                ,
                "id2childrenIndexEntryLimit": {
                    "description": "Specifies the maximum number of entry IDs to maintain for each entry in the id2children system index (which keeps track of the immediate children for an entry, to assist in otherwise unindexed searches with a single-level scope). A value of 0 means there is no limit, however this could have a big impact on database size on disk and on server performance.",
                    "type": "integer"
                }
                ,
                "changelogEntryIncludeFilter": {
                    "description": "A filter that indicates which changelog entries should actually be stored in the changelog. Note that this filter is evaluated against the changelog entry itself and not against the entry that was the target of the change referenced by the changelog entry. This filter may target any attributes that appear in changelog entries with the exception of the changeNumber and entry-size-bytes attributes, since they will not be known at the time of the filter evaluation.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
                ,
                "backgroundPrime": {
                    "description": "Indicates whether to attempt to perform the prime using a background thread if possible. If background priming is enabled, then the Directory Server may be allowed to accept client connections and process requests while the prime is in progress.",
                    "type": "boolean"
                }
                ,
                "mirroredSubtreeEntryUpdateTimeout": {
                    "description": "Tells the server component that is responsible for mirroring configuration data across a topology of servers the maximum amount of time to wait for an update operation (add, delete, modify and modify-dn) on an entry to be applied on all servers in the topology. Mirrored data includes meta-data about the servers in the topology as well as cluster-wide configuration data.",
                    "type": "string"
                }
                ,
                "dbDirectoryPermissions": {
                    "description": "Specifies the permissions that should be applied to the directory containing the backend database files and to directories and files created during backup of the backend.",
                    "type": "string"
                }
                ,
                "changelogDeletedEntryIncludeAttribute": {
                    "description": "Specifies a set of attribute types that should be included in a changelog entry for DELETE operations.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
                ,
                "exportThreadCount": {
                    "description": "Specifies the number of threads to use for concurrently retrieving and encoding entries during an LDIF export.",
                    "type": "integer"
                }
                ,
                "disabledAlertType": {
                    "description": "Specifies the names of the alert types that should not be added to the backend. This can be used to suppress high volume alerts that might trigger hitting the max-alerts limit sooner than desired. Disabled alert types will not be sent out over persistent searches on this backend.",
                    "type": "array",
                    "items": {
                        "type": "string"
                        , "enum": [
                            "access-control-change"
                            ,
                            "access-control-disabled"
                            ,
                            "access-control-enabled"
                            ,
                            "access-control-parse-failure"
                            ,
                            "access-log-criteria-matched"
                            ,
                            "alarm-cleared"
                            ,
                            "alarm-critical"
                            ,
                            "alarm-major"
                            ,
                            "alarm-minor"
                            ,
                            "alarm-warning"
                            ,
                            "backend-disabled"
                            ,
                            "backend-initialization-failed"
                            ,
                            "backup-failed"
                            ,
                            "cannot-acquire-shared-backend-lock"
                            ,
                            "cannot-copy-schema-files"
                            ,
                            "cannot-decode-entry"
                            ,
                            "cannot-find-recurring-task"
                            ,
                            "cannot-register-backend"
                            ,
                            "cannot-release-shared-backend-lock"
                            ,
                            "cannot-rename-current-task-file"
                            ,
                            "cannot-rename-new-task-file"
                            ,
                            "cannot-restore-backup"
                            ,
                            "cannot-schedule-recurring-task-iteration"
                            ,
                            "cannot-write-configuration"
                            ,
                            "cannot-write-new-schema-files"
                            ,
                            "cannot-write-server-state-file"
                            ,
                            "cannot-write-task-backing-file"
                            ,
                            "config-change"
                            ,
                            "console-logger-without-no-detach"
                            ,
                            "crypto-manager-error"
                            ,
                            "continuous-garbage-collection-detected"
                            ,
                            "deadlock-detected"
                            ,
                            "debug-logging-enabled"
                            ,
                            "delegated-admin-configuration-errors"
                            ,
                            "duplicate-alerts-suppressed"
                            ,
                            "duplicate-error-alerts-suppressed"
                            ,
                            "duplicate-fatal-alerts-suppressed"
                            ,
                            "duplicate-info-alerts-suppressed"
                            ,
                            "duplicate-warning-alerts-suppressed"
                            ,
                            "embedded-postgresql-unavailable"
                            ,
                            "entering-lockdown-mode"
                            ,
                            "entry-references-removed-attribute-type"
                            ,
                            "exec-task-launching-command"
                            ,
                            "exploded-index-background-delete-cleanup-failed"
                            ,
                            "exploded-index-background-delete-failed"
                            ,
                            "external-config-file-edit-handled"
                            ,
                            "external-config-file-edit-lost"
                            ,
                            "external-server-initialization-failed"
                            ,
                            "failed-to-apply-mirrored-configuration"
                            ,
                            "file-retention-task-delete-failure"
                            ,
                            "force-gc-complete"
                            ,
                            "force-gc-starting"
                            ,
                            "global-index-insufficient-disk-space-error"
                            ,
                            "global-index-persistence-error"
                            ,
                            "global-index-read-error"
                            ,
                            "global-referential-integrity-update-failure"
                            ,
                            "globally-unique-attribute-conflict"
                            ,
                            "health-check-available-to-degraded"
                            ,
                            "health-check-available-to-unavailable"
                            ,
                            "health-check-degraded-to-available"
                            ,
                            "health-check-degraded-to-unavailable"
                            ,
                            "health-check-unavailable-to-available"
                            ,
                            "health-check-unavailable-to-degraded"
                            ,
                            "http-connection-handler-duplicate-context-path"
                            ,
                            "http-connection-handler-duplicate-servlet-extension"
                            ,
                            "index-corrupt"
                            ,
                            "index-degraded"
                            ,
                            "index-rebuild-completed"
                            ,
                            "index-rebuild-in-progress"
                            ,
                            "insecure-access-token-validator-enabled"
                            ,
                            "invalid-privilege"
                            ,
                            "je-background-sync-failed"
                            ,
                            "je-cleaner-disabled"
                            ,
                            "je-daemon-thread-exception"
                            ,
                            "je-environment-not-closed-cleanly"
                            ,
                            "je-recovery-required"
                            ,
                            "jvm-misconfiguration"
                            ,
                            "large-attribute-update-failure"
                            ,
                            "lba-no-available-servers"
                            ,
                            "ldap-connection-handler-cannot-listen"
                            ,
                            "ldap-connection-handler-consecutive-failures"
                            ,
                            "ldap-connection-handler-uncaught-error"
                            ,
                            "ldif-backend-cannot-write"
                            ,
                            "ldif-connection-handler-parse-error"
                            ,
                            "ldif-connection-handler-io-error"
                            ,
                            "leaving-lockdown-mode"
                            ,
                            "log-file-rotation-listener-invoke-error"
                            ,
                            "log-file-rotation-listener-processing-takes-too-long"
                            ,
                            "logging-error"
                            ,
                            "low-disk-space-error"
                            ,
                            "low-disk-space-warning"
                            ,
                            "mirrored-subtree-manager-forced-as-master-error"
                            ,
                            "mirrored-subtree-manager-forced-as-master-warning"
                            ,
                            "mirrored-subtree-manager-no-master-found"
                            ,
                            "mirrored-subtree-server-not-in-topology"
                            ,
                            "mirrored-subtree-manager-operation-error"
                            ,
                            "mirrored-subtree-manager-failed-outbound-connection"
                            ,
                            "mirrored-subtree-manager-connection-asymmetry"
                            ,
                            "missing-schema-elements-referenced-by-backend"
                            ,
                            "monitoring-endpoint-unable-to-connect"
                            ,
                            "no-enabled-alert-handlers"
                            ,
                            "offline-config-change-detected"
                            ,
                            "out-of-disk-space-error"
                            ,
                            "pdp-unavailable"
                            ,
                            "pdp-trust-framework-version-deprecated"
                            ,
                            "proxy-entry-balancing-operation-failure"
                            ,
                            "proxy-entry-balancing-error-multiple-operations-succeeded"
                            ,
                            "proxy-entry-rebalancing-admin-action-required"
                            ,
                            "replication-backlogged"
                            ,
                            "replication-metadata-decode-failure"
                            ,
                            "replication-missing-changes"
                            ,
                            "replication-monitor-data-unavailable"
                            ,
                            "replication-plugin-message-serialization-failure"
                            ,
                            "replication-server-changelog-failure"
                            ,
                            "replication-server-listen-failure"
                            ,
                            "replication-unresolved-conflict"
                            ,
                            "replication-unsent-changes"
                            ,
                            "replication-replay-failed"
                            ,
                            "restart-required"
                            ,
                            "schema-checking-disabled"
                            ,
                            "scim-lookthrough-limit-exceeded"
                            ,
                            "restricted-subtree-accessibility"
                            ,
                            "server-shutting-down"
                            ,
                            "server-starting"
                            ,
                            "server-started"
                            ,
                            "subtree-delete-interrupted"
                            ,
                            "sync-resource-connection-error"
                            ,
                            "sync-resource-operation-error"
                            ,
                            "sync-pipe-initialization-error"
                            ,
                            "sync-pipe-backlog-above-threshold"
                            ,
                            "sync-pipe-backlog-below-threshold"
                            ,
                            "system-nanotime-stopped"
                            ,
                            "system-current-time-shifted"
                            ,
                            "task-started"
                            ,
                            "task-completed"
                            ,
                            "task-failed"
                            ,
                            "third-party-extension-exception"
                            ,
                            "thread-exit-holding-lock"
                            ,
                            "threshold-warning-entry"
                            ,
                            "threshold-warning-exit"
                            ,
                            "threshold-critical-entry"
                            ,
                            "threshold-critical-exit"
                            ,
                            "topology-registry-secret-key-deleted"
                            ,
                            "uncaught-exception"
                            ,
                            "unindexed-internal-search"
                            ,
                            "unique-attribute-sync-conflict"
                            ,
                            "unique-attribute-sync-error"
                            ,
                            "uniqueness-control-post-commit-conflict"
                            ,
                            "unlicensed-product"
                            ,
                            "unrecognized-alert-type"
                            ,
                            "user-defined-error"
                            ,
                            "user-defined-fatal"
                            ,
                            "user-defined-info"
                            ,
                            "user-defined-warning"
                            ,
                            "worker-thread-caught-error"
                            ,
                            "work-queue-backlogged"
                            ,
                            "work-queue-full"
                            ,
                            "work-queue-no-threads-remaining"
                            ,
                            "server-jvm-paused"
                            ,
                            "sensitive-trace-data-logged-warning"
                            ,
                            "replication-generation-id-mismatch"
                            ,
                            "account-temporarily-locked-account-status-notification"
                            ,
                            "account-permanently-locked-account-status-notification"
                            ,
                            "account-unlocked-account-status-notification"
                            ,
                            "account-idle-locked-account-status-notification"
                            ,
                            "account-reset-locked-account-status-notification"
                            ,
                            "account-disabled-account-status-notification"
                            ,
                            "account-enabled-account-status-notification"
                            ,
                            "account-not-yet-active-account-status-notification"
                            ,
                            "account-expired-account-status-notification"
                            ,
                            "password-expired-account-status-notification"
                            ,
                            "password-expiring-account-status-notification"
                            ,
                            "password-reset-account-status-notification"
                            ,
                            "password-changed-account-status-notification"
                            ,
                            "account-created-account-status-notification"
                            ,
                            "account-updated-account-status-notification"
                            ,
                            "bind-password-failed-validation-account-status-notification"
                            ,
                            "must-change-password-account-status-notification"
                            ,
                            "privilege-assigned"
                            ,
                            "insecure-request-rejected"
                            ,
                            "incremental-backups-deprecated"
                            ,
                            "replace-certificate-succeeded"
                            ,
                            "replace-certificate-failed"
                        ]
                    }
                }
                ,
                "notificationManager": {
                    "description": "Specifies a notification manager for changes resulting from operations processed through this Backend",
                    "type": "string"
                }
                ,
                "numRecentChanges": {
                    "description": "Specifies the number of recent LDAP entry changes per replica for which the backend keeps a record to allow replication to recover in the event that the server is abruptly terminated. Increasing this value can lead to an increased peak server modification rate as well as increased replication throughput.",
                    "type": "integer"
                }
                ,
                "storageDir": {
                    "description": "Specifies the path to the directory that will be used to store queued samples.",
                    "type": "string"
                }
                ,
                "changelogMaximumAge": {
                    "description": "Changes are guaranteed to be maintained in the changelog database for at least this duration. Setting target-database-size can allow additional changes to be maintained up to the configured size on disk.",
                    "type": "string"
                }
                ,
                "changelogIncludeAttribute": {
                    "description": "Specifies which attribute types will be included in a changelog entry for ADD and MODIFY operations.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
                ,
                "dbImportCachePercent": {
                    "description": "The percentage of JVM memory to allocate to the database cache during import operations.",
                    "type": "integer"
                }
                ,
                "id2subtreeCacheMode": {
                    "description": "Specifies the cache mode that should be used when accessing the records in the id2subtree database, which provides a mapping between the entry ID of a particular entry and the entry IDs of all of its children to any depth. This index may be used when performing searches with a whole-subtree or subordinate-subtree scope if the search filter cannot be resolved to a small enough candidate list. The size of this database directly depends on the number of entries that have children.",
                    "type": "string"
                    , "enum": [
                        "cache-keys-and-values"
                        ,
                        "cache-keys-only"
                        ,
                        "no-caching"
                        ,
                        "keep-hot"
                        ,
                        "default"
                        ,
                        "make-cold"
                        ,
                        "evict-leaf-immediately"
                        ,
                        "evict-bin-immediately"
                    ]
                }
                ,
                "dbEvictorCriticalPercentage": {
                    "description": "Specifies the percentage over the configured maximum that the database cache is allowed to grow. It is recommended to set this value slightly above zero when the database is too large to fully cache in memory. In this case, a dedicated background evictor thread is used to perform evictions once the cache fills up reducing the possibility that server threads are blocked.",
                    "type": "integer"
                }
                ,
                "showAllAttributes": {
                    "description": "Indicates whether to treat all attributes in the schema entry as if they were user attributes regardless of their configuration.",
                    "type": "boolean"
                }
                ,
                "changelogEntryIncludeBaseDN": {
                    "description": "The base DNs for branches in the data for which to record changes in the changelog.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
                ,
                "sampleFlushInterval": {
                    "description": "Period when samples are flushed to disk.",
                    "type": "string"
                }
                ,
                "systemIndexToPrime": {
                    "description": "Specifies which system index(es) should be primed when the backend is initialized.",
                    "type": "array",
                    "items": {
                        "type": "string"
                        , "enum": [
                            "dn2id"
                            ,
                            "id2entry"
                            ,
                            "id2children"
                            ,
                            "id2subtree"
                            ,
                            "dn2uri"
                        ]
                    }
                }
                ,
                "changelogMaxBeforeAfterValues": {
                    "description": "This controls whether all attribute values for a modified attribute (even those values that have not changed) will be included in the changelog entry. If the number of attribute values does not exceed this limit, then all values for the modified attribute will be included in the changelog entry.",
                    "type": "integer"
                }
                ,
                "changelogIncludeKeyAttribute": {
                    "description": "Specifies which attribute types will be included in a changelog entry on every change.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
                ,
                "maxAlarms": {
                    "description": "Specifies the maximum number of alarms that should be retained. If more alarms than this configured maximum are generated within the alarm retention time, then the oldest alarms will be purged to achieve this maximum. Only alarms at normal severity will be purged.",
                    "type": "integer"
                }
                ,
                "reportExcludedChangelogAttributes": {
                    "description": "Indicates whether changelog entries that have been altered by applying access controls should include additional information about any attributes that may have been removed.",
                    "type": "string"
                    , "enum": [
                        "none"
                        ,
                        "attribute-counts"
                        ,
                        "attribute-names"
                    ]
                }
                ,
                "compositeIndexEntryLimit": {
                    "description": "Specifies the maximum number of entries that are allowed to match a given composite index key before that particular composite index key is no longer maintained.",
                    "type": "integer"
                }
                ,
                "maximumFinalTaskLogMessagesToRetain": {
                    "description": "The maximum number of log messages to retain in each task entry from the end of the processing for that task. If too many messages are logged during task processing, then retaining only a limited number of messages from the beginning and/or end of task processing can reduce the amount of memory that the server consumes by caching information about currently-active and recently-completed tasks.",
                    "type": "integer"
                }
                ,
                "singleWriterLockBehavior": {
                    "description": "Specifies the condition under which to acquire a single-writer lock to ensure that the associated operation will be the only write in progress at the time the lock is held. The single-writer lock can help avoid problems that result from database lock conflicts that arise between two write operations being processed at the same time in the same backend. This will not have any effect on the read operations processed while the write is in progress.",
                    "type": "string"
                    , "enum": [
                        "never-acquire"
                        ,
                        "acquire-on-retry"
                        ,
                        "always-acquire"
                    ]
                }
                ,
                "alarmRetentionTime": {
                    "description": "Specifies the maximum length of time that information about raised alarms should be maintained before they will be purged.",
                    "type": "string"
                }
                ,
                "applyAccessControlsToChangelogEntryContents": {
                    "description": "Indicates whether the contents of changelog entries should be subject to access control and sensitive attribute evaluation such that the contents of attributes like changes, deletedEntryAttrs, ds-changelog-entry-key-attr-values, ds-changelog-before-values, and ds-changelog-after-values may be altered based on attributes the user can see in the target entry.",
                    "type": "boolean"
                }
                ,
                "indexEntryLimit": {
                    "description": "Specifies the maximum number of entries that are allowed to match a given index key before that particular index key is no longer maintained.",
                    "type": "integer"
                }
                ,
                "dbCachePercent": {
                    "description": "Specifies the percentage of JVM memory to allocate to the changelog database cache.",
                    "type": "integer"
                }
                ,
                "uncachedAttributeCriteria": {
                    "description": "The criteria that will be used to identify attributes that should be written into the uncached-id2entry database rather than the id2entry database. This will only be used for entries in which the associated uncached-entry-criteria does not indicate that the entire entry should be uncached.",
                    "type": "string"
                }
                ,
                "notificationSenderAddress": {
                    "description": "Specifies the email address to use as the sender address (that is, the "From:" address) for notification mail messages generated when a task completes execution.",
                    "type": "string"
                }
                ,
                "returnUnavailableForUntrustedIndex": {
                    "description": "Determines whether the Directory Server returns UNAVAILABLE for any LDAP search operation in this Local DB Backend that would use an index whose contents cannot be trusted.",
                    "type": "boolean"
                }
                ,
                "dbNumCleanerThreads": {
                    "description": "Specifies the number of threads that the backend should maintain to keep the database log files at or near the desired utilization. A value of zero indicates that the number of cleaner threads should be automatically configured based on the number of available CPUs.",
                    "type": "integer"
                }
                ,
                "backupFilePermissions": {
                    "description": "Specifies the permissions that should be applied to files and directories created by a backup of the backend.",
                    "type": "string"
                }
                ,
                "dbLogFileMax": {
                    "description": "Specifies the maximum size for a database log file.",
                    "type": "string"
                }
                ,
                "maximumInitialTaskLogMessagesToRetain": {
                    "description": "The maximum number of log messages to retain in each task entry from the beginning of the processing for that task. If too many messages are logged during task processing, then retaining only a limited number of messages from the beginning and/or end of task processing can reduce the amount of memory that the server consumes by caching information about currently-active and recently-completed tasks.",
                    "type": "integer"
                }
                ,
                "description": {
                    "description": "A description for this Backend",
                    "type": "string"
                }
                ,
                "changelogWriteQueueCapacity": {
                    "description": "Specifies the capacity of the changelog write queue in number of changes.",
                    "type": "integer"
                }
                ,
                "trustStoreFile": {
                    "description": "Specifies the path to the file that stores the trust information.",
                    "type": "string"
                }
                ,
                "alertRetentionTime": {
                    "description": "Specifies the maximum length of time that information about generated alerts should be maintained before they will be purged.",
                    "type": "string"
                }
                ,
                "schemaEntryDN": {
                    "description": "Defines the base DNs of the subtrees in which the schema information is published in addition to the value included in the base-dn property.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
                ,
                "changelogDeletedEntryExcludeAttribute": {
                    "description": "Specifies a set of attribute types that should be excluded from a changelog entry for DELETE operations.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
                ,
                "softDeleteEntryIncludedOperation": {
                    "description": "Specifies which operations performed on soft-deleted entries will appear in the changelog.",
                    "type": "array",
                    "items": {
                        "type": "string"
                        , "enum": [
                            "modify"
                            ,
                            "delete"
                        ]
                    }
                }
                ,
                "baseDN": {
                    "description": "Specifies the base DN(s) for the data that the backend handles.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
                ,
                "isPrivateBackend": {
                    "description": "Indicates whether the backend should be considered a private backend, which indicates that it is used for storing operational data rather than user-defined information.",
                    "type": "boolean"
                }
                ,
                "mirroredSubtreeSearchTimeout": {
                    "description": "Tells the server component that is responsible for mirroring configuration data across a topology of servers the maximum amount of time to wait for a search operation to complete. Mirrored data includes meta-data about the servers in the topology as well as cluster-wide configuration data. Search requests that take longer than this timeout will be canceled and considered failures.",
                    "type": "string"
                }
                ,
                "id2entryCacheMode": {
                    "description": "Specifies the cache mode that should be used when accessing the records in the id2entry database, which provides a mapping between entry IDs and entry contents. Consider configuring uncached entries or uncached attributes in lieu of changing from the "cache-keys-and-values" default value.",
                    "type": "string"
                    , "enum": [
                        "cache-keys-and-values"
                        ,
                        "cache-keys-only"
                        ,
                        "no-caching"
                        ,
                        "keep-hot"
                        ,
                        "default"
                        ,
                        "make-cold"
                        ,
                        "evict-leaf-immediately"
                        ,
                        "evict-bin-immediately"
                    ]
                }
                ,
                "insignificantConfigArchiveAttribute": {
                    "description": "The name or OID of an attribute type that is considered insignificant for the purpose of maintaining the configuration archive.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
                ,
                "writabilityMode": {
                    "description": "Specifies the behavior that the backend should use when processing write operations.",
                    "type": "string"
                    , "enum": [
                        "enabled"
                        ,
                        "disabled"
                        ,
                        "internal-only"
                    ]
                }
                ,
                "hashEntries": {
                    "description": "Indicates whether to calculate and store a message digest of the entry contents along with the entry data, in order to provide a means of verifying the integrity of the entry data.",
                    "type": "boolean"
                }
                ,
                "id2subtreeIndexEntryLimit": {
                    "description": "Specifies the maximum number of entry IDs to maintain for each entry in the id2subtree system index (which keeps track of all descendants below an entry, to assist in otherwise unindexed searches with a whole-subtree or subordinate subtree scope). A value of 0 means there is no limit, however this could have a big impact on database size on disk and on server performance.",
                    "type": "integer"
                }
                ,
                "trustStorePinFile": {
                    "description": "Specifies the path to the text file whose only contents should be a single line containing the clear-text PIN needed to access the Trust Store Backend.",
                    "type": "string"
                }
                ,
                "offlineProcessDatabaseOpenTimeout": {
                    "description": "Specifies a timeout duration which will be used for opening the database environment by an offline process, such as export-ldif.",
                    "type": "string"
                }
                ,
                "includeVirtualAttributes": {
                    "description": "Specifies the changelog entry elements (if any) in which virtual attributes should be included.",
                    "type": "array",
                    "items": {
                        "type": "string"
                        , "enum": [
                            "add-attributes"
                            ,
                            "deleted-entry-attributes"
                            ,
                            "before-and-after-values"
                            ,
                            "key-attribute-values"
                        ]
                    }
                }
                ,
                "returnUnavailableWhenDisabled": {
                    "description": "Determines whether any LDAP operation that would use this Backend is to return UNAVAILABLE when this Backend is disabled.",
                    "type": "boolean"
                }
                ,
                "primeMethod": {
                    "description": "Specifies the method that should be used to prime caches with data for this backend.",
                    "type": "array",
                    "items": {
                        "type": "string"
                        , "enum": [
                            "none"
                            ,
                            "preload"
                            ,
                            "preload-internal-nodes-only"
                            ,
                            "cursor-across-indexes"
                            ,
                            "prime-to-filesystem-cache"
                            ,
                            "prime-to-filesystem-cache-non-sequential"
                        ]
                    }
                }
                ,
                "changelogExcludeAttribute": {
                    "description": "Specifies a set of attribute types that should be excluded in a changelog entry for ADD and MODIFY operations.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
                ,
                "defaultCacheMode": {
                    "description": "Specifies the cache mode that should be used for any database for which the cache mode is not explicitly specified. This includes the id2entry database, which stores encoded entries, and all attribute indexes.",
                    "type": "string"
                    , "enum": [
                        "cache-keys-and-values"
                        ,
                        "cache-keys-only"
                        ,
                        "no-caching"
                        ,
                        "keep-hot"
                        ,
                        "default"
                        ,
                        "make-cold"
                        ,
                        "evict-leaf-immediately"
                        ,
                        "evict-bin-immediately"
                    ]
                }
                ,
                "mirroredSubtreePeerPollingInterval": {
                    "description": "Tells the server component that is responsible for mirroring configuration data across a topology of servers the maximum amount of time to wait before polling the peer servers in the topology to determine if there are any changes in the topology. Mirrored data includes meta-data about the servers in the topology as well as cluster-wide configuration data.",
                    "type": "string"
                }
                ,
                "uncachedEntryCriteria": {
                    "description": "The criteria that will be used to identify entries that should be written into the uncached-id2entry database rather than the id2entry database.",
                    "type": "string"
                }
                ,
                "importThreadCount": {
                    "description": "Specifies the number of threads to use for concurrent processing during an LDIF import.",
                    "type": "integer"
                }
                ,
                "useReversibleForm": {
                    "description": "Specifies whether the changelog should provide enough information to be able to revert the changes if desired.",
                    "type": "boolean"
                }
            }
        },
        "backend-response": {
            "id": "backend-response",
            "description": "A Backend resource response",
            "required": [
                "id"
            ],
            "properties": {
                "schemas": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "enum": [
                            "urn:pingidentity:schemas:configuration:2.0:backend:schema"
                            ,
                            "urn:pingidentity:schemas:configuration:2.0:backend:backup"
                            ,
                            "urn:pingidentity:schemas:configuration:2.0:backend:encryption-settings"
                            ,
                            "urn:pingidentity:schemas:configuration:2.0:backend:ldif"
                            ,
                            "urn:pingidentity:schemas:configuration:2.0:backend:trust-store"
                            ,
                            "urn:pingidentity:schemas:configuration:2.0:backend:custom"
                            ,
                            "urn:pingidentity:schemas:configuration:2.0:backend:changelog"
                            ,
                            "urn:pingidentity:schemas:configuration:2.0:backend:monitor"
                            ,
                            "urn:pingidentity:schemas:configuration:2.0:backend:local-db"
                            ,
                            "urn:pingidentity:schemas:configuration:2.0:backend:config-file-handler"
                            ,
                            "urn:pingidentity:schemas:configuration:2.0:backend:task"
                            ,
                            "urn:pingidentity:schemas:configuration:2.0:backend:alert"
                            ,
                            "urn:pingidentity:schemas:configuration:2.0:backend:alarm"
                            ,
                            "urn:pingidentity:schemas:configuration:2.0:backend:metrics"
                        ]
                    }
                },
                "id": {
                    "type": "string",
                    "description": "Name of the Backend"
                },
                "meta": {
                    "$ref": "Meta"
                },
                "urn:pingidentity:schemas:configuration:messages:2.0": {
                    "$ref": "Messages"
                },
                "primeTimeLimit": {
                    "description": "Specifies the maximum length of time that the backend prime should be allowed to run. A duration of zero seconds indicates that there should not be a time limit.",
                    "type": "string"
                }
                ,
                "dbDirectory": {
                    "description": "Specifies the path to the filesystem directory that is used to hold the Berkeley DB Java Edition database files containing the data for this backend. The files for this backend are stored in a sub-directory named after the backend-id.",
                    "type": "string"
                }
                ,
                "processFiltersWithUndefinedAttributeTypes": {
                    "description": "Determines whether the Directory Server should continue filter processing for LDAP search operations in this Local DB Backend that includes a search filter with an attribute that is not defined in the schema. This will only apply if check-schema is enabled in the global configuration.",
                    "type": "boolean"
                }
                ,
                "dn2idCacheMode": {
                    "description": "Specifies the cache mode that should be used when accessing the records in the dn2id database, which provides a mapping between normalized entry DNs and the corresponding entry IDs.",
                    "type": "string"
                    , "enum": [
                        "cache-keys-and-values"
                        ,
                        "cache-keys-only"
                        ,
                        "no-caching"
                        ,
                        "keep-hot"
                        ,
                        "default"
                        ,
                        "make-cold"
                        ,
                        "evict-leaf-immediately"
                        ,
                        "evict-bin-immediately"
                    ]
                }
                ,
                "setDegradedAlertForUntrustedIndex": {
                    "description": "Determines whether the Directory Server enters a DEGRADED state when this Local DB Backend has an index whose contents cannot be trusted.",
                    "type": "boolean"
                }
                ,
                "primeAllIndexes": {
                    "description": "Indicates whether to prime all indexes associated with this backend, or to only prime the specified set of indexes (as configured with the system-index-to-prime property for the system indexes, and the prime-index property in the attribute index definition for attribute indexes).",
                    "type": "boolean"
                }
                ,
                "dn2uriCacheMode": {
                    "description": "Specifies the cache mode that should be used when accessing the records in the dn2uri database, which provides a mapping between a normalized entry DN and a set of referral URLs contained in the associated smart referral entry.",
                    "type": "string"
                    , "enum": [
                        "cache-keys-and-values"
                        ,
                        "cache-keys-only"
                        ,
                        "no-caching"
                        ,
                        "keep-hot"
                        ,
                        "default"
                        ,
                        "make-cold"
                        ,
                        "evict-leaf-immediately"
                        ,
                        "evict-bin-immediately"
                    ]
                }
                ,
                "taskBackingFile": {
                    "description": "Specifies the path to the backing file for storing information about the tasks configured in the server.",
                    "type": "string"
                }
                ,
                "changelogPurgeBatchSize": {
                    "description": "Specifies the number of changelog entries purged in a single database transaction.",
                    "type": "integer"
                }
                ,
                "trustStoreType": {
                    "description": "Specifies the format for the data in the key store file.",
                    "type": "string"
                }
                ,
                "id2childrenCacheMode": {
                    "description": "Specifies the cache mode that should be used when accessing the records in the id2children database, which provides a mapping between the entry ID of a particular entry and the entry IDs of all of its immediate children. This index may be used when performing searches with a single-level scope if the search filter cannot be resolved to a small enough candidate list. The size of this database directly depends on the number of entries that have children.",
                    "type": "string"
                    , "enum": [
                        "cache-keys-and-values"
                        ,
                        "cache-keys-only"
                        ,
                        "no-caching"
                        ,
                        "keep-hot"
                        ,
                        "default"
                        ,
                        "make-cold"
                        ,
                        "evict-leaf-immediately"
                        ,
                        "evict-bin-immediately"
                    ]
                }
                ,
                "jeProperty": {
                    "description": "Specifies the database and environment properties for the Berkeley DB Java Edition database for this changelog backend.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
                ,
                "indexExcludeAttribute": {
                    "description": "Specifies which attribute types are to be specifically excluded from the set of attribute indexes maintained on the changelog. This property is useful when the index-include-attribute property contains one of the special values "*" and "+".",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
                ,
                "compactCommonParentDN": {
                    "description": "Provides a DN of an entry that may be the parent for a large number of entries in the backend. This may be used to help increase the space efficiency when encoding entries for storage.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
                ,
                "uncachedId2entryCacheMode": {
                    "description": "Specifies the cache mode that should be used when accessing the records in the uncached-id2entry database, which provides a way to store complete or partial encoded entries with a different (and presumably less memory-intensive) cache mode than records written to id2entry.",
                    "type": "string"
                    , "enum": [
                        "cache-keys-and-values"
                        ,
                        "cache-keys-only"
                        ,
                        "no-caching"
                        ,
                        "keep-hot"
                        ,
                        "default"
                        ,
                        "make-cold"
                        ,
                        "evict-leaf-immediately"
                        ,
                        "evict-bin-immediately"
                    ]
                }
                ,
                "taskRetentionTime": {
                    "description": "Specifies the length of time that task entries should be retained after processing on the associated task has been completed.",
                    "type": "string"
                }
                ,
                "externalTxnDefaultBackendLockBehavior": {
                    "description": "Specifies the default behavior that should be exhibited by external transactions (e.g., an LDAP transaction or an atomic multi-update operation) with regard to acquiring an exclusive lock in this backend.",
                    "type": "string"
                    , "enum": [
                        "do-not-acquire"
                        ,
                        "acquire-after-retries"
                        ,
                        "acquire-before-retries"
                        ,
                        "acquire-before-initial-attempt"
                    ]
                }
                ,
                "dbCleanerMinUtilization": {
                    "description": "Specifies the minimum percentage of "live" data that the database cleaner attempts to keep in database log files.",
                    "type": "integer"
                }
                ,
                "dbUseThreadLocalHandles": {
                    "description": "Indicates whether to use thread-local database handles to reduce contention in the backend.",
                    "type": "boolean"
                }
                ,
                "changelogEntryExcludeBaseDN": {
                    "description": "The base DNs for branches in the data for which no changelog records should be generated.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
                ,
                "dbLoggingLevel": {
                    "description": "Specifies the log level that should be used by the database when it is writing information into the je.info file.",
                    "type": "string"
                }
                ,
                "dbTxnWriteNoSync": {
                    "description": "Indicates whether the database should synchronously flush data as it is written to disk.",
                    "type": "boolean"
                }
                ,
                "importTempDirectory": {
                    "description": "Specifies the location of the directory that is used to hold temporary information during the index post-processing phase of an LDIF import.",
                    "type": "string"
                }
                ,
                "setDegradedAlertWhenDisabled": {
                    "description": "Determines whether the Directory Server enters a DEGRADED state (and sends a corresponding alert) when this Backend is disabled.",
                    "type": "boolean"
                }
                ,
                "backendID": {
                    "description": "Specifies a name to identify the associated backend.",
                    "type": "string"
                }
                ,
                "targetDatabaseSize": {
                    "description": "The changelog database is allowed to grow up to this size on disk even if changes are older than the configured changelog-maximum-age.",
                    "type": "string"
                }
                ,
                "dbCheckpointerWakeupInterval": {
                    "description": "Specifies the maximum length of time that should pass between checkpoints.",
                    "type": "string"
                }
                ,
                "enabled": {
                    "description": "Indicates whether the backend is enabled in the server.",
                    "type": "boolean"
                }
                ,
                "dbBackgroundSyncInterval": {
                    "description": "Specifies the interval to use when performing background synchronous writes in the database environment in order to smooth overall write performance and increase data durability. A value of "0 s" will disable background synchronous writes.",
                    "type": "string"
                }
                ,
                "changelogEntryExcludeFilter": {
                    "description": "A filter that indicates which changelog entries should be excluded from the changelog. Note that this filter is evaluated against the changelog entry itself and not against the entry that was the target of the change referenced by the changelog entry. This filter may target any attributes that appear in changelog entries with the exception of the changeNumber and entry-size-bytes attributes, since they will not be known at the time of the filter evaluation.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
                ,
                "writeLastmodAttributes": {
                    "description": "Specifies whether values of creatorsName, createTimestamp, modifiersName and modifyTimestamp attributes will be written to changelog entries.",
                    "type": "boolean"
                }
                ,
                "trustStorePin": {
                    "description": "Specifies the clear-text PIN needed to access the Trust Store Backend.",
                    "type": "string"
                }
                ,
                "compressEntries": {
                    "description": "Indicates whether the backend should attempt to compress entries before storing them in the database.",
                    "type": "boolean"
                }
                ,
                "retentionPolicy": {
                    "description": "The retention policy to use for the Metrics Backend .",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
                ,
                "metricsDir": {
                    "description": "Specifies the path to the directory that contains metric definitions.",
                    "type": "string"
                }
                ,
                "backupDirectory": {
                    "description": "Specifies the path to a backup directory containing one or more backups for a particular backend.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
                ,
                "changelogWriteBatchSize": {
                    "description": "Specifies the number of changelog entries written in a single database transaction.",
                    "type": "integer"
                }
                ,
                "ldifFile": {
                    "description": "Specifies the path to the LDIF file containing the data for this backend.",
                    "type": "string"
                }
                ,
                "indexIncludeAttribute": {
                    "description": "Specifies which attribute types are to be specifically included in the set of attribute indexes maintained on the changelog. If this property does not have any values then no attribute types are indexed.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
                ,
                "primeThreadCount": {
                    "description": "Specifies the number of threads to use when priming. At present, this applies only to the preload and cursor-across-indexes prime methods.",
                    "type": "integer"
                }
                ,
                "readOnlySchemaFile": {
                    "description": "Specifies the name of a file (which must exist in the config/schema directory) containing schema elements that should be considered read-only. Any schema definitions contained in read-only files cannot be altered by external clients.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
                ,
                "trustStorePinPassphraseProvider": {
                    "description": "The passphrase provider to use to obtain the clear-text PIN needed to access the Trust Store Backend.",
                    "type": "string"
                }
                ,
                "systemIndexToPrimeInternalNodesOnly": {
                    "description": "Specifies the system index(es) for which internal database nodes only (i.e., the database keys but not values) should be primed when the backend is initialized.",
                    "type": "array",
                    "items": {
                        "type": "string"
                        , "enum": [
                            "dn2id"
                            ,
                            "id2entry"
                            ,
                            "uncached-id2entry"
                            ,
                            "id2children"
                            ,
                            "id2subtree"
                            ,
                            "dn2uri"
                        ]
                    }
                }
                ,
                "maxAlerts": {
                    "description": "Specifies the maximum number of alerts that should be retained. If more alerts than this configured maximum are generated within the alert retention time, then the oldest alerts will be purged to achieve this maximum.",
                    "type": "integer"
                }
                ,
                "deadlockRetryLimit": {
                    "description": "Specifies the number of times that the server should retry an attempted operation in the backend if a deadlock results from two concurrent requests that interfere with each other in a conflicting manner.",
                    "type": "integer"
                }
                ,
                "subtreeDeleteSizeLimit": {
                    "description": "Specifies the maximum number of entries that may be deleted from the backend when using the subtree delete control.",
                    "type": "integer"
                }
                ,
                "id2childrenIndexEntryLimit": {
                    "description": "Specifies the maximum number of entry IDs to maintain for each entry in the id2children system index (which keeps track of the immediate children for an entry, to assist in otherwise unindexed searches with a single-level scope). A value of 0 means there is no limit, however this could have a big impact on database size on disk and on server performance.",
                    "type": "integer"
                }
                ,
                "changelogEntryIncludeFilter": {
                    "description": "A filter that indicates which changelog entries should actually be stored in the changelog. Note that this filter is evaluated against the changelog entry itself and not against the entry that was the target of the change referenced by the changelog entry. This filter may target any attributes that appear in changelog entries with the exception of the changeNumber and entry-size-bytes attributes, since they will not be known at the time of the filter evaluation.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
                ,
                "backgroundPrime": {
                    "description": "Indicates whether to attempt to perform the prime using a background thread if possible. If background priming is enabled, then the Directory Server may be allowed to accept client connections and process requests while the prime is in progress.",
                    "type": "boolean"
                }
                ,
                "mirroredSubtreeEntryUpdateTimeout": {
                    "description": "Tells the server component that is responsible for mirroring configuration data across a topology of servers the maximum amount of time to wait for an update operation (add, delete, modify and modify-dn) on an entry to be applied on all servers in the topology. Mirrored data includes meta-data about the servers in the topology as well as cluster-wide configuration data.",
                    "type": "string"
                }
                ,
                "dbDirectoryPermissions": {
                    "description": "Specifies the permissions that should be applied to the directory containing the backend database files and to directories and files created during backup of the backend.",
                    "type": "string"
                }
                ,
                "changelogDeletedEntryIncludeAttribute": {
                    "description": "Specifies a set of attribute types that should be included in a changelog entry for DELETE operations.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
                ,
                "exportThreadCount": {
                    "description": "Specifies the number of threads to use for concurrently retrieving and encoding entries during an LDIF export.",
                    "type": "integer"
                }
                ,
                "disabledAlertType": {
                    "description": "Specifies the names of the alert types that should not be added to the backend. This can be used to suppress high volume alerts that might trigger hitting the max-alerts limit sooner than desired. Disabled alert types will not be sent out over persistent searches on this backend.",
                    "type": "array",
                    "items": {
                        "type": "string"
                        , "enum": [
                            "access-control-change"
                            ,
                            "access-control-disabled"
                            ,
                            "access-control-enabled"
                            ,
                            "access-control-parse-failure"
                            ,
                            "access-log-criteria-matched"
                            ,
                            "alarm-cleared"
                            ,
                            "alarm-critical"
                            ,
                            "alarm-major"
                            ,
                            "alarm-minor"
                            ,
                            "alarm-warning"
                            ,
                            "backend-disabled"
                            ,
                            "backend-initialization-failed"
                            ,
                            "backup-failed"
                            ,
                            "cannot-acquire-shared-backend-lock"
                            ,
                            "cannot-copy-schema-files"
                            ,
                            "cannot-decode-entry"
                            ,
                            "cannot-find-recurring-task"
                            ,
                            "cannot-register-backend"
                            ,
                            "cannot-release-shared-backend-lock"
                            ,
                            "cannot-rename-current-task-file"
                            ,
                            "cannot-rename-new-task-file"
                            ,
                            "cannot-restore-backup"
                            ,
                            "cannot-schedule-recurring-task-iteration"
                            ,
                            "cannot-write-configuration"
                            ,
                            "cannot-write-new-schema-files"
                            ,
                            "cannot-write-server-state-file"
                            ,
                            "cannot-write-task-backing-file"
                            ,
                            "config-change"
                            ,
                            "console-logger-without-no-detach"
                            ,
                            "crypto-manager-error"
                            ,
                            "continuous-garbage-collection-detected"
                            ,
                            "deadlock-detected"
                            ,
                            "debug-logging-enabled"
                            ,
                            "delegated-admin-configuration-errors"
                            ,
                            "duplicate-alerts-suppressed"
                            ,
                            "duplicate-error-alerts-suppressed"
                            ,
                            "duplicate-fatal-alerts-suppressed"
                            ,
                            "duplicate-info-alerts-suppressed"
                            ,
                            "duplicate-warning-alerts-suppressed"
                            ,
                            "embedded-postgresql-unavailable"
                            ,
                            "entering-lockdown-mode"
                            ,
                            "entry-references-removed-attribute-type"
                            ,
                            "exec-task-launching-command"
                            ,
                            "exploded-index-background-delete-cleanup-failed"
                            ,
                            "exploded-index-background-delete-failed"
                            ,
                            "external-config-file-edit-handled"
                            ,
                            "external-config-file-edit-lost"
                            ,
                            "external-server-initialization-failed"
                            ,
                            "failed-to-apply-mirrored-configuration"
                            ,
                            "file-retention-task-delete-failure"
                            ,
                            "force-gc-complete"
                            ,
                            "force-gc-starting"
                            ,
                            "global-index-insufficient-disk-space-error"
                            ,
                            "global-index-persistence-error"
                            ,
                            "global-index-read-error"
                            ,
                            "global-referential-integrity-update-failure"
                            ,
                            "globally-unique-attribute-conflict"
                            ,
                            "health-check-available-to-degraded"
                            ,
                            "health-check-available-to-unavailable"
                            ,
                            "health-check-degraded-to-available"
                            ,
                            "health-check-degraded-to-unavailable"
                            ,
                            "health-check-unavailable-to-available"
                            ,
                            "health-check-unavailable-to-degraded"
                            ,
                            "http-connection-handler-duplicate-context-path"
                            ,
                            "http-connection-handler-duplicate-servlet-extension"
                            ,
                            "index-corrupt"
                            ,
                            "index-degraded"
                            ,
                            "index-rebuild-completed"
                            ,
                            "index-rebuild-in-progress"
                            ,
                            "insecure-access-token-validator-enabled"
                            ,
                            "invalid-privilege"
                            ,
                            "je-background-sync-failed"
                            ,
                            "je-cleaner-disabled"
                            ,
                            "je-daemon-thread-exception"
                            ,
                            "je-environment-not-closed-cleanly"
                            ,
                            "je-recovery-required"
                            ,
                            "jvm-misconfiguration"
                            ,
                            "large-attribute-update-failure"
                            ,
                            "lba-no-available-servers"
                            ,
                            "ldap-connection-handler-cannot-listen"
                            ,
                            "ldap-connection-handler-consecutive-failures"
                            ,
                            "ldap-connection-handler-uncaught-error"
                            ,
                            "ldif-backend-cannot-write"
                            ,
                            "ldif-connection-handler-parse-error"
                            ,
                            "ldif-connection-handler-io-error"
                            ,
                            "leaving-lockdown-mode"
                            ,
                            "log-file-rotation-listener-invoke-error"
                            ,
                            "log-file-rotation-listener-processing-takes-too-long"
                            ,
                            "logging-error"
                            ,
                            "low-disk-space-error"
                            ,
                            "low-disk-space-warning"
                            ,
                            "mirrored-subtree-manager-forced-as-master-error"
                            ,
                            "mirrored-subtree-manager-forced-as-master-warning"
                            ,
                            "mirrored-subtree-manager-no-master-found"
                            ,
                            "mirrored-subtree-server-not-in-topology"
                            ,
                            "mirrored-subtree-manager-operation-error"
                            ,
                            "mirrored-subtree-manager-failed-outbound-connection"
                            ,
                            "mirrored-subtree-manager-connection-asymmetry"
                            ,
                            "missing-schema-elements-referenced-by-backend"
                            ,
                            "monitoring-endpoint-unable-to-connect"
                            ,
                            "no-enabled-alert-handlers"
                            ,
                            "offline-config-change-detected"
                            ,
                            "out-of-disk-space-error"
                            ,
                            "pdp-unavailable"
                            ,
                            "pdp-trust-framework-version-deprecated"
                            ,
                            "proxy-entry-balancing-operation-failure"
                            ,
                            "proxy-entry-balancing-error-multiple-operations-succeeded"
                            ,
                            "proxy-entry-rebalancing-admin-action-required"
                            ,
                            "replication-backlogged"
                            ,
                            "replication-metadata-decode-failure"
                            ,
                            "replication-missing-changes"
                            ,
                            "replication-monitor-data-unavailable"
                            ,
                            "replication-plugin-message-serialization-failure"
                            ,
                            "replication-server-changelog-failure"
                            ,
                            "replication-server-listen-failure"
                            ,
                            "replication-unresolved-conflict"
                            ,
                            "replication-unsent-changes"
                            ,
                            "replication-replay-failed"
                            ,
                            "restart-required"
                            ,
                            "schema-checking-disabled"
                            ,
                            "scim-lookthrough-limit-exceeded"
                            ,
                            "restricted-subtree-accessibility"
                            ,
                            "server-shutting-down"
                            ,
                            "server-starting"
                            ,
                            "server-started"
                            ,
                            "subtree-delete-interrupted"
                            ,
                            "sync-resource-connection-error"
                            ,
                            "sync-resource-operation-error"
                            ,
                            "sync-pipe-initialization-error"
                            ,
                            "sync-pipe-backlog-above-threshold"
                            ,
                            "sync-pipe-backlog-below-threshold"
                            ,
                            "system-nanotime-stopped"
                            ,
                            "system-current-time-shifted"
                            ,
                            "task-started"
                            ,
                            "task-completed"
                            ,
                            "task-failed"
                            ,
                            "third-party-extension-exception"
                            ,
                            "thread-exit-holding-lock"
                            ,
                            "threshold-warning-entry"
                            ,
                            "threshold-warning-exit"
                            ,
                            "threshold-critical-entry"
                            ,
                            "threshold-critical-exit"
                            ,
                            "topology-registry-secret-key-deleted"
                            ,
                            "uncaught-exception"
                            ,
                            "unindexed-internal-search"
                            ,
                            "unique-attribute-sync-conflict"
                            ,
                            "unique-attribute-sync-error"
                            ,
                            "uniqueness-control-post-commit-conflict"
                            ,
                            "unlicensed-product"
                            ,
                            "unrecognized-alert-type"
                            ,
                            "user-defined-error"
                            ,
                            "user-defined-fatal"
                            ,
                            "user-defined-info"
                            ,
                            "user-defined-warning"
                            ,
                            "worker-thread-caught-error"
                            ,
                            "work-queue-backlogged"
                            ,
                            "work-queue-full"
                            ,
                            "work-queue-no-threads-remaining"
                            ,
                            "server-jvm-paused"
                            ,
                            "sensitive-trace-data-logged-warning"
                            ,
                            "replication-generation-id-mismatch"
                            ,
                            "account-temporarily-locked-account-status-notification"
                            ,
                            "account-permanently-locked-account-status-notification"
                            ,
                            "account-unlocked-account-status-notification"
                            ,
                            "account-idle-locked-account-status-notification"
                            ,
                            "account-reset-locked-account-status-notification"
                            ,
                            "account-disabled-account-status-notification"
                            ,
                            "account-enabled-account-status-notification"
                            ,
                            "account-not-yet-active-account-status-notification"
                            ,
                            "account-expired-account-status-notification"
                            ,
                            "password-expired-account-status-notification"
                            ,
                            "password-expiring-account-status-notification"
                            ,
                            "password-reset-account-status-notification"
                            ,
                            "password-changed-account-status-notification"
                            ,
                            "account-created-account-status-notification"
                            ,
                            "account-updated-account-status-notification"
                            ,
                            "bind-password-failed-validation-account-status-notification"
                            ,
                            "must-change-password-account-status-notification"
                            ,
                            "privilege-assigned"
                            ,
                            "insecure-request-rejected"
                            ,
                            "incremental-backups-deprecated"
                            ,
                            "replace-certificate-succeeded"
                            ,
                            "replace-certificate-failed"
                        ]
                    }
                }
                ,
                "notificationManager": {
                    "description": "Specifies a notification manager for changes resulting from operations processed through this Backend",
                    "type": "string"
                }
                ,
                "numRecentChanges": {
                    "description": "Specifies the number of recent LDAP entry changes per replica for which the backend keeps a record to allow replication to recover in the event that the server is abruptly terminated. Increasing this value can lead to an increased peak server modification rate as well as increased replication throughput.",
                    "type": "integer"
                }
                ,
                "storageDir": {
                    "description": "Specifies the path to the directory that will be used to store queued samples.",
                    "type": "string"
                }
                ,
                "changelogMaximumAge": {
                    "description": "Changes are guaranteed to be maintained in the changelog database for at least this duration. Setting target-database-size can allow additional changes to be maintained up to the configured size on disk.",
                    "type": "string"
                }
                ,
                "changelogIncludeAttribute": {
                    "description": "Specifies which attribute types will be included in a changelog entry for ADD and MODIFY operations.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
                ,
                "dbImportCachePercent": {
                    "description": "The percentage of JVM memory to allocate to the database cache during import operations.",
                    "type": "integer"
                }
                ,
                "id2subtreeCacheMode": {
                    "description": "Specifies the cache mode that should be used when accessing the records in the id2subtree database, which provides a mapping between the entry ID of a particular entry and the entry IDs of all of its children to any depth. This index may be used when performing searches with a whole-subtree or subordinate-subtree scope if the search filter cannot be resolved to a small enough candidate list. The size of this database directly depends on the number of entries that have children.",
                    "type": "string"
                    , "enum": [
                        "cache-keys-and-values"
                        ,
                        "cache-keys-only"
                        ,
                        "no-caching"
                        ,
                        "keep-hot"
                        ,
                        "default"
                        ,
                        "make-cold"
                        ,
                        "evict-leaf-immediately"
                        ,
                        "evict-bin-immediately"
                    ]
                }
                ,
                "dbEvictorCriticalPercentage": {
                    "description": "Specifies the percentage over the configured maximum that the database cache is allowed to grow. It is recommended to set this value slightly above zero when the database is too large to fully cache in memory. In this case, a dedicated background evictor thread is used to perform evictions once the cache fills up reducing the possibility that server threads are blocked.",
                    "type": "integer"
                }
                ,
                "showAllAttributes": {
                    "description": "Indicates whether to treat all attributes in the schema entry as if they were user attributes regardless of their configuration.",
                    "type": "boolean"
                }
                ,
                "changelogEntryIncludeBaseDN": {
                    "description": "The base DNs for branches in the data for which to record changes in the changelog.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
                ,
                "sampleFlushInterval": {
                    "description": "Period when samples are flushed to disk.",
                    "type": "string"
                }
                ,
                "systemIndexToPrime": {
                    "description": "Specifies which system index(es) should be primed when the backend is initialized.",
                    "type": "array",
                    "items": {
                        "type": "string"
                        , "enum": [
                            "dn2id"
                            ,
                            "id2entry"
                            ,
                            "id2children"
                            ,
                            "id2subtree"
                            ,
                            "dn2uri"
                        ]
                    }
                }
                ,
                "changelogMaxBeforeAfterValues": {
                    "description": "This controls whether all attribute values for a modified attribute (even those values that have not changed) will be included in the changelog entry. If the number of attribute values does not exceed this limit, then all values for the modified attribute will be included in the changelog entry.",
                    "type": "integer"
                }
                ,
                "changelogIncludeKeyAttribute": {
                    "description": "Specifies which attribute types will be included in a changelog entry on every change.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
                ,
                "maxAlarms": {
                    "description": "Specifies the maximum number of alarms that should be retained. If more alarms than this configured maximum are generated within the alarm retention time, then the oldest alarms will be purged to achieve this maximum. Only alarms at normal severity will be purged.",
                    "type": "integer"
                }
                ,
                "reportExcludedChangelogAttributes": {
                    "description": "Indicates whether changelog entries that have been altered by applying access controls should include additional information about any attributes that may have been removed.",
                    "type": "string"
                    , "enum": [
                        "none"
                        ,
                        "attribute-counts"
                        ,
                        "attribute-names"
                    ]
                }
                ,
                "compositeIndexEntryLimit": {
                    "description": "Specifies the maximum number of entries that are allowed to match a given composite index key before that particular composite index key is no longer maintained.",
                    "type": "integer"
                }
                ,
                "maximumFinalTaskLogMessagesToRetain": {
                    "description": "The maximum number of log messages to retain in each task entry from the end of the processing for that task. If too many messages are logged during task processing, then retaining only a limited number of messages from the beginning and/or end of task processing can reduce the amount of memory that the server consumes by caching information about currently-active and recently-completed tasks.",
                    "type": "integer"
                }
                ,
                "singleWriterLockBehavior": {
                    "description": "Specifies the condition under which to acquire a single-writer lock to ensure that the associated operation will be the only write in progress at the time the lock is held. The single-writer lock can help avoid problems that result from database lock conflicts that arise between two write operations being processed at the same time in the same backend. This will not have any effect on the read operations processed while the write is in progress.",
                    "type": "string"
                    , "enum": [
                        "never-acquire"
                        ,
                        "acquire-on-retry"
                        ,
                        "always-acquire"
                    ]
                }
                ,
                "alarmRetentionTime": {
                    "description": "Specifies the maximum length of time that information about raised alarms should be maintained before they will be purged.",
                    "type": "string"
                }
                ,
                "applyAccessControlsToChangelogEntryContents": {
                    "description": "Indicates whether the contents of changelog entries should be subject to access control and sensitive attribute evaluation such that the contents of attributes like changes, deletedEntryAttrs, ds-changelog-entry-key-attr-values, ds-changelog-before-values, and ds-changelog-after-values may be altered based on attributes the user can see in the target entry.",
                    "type": "boolean"
                }
                ,
                "indexEntryLimit": {
                    "description": "Specifies the maximum number of entries that are allowed to match a given index key before that particular index key is no longer maintained.",
                    "type": "integer"
                }
                ,
                "dbCachePercent": {
                    "description": "Specifies the percentage of JVM memory to allocate to the changelog database cache.",
                    "type": "integer"
                }
                ,
                "uncachedAttributeCriteria": {
                    "description": "The criteria that will be used to identify attributes that should be written into the uncached-id2entry database rather than the id2entry database. This will only be used for entries in which the associated uncached-entry-criteria does not indicate that the entire entry should be uncached.",
                    "type": "string"
                }
                ,
                "notificationSenderAddress": {
                    "description": "Specifies the email address to use as the sender address (that is, the "From:" address) for notification mail messages generated when a task completes execution.",
                    "type": "string"
                }
                ,
                "returnUnavailableForUntrustedIndex": {
                    "description": "Determines whether the Directory Server returns UNAVAILABLE for any LDAP search operation in this Local DB Backend that would use an index whose contents cannot be trusted.",
                    "type": "boolean"
                }
                ,
                "dbNumCleanerThreads": {
                    "description": "Specifies the number of threads that the backend should maintain to keep the database log files at or near the desired utilization. A value of zero indicates that the number of cleaner threads should be automatically configured based on the number of available CPUs.",
                    "type": "integer"
                }
                ,
                "backupFilePermissions": {
                    "description": "Specifies the permissions that should be applied to files and directories created by a backup of the backend.",
                    "type": "string"
                }
                ,
                "dbLogFileMax": {
                    "description": "Specifies the maximum size for a database log file.",
                    "type": "string"
                }
                ,
                "maximumInitialTaskLogMessagesToRetain": {
                    "description": "The maximum number of log messages to retain in each task entry from the beginning of the processing for that task. If too many messages are logged during task processing, then retaining only a limited number of messages from the beginning and/or end of task processing can reduce the amount of memory that the server consumes by caching information about currently-active and recently-completed tasks.",
                    "type": "integer"
                }
                ,
                "description": {
                    "description": "A description for this Backend",
                    "type": "string"
                }
                ,
                "changelogWriteQueueCapacity": {
                    "description": "Specifies the capacity of the changelog write queue in number of changes.",
                    "type": "integer"
                }
                ,
                "trustStoreFile": {
                    "description": "Specifies the path to the file that stores the trust information.",
                    "type": "string"
                }
                ,
                "alertRetentionTime": {
                    "description": "Specifies the maximum length of time that information about generated alerts should be maintained before they will be purged.",
                    "type": "string"
                }
                ,
                "schemaEntryDN": {
                    "description": "Defines the base DNs of the subtrees in which the schema information is published in addition to the value included in the base-dn property.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
                ,
                "changelogDeletedEntryExcludeAttribute": {
                    "description": "Specifies a set of attribute types that should be excluded from a changelog entry for DELETE operations.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
                ,
                "softDeleteEntryIncludedOperation": {
                    "description": "Specifies which operations performed on soft-deleted entries will appear in the changelog.",
                    "type": "array",
                    "items": {
                        "type": "string"
                        , "enum": [
                            "modify"
                            ,
                            "delete"
                        ]
                    }
                }
                ,
                "baseDN": {
                    "description": "Specifies the base DN(s) for the data that the backend handles.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
                ,
                "isPrivateBackend": {
                    "description": "Indicates whether the backend should be considered a private backend, which indicates that it is used for storing operational data rather than user-defined information.",
                    "type": "boolean"
                }
                ,
                "mirroredSubtreeSearchTimeout": {
                    "description": "Tells the server component that is responsible for mirroring configuration data across a topology of servers the maximum amount of time to wait for a search operation to complete. Mirrored data includes meta-data about the servers in the topology as well as cluster-wide configuration data. Search requests that take longer than this timeout will be canceled and considered failures.",
                    "type": "string"
                }
                ,
                "id2entryCacheMode": {
                    "description": "Specifies the cache mode that should be used when accessing the records in the id2entry database, which provides a mapping between entry IDs and entry contents. Consider configuring uncached entries or uncached attributes in lieu of changing from the "cache-keys-and-values" default value.",
                    "type": "string"
                    , "enum": [
                        "cache-keys-and-values"
                        ,
                        "cache-keys-only"
                        ,
                        "no-caching"
                        ,
                        "keep-hot"
                        ,
                        "default"
                        ,
                        "make-cold"
                        ,
                        "evict-leaf-immediately"
                        ,
                        "evict-bin-immediately"
                    ]
                }
                ,
                "insignificantConfigArchiveAttribute": {
                    "description": "The name or OID of an attribute type that is considered insignificant for the purpose of maintaining the configuration archive.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
                ,
                "writabilityMode": {
                    "description": "Specifies the behavior that the backend should use when processing write operations.",
                    "type": "string"
                    , "enum": [
                        "enabled"
                        ,
                        "disabled"
                        ,
                        "internal-only"
                    ]
                }
                ,
                "hashEntries": {
                    "description": "Indicates whether to calculate and store a message digest of the entry contents along with the entry data, in order to provide a means of verifying the integrity of the entry data.",
                    "type": "boolean"
                }
                ,
                "id2subtreeIndexEntryLimit": {
                    "description": "Specifies the maximum number of entry IDs to maintain for each entry in the id2subtree system index (which keeps track of all descendants below an entry, to assist in otherwise unindexed searches with a whole-subtree or subordinate subtree scope). A value of 0 means there is no limit, however this could have a big impact on database size on disk and on server performance.",
                    "type": "integer"
                }
                ,
                "trustStorePinFile": {
                    "description": "Specifies the path to the text file whose only contents should be a single line containing the clear-text PIN needed to access the Trust Store Backend.",
                    "type": "string"
                }
                ,
                "offlineProcessDatabaseOpenTimeout": {
                    "description": "Specifies a timeout duration which will be used for opening the database environment by an offline process, such as export-ldif.",
                    "type": "string"
                }
                ,
                "includeVirtualAttributes": {
                    "description": "Specifies the changelog entry elements (if any) in which virtual attributes should be included.",
                    "type": "array",
                    "items": {
                        "type": "string"
                        , "enum": [
                            "add-attributes"
                            ,
                            "deleted-entry-attributes"
                            ,
                            "before-and-after-values"
                            ,
                            "key-attribute-values"
                        ]
                    }
                }
                ,
                "returnUnavailableWhenDisabled": {
                    "description": "Determines whether any LDAP operation that would use this Backend is to return UNAVAILABLE when this Backend is disabled.",
                    "type": "boolean"
                }
                ,
                "primeMethod": {
                    "description": "Specifies the method that should be used to prime caches with data for this backend.",
                    "type": "array",
                    "items": {
                        "type": "string"
                        , "enum": [
                            "none"
                            ,
                            "preload"
                            ,
                            "preload-internal-nodes-only"
                            ,
                            "cursor-across-indexes"
                            ,
                            "prime-to-filesystem-cache"
                            ,
                            "prime-to-filesystem-cache-non-sequential"
                        ]
                    }
                }
                ,
                "changelogExcludeAttribute": {
                    "description": "Specifies a set of attribute types that should be excluded in a changelog entry for ADD and MODIFY operations.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
                ,
                "defaultCacheMode": {
                    "description": "Specifies the cache mode that should be used for any database for which the cache mode is not explicitly specified. This includes the id2entry database, which stores encoded entries, and all attribute indexes.",
                    "type": "string"
                    , "enum": [
                        "cache-keys-and-values"
                        ,
                        "cache-keys-only"
                        ,
                        "no-caching"
                        ,
                        "keep-hot"
                        ,
                        "default"
                        ,
                        "make-cold"
                        ,
                        "evict-leaf-immediately"
                        ,
                        "evict-bin-immediately"
                    ]
                }
                ,
                "mirroredSubtreePeerPollingInterval": {
                    "description": "Tells the server component that is responsible for mirroring configuration data across a topology of servers the maximum amount of time to wait before polling the peer servers in the topology to determine if there are any changes in the topology. Mirrored data includes meta-data about the servers in the topology as well as cluster-wide configuration data.",
                    "type": "string"
                }
                ,
                "uncachedEntryCriteria": {
                    "description": "The criteria that will be used to identify entries that should be written into the uncached-id2entry database rather than the id2entry database.",
                    "type": "string"
                }
                ,
                "importThreadCount": {
                    "description": "Specifies the number of threads to use for concurrent processing during an LDIF import.",
                    "type": "integer"
                }
                ,
                "useReversibleForm": {
                    "description": "Specifies whether the changelog should provide enough information to be able to revert the changes if desired.",
                    "type": "boolean"
                }
            }
        },
        "backend-properties": {
            "id": "backend-properties",
            "description": "Backend properties",
            "properties": {
                "schemas": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "enum": [
                            "urn:pingidentity:schemas:configuration:2.0:backend:schema"
                            ,
                            "urn:pingidentity:schemas:configuration:2.0:backend:backup"
                            ,
                            "urn:pingidentity:schemas:configuration:2.0:backend:encryption-settings"
                            ,
                            "urn:pingidentity:schemas:configuration:2.0:backend:ldif"
                            ,
                            "urn:pingidentity:schemas:configuration:2.0:backend:trust-store"
                            ,
                            "urn:pingidentity:schemas:configuration:2.0:backend:custom"
                            ,
                            "urn:pingidentity:schemas:configuration:2.0:backend:changelog"
                            ,
                            "urn:pingidentity:schemas:configuration:2.0:backend:monitor"
                            ,
                            "urn:pingidentity:schemas:configuration:2.0:backend:local-db"
                            ,
                            "urn:pingidentity:schemas:configuration:2.0:backend:config-file-handler"
                            ,
                            "urn:pingidentity:schemas:configuration:2.0:backend:task"
                            ,
                            "urn:pingidentity:schemas:configuration:2.0:backend:alert"
                            ,
                            "urn:pingidentity:schemas:configuration:2.0:backend:alarm"
                            ,
                            "urn:pingidentity:schemas:configuration:2.0:backend:metrics"
                        ]
                    }
                },
                "primeTimeLimit": {
                    "description": "Specifies the maximum length of time that the backend prime should be allowed to run. A duration of zero seconds indicates that there should not be a time limit.",
                    "type": "string"
                }
                ,
                "dbDirectory": {
                    "description": "Specifies the path to the filesystem directory that is used to hold the Berkeley DB Java Edition database files containing the data for this backend. The files for this backend are stored in a sub-directory named after the backend-id.",
                    "type": "string"
                }
                ,
                "processFiltersWithUndefinedAttributeTypes": {
                    "description": "Determines whether the Directory Server should continue filter processing for LDAP search operations in this Local DB Backend that includes a search filter with an attribute that is not defined in the schema. This will only apply if check-schema is enabled in the global configuration.",
                    "type": "boolean"
                }
                ,
                "dn2idCacheMode": {
                    "description": "Specifies the cache mode that should be used when accessing the records in the dn2id database, which provides a mapping between normalized entry DNs and the corresponding entry IDs.",
                    "type": "string"
                    , "enum": [
                        "cache-keys-and-values"
                        ,
                        "cache-keys-only"
                        ,
                        "no-caching"
                        ,
                        "keep-hot"
                        ,
                        "default"
                        ,
                        "make-cold"
                        ,
                        "evict-leaf-immediately"
                        ,
                        "evict-bin-immediately"
                    ]
                }
                ,
                "setDegradedAlertForUntrustedIndex": {
                    "description": "Determines whether the Directory Server enters a DEGRADED state when this Local DB Backend has an index whose contents cannot be trusted.",
                    "type": "boolean"
                }
                ,
                "primeAllIndexes": {
                    "description": "Indicates whether to prime all indexes associated with this backend, or to only prime the specified set of indexes (as configured with the system-index-to-prime property for the system indexes, and the prime-index property in the attribute index definition for attribute indexes).",
                    "type": "boolean"
                }
                ,
                "dn2uriCacheMode": {
                    "description": "Specifies the cache mode that should be used when accessing the records in the dn2uri database, which provides a mapping between a normalized entry DN and a set of referral URLs contained in the associated smart referral entry.",
                    "type": "string"
                    , "enum": [
                        "cache-keys-and-values"
                        ,
                        "cache-keys-only"
                        ,
                        "no-caching"
                        ,
                        "keep-hot"
                        ,
                        "default"
                        ,
                        "make-cold"
                        ,
                        "evict-leaf-immediately"
                        ,
                        "evict-bin-immediately"
                    ]
                }
                ,
                "taskBackingFile": {
                    "description": "Specifies the path to the backing file for storing information about the tasks configured in the server.",
                    "type": "string"
                }
                ,
                "changelogPurgeBatchSize": {
                    "description": "Specifies the number of changelog entries purged in a single database transaction.",
                    "type": "integer"
                }
                ,
                "trustStoreType": {
                    "description": "Specifies the format for the data in the key store file.",
                    "type": "string"
                }
                ,
                "id2childrenCacheMode": {
                    "description": "Specifies the cache mode that should be used when accessing the records in the id2children database, which provides a mapping between the entry ID of a particular entry and the entry IDs of all of its immediate children. This index may be used when performing searches with a single-level scope if the search filter cannot be resolved to a small enough candidate list. The size of this database directly depends on the number of entries that have children.",
                    "type": "string"
                    , "enum": [
                        "cache-keys-and-values"
                        ,
                        "cache-keys-only"
                        ,
                        "no-caching"
                        ,
                        "keep-hot"
                        ,
                        "default"
                        ,
                        "make-cold"
                        ,
                        "evict-leaf-immediately"
                        ,
                        "evict-bin-immediately"
                    ]
                }
                ,
                "jeProperty": {
                    "description": "Specifies the database and environment properties for the Berkeley DB Java Edition database for this changelog backend.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
                ,
                "indexExcludeAttribute": {
                    "description": "Specifies which attribute types are to be specifically excluded from the set of attribute indexes maintained on the changelog. This property is useful when the index-include-attribute property contains one of the special values "*" and "+".",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
                ,
                "compactCommonParentDN": {
                    "description": "Provides a DN of an entry that may be the parent for a large number of entries in the backend. This may be used to help increase the space efficiency when encoding entries for storage.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
                ,
                "uncachedId2entryCacheMode": {
                    "description": "Specifies the cache mode that should be used when accessing the records in the uncached-id2entry database, which provides a way to store complete or partial encoded entries with a different (and presumably less memory-intensive) cache mode than records written to id2entry.",
                    "type": "string"
                    , "enum": [
                        "cache-keys-and-values"
                        ,
                        "cache-keys-only"
                        ,
                        "no-caching"
                        ,
                        "keep-hot"
                        ,
                        "default"
                        ,
                        "make-cold"
                        ,
                        "evict-leaf-immediately"
                        ,
                        "evict-bin-immediately"
                    ]
                }
                ,
                "taskRetentionTime": {
                    "description": "Specifies the length of time that task entries should be retained after processing on the associated task has been completed.",
                    "type": "string"
                }
                ,
                "externalTxnDefaultBackendLockBehavior": {
                    "description": "Specifies the default behavior that should be exhibited by external transactions (e.g., an LDAP transaction or an atomic multi-update operation) with regard to acquiring an exclusive lock in this backend.",
                    "type": "string"
                    , "enum": [
                        "do-not-acquire"
                        ,
                        "acquire-after-retries"
                        ,
                        "acquire-before-retries"
                        ,
                        "acquire-before-initial-attempt"
                    ]
                }
                ,
                "dbCleanerMinUtilization": {
                    "description": "Specifies the minimum percentage of "live" data that the database cleaner attempts to keep in database log files.",
                    "type": "integer"
                }
                ,
                "dbUseThreadLocalHandles": {
                    "description": "Indicates whether to use thread-local database handles to reduce contention in the backend.",
                    "type": "boolean"
                }
                ,
                "changelogEntryExcludeBaseDN": {
                    "description": "The base DNs for branches in the data for which no changelog records should be generated.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
                ,
                "dbLoggingLevel": {
                    "description": "Specifies the log level that should be used by the database when it is writing information into the je.info file.",
                    "type": "string"
                }
                ,
                "dbTxnWriteNoSync": {
                    "description": "Indicates whether the database should synchronously flush data as it is written to disk.",
                    "type": "boolean"
                }
                ,
                "importTempDirectory": {
                    "description": "Specifies the location of the directory that is used to hold temporary information during the index post-processing phase of an LDIF import.",
                    "type": "string"
                }
                ,
                "setDegradedAlertWhenDisabled": {
                    "description": "Determines whether the Directory Server enters a DEGRADED state (and sends a corresponding alert) when this Backend is disabled.",
                    "type": "boolean"
                }
                ,
                "backendID": {
                    "description": "Specifies a name to identify the associated backend.",
                    "type": "string"
                }
                ,
                "targetDatabaseSize": {
                    "description": "The changelog database is allowed to grow up to this size on disk even if changes are older than the configured changelog-maximum-age.",
                    "type": "string"
                }
                ,
                "dbCheckpointerWakeupInterval": {
                    "description": "Specifies the maximum length of time that should pass between checkpoints.",
                    "type": "string"
                }
                ,
                "enabled": {
                    "description": "Indicates whether the backend is enabled in the server.",
                    "type": "boolean"
                }
                ,
                "dbBackgroundSyncInterval": {
                    "description": "Specifies the interval to use when performing background synchronous writes in the database environment in order to smooth overall write performance and increase data durability. A value of "0 s" will disable background synchronous writes.",
                    "type": "string"
                }
                ,
                "changelogEntryExcludeFilter": {
                    "description": "A filter that indicates which changelog entries should be excluded from the changelog. Note that this filter is evaluated against the changelog entry itself and not against the entry that was the target of the change referenced by the changelog entry. This filter may target any attributes that appear in changelog entries with the exception of the changeNumber and entry-size-bytes attributes, since they will not be known at the time of the filter evaluation.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
                ,
                "writeLastmodAttributes": {
                    "description": "Specifies whether values of creatorsName, createTimestamp, modifiersName and modifyTimestamp attributes will be written to changelog entries.",
                    "type": "boolean"
                }
                ,
                "trustStorePin": {
                    "description": "Specifies the clear-text PIN needed to access the Trust Store Backend.",
                    "type": "string"
                }
                ,
                "compressEntries": {
                    "description": "Indicates whether the backend should attempt to compress entries before storing them in the database.",
                    "type": "boolean"
                }
                ,
                "retentionPolicy": {
                    "description": "The retention policy to use for the Metrics Backend .",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
                ,
                "metricsDir": {
                    "description": "Specifies the path to the directory that contains metric definitions.",
                    "type": "string"
                }
                ,
                "backupDirectory": {
                    "description": "Specifies the path to a backup directory containing one or more backups for a particular backend.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
                ,
                "changelogWriteBatchSize": {
                    "description": "Specifies the number of changelog entries written in a single database transaction.",
                    "type": "integer"
                }
                ,
                "ldifFile": {
                    "description": "Specifies the path to the LDIF file containing the data for this backend.",
                    "type": "string"
                }
                ,
                "indexIncludeAttribute": {
                    "description": "Specifies which attribute types are to be specifically included in the set of attribute indexes maintained on the changelog. If this property does not have any values then no attribute types are indexed.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
                ,
                "primeThreadCount": {
                    "description": "Specifies the number of threads to use when priming. At present, this applies only to the preload and cursor-across-indexes prime methods.",
                    "type": "integer"
                }
                ,
                "readOnlySchemaFile": {
                    "description": "Specifies the name of a file (which must exist in the config/schema directory) containing schema elements that should be considered read-only. Any schema definitions contained in read-only files cannot be altered by external clients.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
                ,
                "trustStorePinPassphraseProvider": {
                    "description": "The passphrase provider to use to obtain the clear-text PIN needed to access the Trust Store Backend.",
                    "type": "string"
                }
                ,
                "systemIndexToPrimeInternalNodesOnly": {
                    "description": "Specifies the system index(es) for which internal database nodes only (i.e., the database keys but not values) should be primed when the backend is initialized.",
                    "type": "array",
                    "items": {
                        "type": "string"
                        , "enum": [
                            "dn2id"
                            ,
                            "id2entry"
                            ,
                            "uncached-id2entry"
                            ,
                            "id2children"
                            ,
                            "id2subtree"
                            ,
                            "dn2uri"
                        ]
                    }
                }
                ,
                "maxAlerts": {
                    "description": "Specifies the maximum number of alerts that should be retained. If more alerts than this configured maximum are generated within the alert retention time, then the oldest alerts will be purged to achieve this maximum.",
                    "type": "integer"
                }
                ,
                "deadlockRetryLimit": {
                    "description": "Specifies the number of times that the server should retry an attempted operation in the backend if a deadlock results from two concurrent requests that interfere with each other in a conflicting manner.",
                    "type": "integer"
                }
                ,
                "subtreeDeleteSizeLimit": {
                    "description": "Specifies the maximum number of entries that may be deleted from the backend when using the subtree delete control.",
                    "type": "integer"
                }
                ,
                "id2childrenIndexEntryLimit": {
                    "description": "Specifies the maximum number of entry IDs to maintain for each entry in the id2children system index (which keeps track of the immediate children for an entry, to assist in otherwise unindexed searches with a single-level scope). A value of 0 means there is no limit, however this could have a big impact on database size on disk and on server performance.",
                    "type": "integer"
                }
                ,
                "changelogEntryIncludeFilter": {
                    "description": "A filter that indicates which changelog entries should actually be stored in the changelog. Note that this filter is evaluated against the changelog entry itself and not against the entry that was the target of the change referenced by the changelog entry. This filter may target any attributes that appear in changelog entries with the exception of the changeNumber and entry-size-bytes attributes, since they will not be known at the time of the filter evaluation.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
                ,
                "backgroundPrime": {
                    "description": "Indicates whether to attempt to perform the prime using a background thread if possible. If background priming is enabled, then the Directory Server may be allowed to accept client connections and process requests while the prime is in progress.",
                    "type": "boolean"
                }
                ,
                "mirroredSubtreeEntryUpdateTimeout": {
                    "description": "Tells the server component that is responsible for mirroring configuration data across a topology of servers the maximum amount of time to wait for an update operation (add, delete, modify and modify-dn) on an entry to be applied on all servers in the topology. Mirrored data includes meta-data about the servers in the topology as well as cluster-wide configuration data.",
                    "type": "string"
                }
                ,
                "dbDirectoryPermissions": {
                    "description": "Specifies the permissions that should be applied to the directory containing the backend database files and to directories and files created during backup of the backend.",
                    "type": "string"
                }
                ,
                "changelogDeletedEntryIncludeAttribute": {
                    "description": "Specifies a set of attribute types that should be included in a changelog entry for DELETE operations.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
                ,
                "exportThreadCount": {
                    "description": "Specifies the number of threads to use for concurrently retrieving and encoding entries during an LDIF export.",
                    "type": "integer"
                }
                ,
                "disabledAlertType": {
                    "description": "Specifies the names of the alert types that should not be added to the backend. This can be used to suppress high volume alerts that might trigger hitting the max-alerts limit sooner than desired. Disabled alert types will not be sent out over persistent searches on this backend.",
                    "type": "array",
                    "items": {
                        "type": "string"
                        , "enum": [
                            "access-control-change"
                            ,
                            "access-control-disabled"
                            ,
                            "access-control-enabled"
                            ,
                            "access-control-parse-failure"
                            ,
                            "access-log-criteria-matched"
                            ,
                            "alarm-cleared"
                            ,
                            "alarm-critical"
                            ,
                            "alarm-major"
                            ,
                            "alarm-minor"
                            ,
                            "alarm-warning"
                            ,
                            "backend-disabled"
                            ,
                            "backend-initialization-failed"
                            ,
                            "backup-failed"
                            ,
                            "cannot-acquire-shared-backend-lock"
                            ,
                            "cannot-copy-schema-files"
                            ,
                            "cannot-decode-entry"
                            ,
                            "cannot-find-recurring-task"
                            ,
                            "cannot-register-backend"
                            ,
                            "cannot-release-shared-backend-lock"
                            ,
                            "cannot-rename-current-task-file"
                            ,
                            "cannot-rename-new-task-file"
                            ,
                            "cannot-restore-backup"
                            ,
                            "cannot-schedule-recurring-task-iteration"
                            ,
                            "cannot-write-configuration"
                            ,
                            "cannot-write-new-schema-files"
                            ,
                            "cannot-write-server-state-file"
                            ,
                            "cannot-write-task-backing-file"
                            ,
                            "config-change"
                            ,
                            "console-logger-without-no-detach"
                            ,
                            "crypto-manager-error"
                            ,
                            "continuous-garbage-collection-detected"
                            ,
                            "deadlock-detected"
                            ,
                            "debug-logging-enabled"
                            ,
                            "delegated-admin-configuration-errors"
                            ,
                            "duplicate-alerts-suppressed"
                            ,
                            "duplicate-error-alerts-suppressed"
                            ,
                            "duplicate-fatal-alerts-suppressed"
                            ,
                            "duplicate-info-alerts-suppressed"
                            ,
                            "duplicate-warning-alerts-suppressed"
                            ,
                            "embedded-postgresql-unavailable"
                            ,
                            "entering-lockdown-mode"
                            ,
                            "entry-references-removed-attribute-type"
                            ,
                            "exec-task-launching-command"
                            ,
                            "exploded-index-background-delete-cleanup-failed"
                            ,
                            "exploded-index-background-delete-failed"
                            ,
                            "external-config-file-edit-handled"
                            ,
                            "external-config-file-edit-lost"
                            ,
                            "external-server-initialization-failed"
                            ,
                            "failed-to-apply-mirrored-configuration"
                            ,
                            "file-retention-task-delete-failure"
                            ,
                            "force-gc-complete"
                            ,
                            "force-gc-starting"
                            ,
                            "global-index-insufficient-disk-space-error"
                            ,
                            "global-index-persistence-error"
                            ,
                            "global-index-read-error"
                            ,
                            "global-referential-integrity-update-failure"
                            ,
                            "globally-unique-attribute-conflict"
                            ,
                            "health-check-available-to-degraded"
                            ,
                            "health-check-available-to-unavailable"
                            ,
                            "health-check-degraded-to-available"
                            ,
                            "health-check-degraded-to-unavailable"
                            ,
                            "health-check-unavailable-to-available"
                            ,
                            "health-check-unavailable-to-degraded"
                            ,
                            "http-connection-handler-duplicate-context-path"
                            ,
                            "http-connection-handler-duplicate-servlet-extension"
                            ,
                            "index-corrupt"
                            ,
                            "index-degraded"
                            ,
                            "index-rebuild-completed"
                            ,
                            "index-rebuild-in-progress"
                            ,
                            "insecure-access-token-validator-enabled"
                            ,
                            "invalid-privilege"
                            ,
                            "je-background-sync-failed"
                            ,
                            "je-cleaner-disabled"
                            ,
                            "je-daemon-thread-exception"
                            ,
                            "je-environment-not-closed-cleanly"
                            ,
                            "je-recovery-required"
                            ,
                            "jvm-misconfiguration"
                            ,
                            "large-attribute-update-failure"
                            ,
                            "lba-no-available-servers"
                            ,
                            "ldap-connection-handler-cannot-listen"
                            ,
                            "ldap-connection-handler-consecutive-failures"
                            ,
                            "ldap-connection-handler-uncaught-error"
                            ,
                            "ldif-backend-cannot-write"
                            ,
                            "ldif-connection-handler-parse-error"
                            ,
                            "ldif-connection-handler-io-error"
                            ,
                            "leaving-lockdown-mode"
                            ,
                            "log-file-rotation-listener-invoke-error"
                            ,
                            "log-file-rotation-listener-processing-takes-too-long"
                            ,
                            "logging-error"
                            ,
                            "low-disk-space-error"
                            ,
                            "low-disk-space-warning"
                            ,
                            "mirrored-subtree-manager-forced-as-master-error"
                            ,
                            "mirrored-subtree-manager-forced-as-master-warning"
                            ,
                            "mirrored-subtree-manager-no-master-found"
                            ,
                            "mirrored-subtree-server-not-in-topology"
                            ,
                            "mirrored-subtree-manager-operation-error"
                            ,
                            "mirrored-subtree-manager-failed-outbound-connection"
                            ,
                            "mirrored-subtree-manager-connection-asymmetry"
                            ,
                            "missing-schema-elements-referenced-by-backend"
                            ,
                            "monitoring-endpoint-unable-to-connect"
                            ,
                            "no-enabled-alert-handlers"
                            ,
                            "offline-config-change-detected"
                            ,
                            "out-of-disk-space-error"
                            ,
                            "pdp-unavailable"
                            ,
                            "pdp-trust-framework-version-deprecated"
                            ,
                            "proxy-entry-balancing-operation-failure"
                            ,
                            "proxy-entry-balancing-error-multiple-operations-succeeded"
                            ,
                            "proxy-entry-rebalancing-admin-action-required"
                            ,
                            "replication-backlogged"
                            ,
                            "replication-metadata-decode-failure"
                            ,
                            "replication-missing-changes"
                            ,
                            "replication-monitor-data-unavailable"
                            ,
                            "replication-plugin-message-serialization-failure"
                            ,
                            "replication-server-changelog-failure"
                            ,
                            "replication-server-listen-failure"
                            ,
                            "replication-unresolved-conflict"
                            ,
                            "replication-unsent-changes"
                            ,
                            "replication-replay-failed"
                            ,
                            "restart-required"
                            ,
                            "schema-checking-disabled"
                            ,
                            "scim-lookthrough-limit-exceeded"
                            ,
                            "restricted-subtree-accessibility"
                            ,
                            "server-shutting-down"
                            ,
                            "server-starting"
                            ,
                            "server-started"
                            ,
                            "subtree-delete-interrupted"
                            ,
                            "sync-resource-connection-error"
                            ,
                            "sync-resource-operation-error"
                            ,
                            "sync-pipe-initialization-error"
                            ,
                            "sync-pipe-backlog-above-threshold"
                            ,
                            "sync-pipe-backlog-below-threshold"
                            ,
                            "system-nanotime-stopped"
                            ,
                            "system-current-time-shifted"
                            ,
                            "task-started"
                            ,
                            "task-completed"
                            ,
                            "task-failed"
                            ,
                            "third-party-extension-exception"
                            ,
                            "thread-exit-holding-lock"
                            ,
                            "threshold-warning-entry"
                            ,
                            "threshold-warning-exit"
                            ,
                            "threshold-critical-entry"
                            ,
                            "threshold-critical-exit"
                            ,
                            "topology-registry-secret-key-deleted"
                            ,
                            "uncaught-exception"
                            ,
                            "unindexed-internal-search"
                            ,
                            "unique-attribute-sync-conflict"
                            ,
                            "unique-attribute-sync-error"
                            ,
                            "uniqueness-control-post-commit-conflict"
                            ,
                            "unlicensed-product"
                            ,
                            "unrecognized-alert-type"
                            ,
                            "user-defined-error"
                            ,
                            "user-defined-fatal"
                            ,
                            "user-defined-info"
                            ,
                            "user-defined-warning"
                            ,
                            "worker-thread-caught-error"
                            ,
                            "work-queue-backlogged"
                            ,
                            "work-queue-full"
                            ,
                            "work-queue-no-threads-remaining"
                            ,
                            "server-jvm-paused"
                            ,
                            "sensitive-trace-data-logged-warning"
                            ,
                            "replication-generation-id-mismatch"
                            ,
                            "account-temporarily-locked-account-status-notification"
                            ,
                            "account-permanently-locked-account-status-notification"
                            ,
                            "account-unlocked-account-status-notification"
                            ,
                            "account-idle-locked-account-status-notification"
                            ,
                            "account-reset-locked-account-status-notification"
                            ,
                            "account-disabled-account-status-notification"
                            ,
                            "account-enabled-account-status-notification"
                            ,
                            "account-not-yet-active-account-status-notification"
                            ,
                            "account-expired-account-status-notification"
                            ,
                            "password-expired-account-status-notification"
                            ,
                            "password-expiring-account-status-notification"
                            ,
                            "password-reset-account-status-notification"
                            ,
                            "password-changed-account-status-notification"
                            ,
                            "account-created-account-status-notification"
                            ,
                            "account-updated-account-status-notification"
                            ,
                            "bind-password-failed-validation-account-status-notification"
                            ,
                            "must-change-password-account-status-notification"
                            ,
                            "privilege-assigned"
                            ,
                            "insecure-request-rejected"
                            ,
                            "incremental-backups-deprecated"
                            ,
                            "replace-certificate-succeeded"
                            ,
                            "replace-certificate-failed"
                        ]
                    }
                }
                ,
                "notificationManager": {
                    "description": "Specifies a notification manager for changes resulting from operations processed through this Backend",
                    "type": "string"
                }
                ,
                "numRecentChanges": {
                    "description": "Specifies the number of recent LDAP entry changes per replica for which the backend keeps a record to allow replication to recover in the event that the server is abruptly terminated. Increasing this value can lead to an increased peak server modification rate as well as increased replication throughput.",
                    "type": "integer"
                }
                ,
                "storageDir": {
                    "description": "Specifies the path to the directory that will be used to store queued samples.",
                    "type": "string"
                }
                ,
                "changelogMaximumAge": {
                    "description": "Changes are guaranteed to be maintained in the changelog database for at least this duration. Setting target-database-size can allow additional changes to be maintained up to the configured size on disk.",
                    "type": "string"
                }
                ,
                "changelogIncludeAttribute": {
                    "description": "Specifies which attribute types will be included in a changelog entry for ADD and MODIFY operations.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
                ,
                "dbImportCachePercent": {
                    "description": "The percentage of JVM memory to allocate to the database cache during import operations.",
                    "type": "integer"
                }
                ,
                "id2subtreeCacheMode": {
                    "description": "Specifies the cache mode that should be used when accessing the records in the id2subtree database, which provides a mapping between the entry ID of a particular entry and the entry IDs of all of its children to any depth. This index may be used when performing searches with a whole-subtree or subordinate-subtree scope if the search filter cannot be resolved to a small enough candidate list. The size of this database directly depends on the number of entries that have children.",
                    "type": "string"
                    , "enum": [
                        "cache-keys-and-values"
                        ,
                        "cache-keys-only"
                        ,
                        "no-caching"
                        ,
                        "keep-hot"
                        ,
                        "default"
                        ,
                        "make-cold"
                        ,
                        "evict-leaf-immediately"
                        ,
                        "evict-bin-immediately"
                    ]
                }
                ,
                "dbEvictorCriticalPercentage": {
                    "description": "Specifies the percentage over the configured maximum that the database cache is allowed to grow. It is recommended to set this value slightly above zero when the database is too large to fully cache in memory. In this case, a dedicated background evictor thread is used to perform evictions once the cache fills up reducing the possibility that server threads are blocked.",
                    "type": "integer"
                }
                ,
                "showAllAttributes": {
                    "description": "Indicates whether to treat all attributes in the schema entry as if they were user attributes regardless of their configuration.",
                    "type": "boolean"
                }
                ,
                "changelogEntryIncludeBaseDN": {
                    "description": "The base DNs for branches in the data for which to record changes in the changelog.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
                ,
                "sampleFlushInterval": {
                    "description": "Period when samples are flushed to disk.",
                    "type": "string"
                }
                ,
                "systemIndexToPrime": {
                    "description": "Specifies which system index(es) should be primed when the backend is initialized.",
                    "type": "array",
                    "items": {
                        "type": "string"
                        , "enum": [
                            "dn2id"
                            ,
                            "id2entry"
                            ,
                            "id2children"
                            ,
                            "id2subtree"
                            ,
                            "dn2uri"
                        ]
                    }
                }
                ,
                "changelogMaxBeforeAfterValues": {
                    "description": "This controls whether all attribute values for a modified attribute (even those values that have not changed) will be included in the changelog entry. If the number of attribute values does not exceed this limit, then all values for the modified attribute will be included in the changelog entry.",
                    "type": "integer"
                }
                ,
                "changelogIncludeKeyAttribute": {
                    "description": "Specifies which attribute types will be included in a changelog entry on every change.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
                ,
                "maxAlarms": {
                    "description": "Specifies the maximum number of alarms that should be retained. If more alarms than this configured maximum are generated within the alarm retention time, then the oldest alarms will be purged to achieve this maximum. Only alarms at normal severity will be purged.",
                    "type": "integer"
                }
                ,
                "reportExcludedChangelogAttributes": {
                    "description": "Indicates whether changelog entries that have been altered by applying access controls should include additional information about any attributes that may have been removed.",
                    "type": "string"
                    , "enum": [
                        "none"
                        ,
                        "attribute-counts"
                        ,
                        "attribute-names"
                    ]
                }
                ,
                "compositeIndexEntryLimit": {
                    "description": "Specifies the maximum number of entries that are allowed to match a given composite index key before that particular composite index key is no longer maintained.",
                    "type": "integer"
                }
                ,
                "maximumFinalTaskLogMessagesToRetain": {
                    "description": "The maximum number of log messages to retain in each task entry from the end of the processing for that task. If too many messages are logged during task processing, then retaining only a limited number of messages from the beginning and/or end of task processing can reduce the amount of memory that the server consumes by caching information about currently-active and recently-completed tasks.",
                    "type": "integer"
                }
                ,
                "singleWriterLockBehavior": {
                    "description": "Specifies the condition under which to acquire a single-writer lock to ensure that the associated operation will be the only write in progress at the time the lock is held. The single-writer lock can help avoid problems that result from database lock conflicts that arise between two write operations being processed at the same time in the same backend. This will not have any effect on the read operations processed while the write is in progress.",
                    "type": "string"
                    , "enum": [
                        "never-acquire"
                        ,
                        "acquire-on-retry"
                        ,
                        "always-acquire"
                    ]
                }
                ,
                "alarmRetentionTime": {
                    "description": "Specifies the maximum length of time that information about raised alarms should be maintained before they will be purged.",
                    "type": "string"
                }
                ,
                "applyAccessControlsToChangelogEntryContents": {
                    "description": "Indicates whether the contents of changelog entries should be subject to access control and sensitive attribute evaluation such that the contents of attributes like changes, deletedEntryAttrs, ds-changelog-entry-key-attr-values, ds-changelog-before-values, and ds-changelog-after-values may be altered based on attributes the user can see in the target entry.",
                    "type": "boolean"
                }
                ,
                "indexEntryLimit": {
                    "description": "Specifies the maximum number of entries that are allowed to match a given index key before that particular index key is no longer maintained.",
                    "type": "integer"
                }
                ,
                "dbCachePercent": {
                    "description": "Specifies the percentage of JVM memory to allocate to the changelog database cache.",
                    "type": "integer"
                }
                ,
                "uncachedAttributeCriteria": {
                    "description": "The criteria that will be used to identify attributes that should be written into the uncached-id2entry database rather than the id2entry database. This will only be used for entries in which the associated uncached-entry-criteria does not indicate that the entire entry should be uncached.",
                    "type": "string"
                }
                ,
                "notificationSenderAddress": {
                    "description": "Specifies the email address to use as the sender address (that is, the "From:" address) for notification mail messages generated when a task completes execution.",
                    "type": "string"
                }
                ,
                "returnUnavailableForUntrustedIndex": {
                    "description": "Determines whether the Directory Server returns UNAVAILABLE for any LDAP search operation in this Local DB Backend that would use an index whose contents cannot be trusted.",
                    "type": "boolean"
                }
                ,
                "dbNumCleanerThreads": {
                    "description": "Specifies the number of threads that the backend should maintain to keep the database log files at or near the desired utilization. A value of zero indicates that the number of cleaner threads should be automatically configured based on the number of available CPUs.",
                    "type": "integer"
                }
                ,
                "backupFilePermissions": {
                    "description": "Specifies the permissions that should be applied to files and directories created by a backup of the backend.",
                    "type": "string"
                }
                ,
                "dbLogFileMax": {
                    "description": "Specifies the maximum size for a database log file.",
                    "type": "string"
                }
                ,
                "maximumInitialTaskLogMessagesToRetain": {
                    "description": "The maximum number of log messages to retain in each task entry from the beginning of the processing for that task. If too many messages are logged during task processing, then retaining only a limited number of messages from the beginning and/or end of task processing can reduce the amount of memory that the server consumes by caching information about currently-active and recently-completed tasks.",
                    "type": "integer"
                }
                ,
                "description": {
                    "description": "A description for this Backend",
                    "type": "string"
                }
                ,
                "changelogWriteQueueCapacity": {
                    "description": "Specifies the capacity of the changelog write queue in number of changes.",
                    "type": "integer"
                }
                ,
                "trustStoreFile": {
                    "description": "Specifies the path to the file that stores the trust information.",
                    "type": "string"
                }
                ,
                "alertRetentionTime": {
                    "description": "Specifies the maximum length of time that information about generated alerts should be maintained before they will be purged.",
                    "type": "string"
                }
                ,
                "schemaEntryDN": {
                    "description": "Defines the base DNs of the subtrees in which the schema information is published in addition to the value included in the base-dn property.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
                ,
                "changelogDeletedEntryExcludeAttribute": {
                    "description": "Specifies a set of attribute types that should be excluded from a changelog entry for DELETE operations.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
                ,
                "softDeleteEntryIncludedOperation": {
                    "description": "Specifies which operations performed on soft-deleted entries will appear in the changelog.",
                    "type": "array",
                    "items": {
                        "type": "string"
                        , "enum": [
                            "modify"
                            ,
                            "delete"
                        ]
                    }
                }
                ,
                "baseDN": {
                    "description": "Specifies the base DN(s) for the data that the backend handles.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
                ,
                "isPrivateBackend": {
                    "description": "Indicates whether the backend should be considered a private backend, which indicates that it is used for storing operational data rather than user-defined information.",
                    "type": "boolean"
                }
                ,
                "mirroredSubtreeSearchTimeout": {
                    "description": "Tells the server component that is responsible for mirroring configuration data across a topology of servers the maximum amount of time to wait for a search operation to complete. Mirrored data includes meta-data about the servers in the topology as well as cluster-wide configuration data. Search requests that take longer than this timeout will be canceled and considered failures.",
                    "type": "string"
                }
                ,
                "id2entryCacheMode": {
                    "description": "Specifies the cache mode that should be used when accessing the records in the id2entry database, which provides a mapping between entry IDs and entry contents. Consider configuring uncached entries or uncached attributes in lieu of changing from the "cache-keys-and-values" default value.",
                    "type": "string"
                    , "enum": [
                        "cache-keys-and-values"
                        ,
                        "cache-keys-only"
                        ,
                        "no-caching"
                        ,
                        "keep-hot"
                        ,
                        "default"
                        ,
                        "make-cold"
                        ,
                        "evict-leaf-immediately"
                        ,
                        "evict-bin-immediately"
                    ]
                }
                ,
                "insignificantConfigArchiveAttribute": {
                    "description": "The name or OID of an attribute type that is considered insignificant for the purpose of maintaining the configuration archive.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
                ,
                "writabilityMode": {
                    "description": "Specifies the behavior that the backend should use when processing write operations.",
                    "type": "string"
                    , "enum": [
                        "enabled"
                        ,
                        "disabled"
                        ,
                        "internal-only"
                    ]
                }
                ,
                "hashEntries": {
                    "description": "Indicates whether to calculate and store a message digest of the entry contents along with the entry data, in order to provide a means of verifying the integrity of the entry data.",
                    "type": "boolean"
                }
                ,
                "id2subtreeIndexEntryLimit": {
                    "description": "Specifies the maximum number of entry IDs to maintain for each entry in the id2subtree system index (which keeps track of all descendants below an entry, to assist in otherwise unindexed searches with a whole-subtree or subordinate subtree scope). A value of 0 means there is no limit, however this could have a big impact on database size on disk and on server performance.",
                    "type": "integer"
                }
                ,
                "trustStorePinFile": {
                    "description": "Specifies the path to the text file whose only contents should be a single line containing the clear-text PIN needed to access the Trust Store Backend.",
                    "type": "string"
                }
                ,
                "offlineProcessDatabaseOpenTimeout": {
                    "description": "Specifies a timeout duration which will be used for opening the database environment by an offline process, such as export-ldif.",
                    "type": "string"
                }
                ,
                "includeVirtualAttributes": {
                    "description": "Specifies the changelog entry elements (if any) in which virtual attributes should be included.",
                    "type": "array",
                    "items": {
                        "type": "string"
                        , "enum": [
                            "add-attributes"
                            ,
                            "deleted-entry-attributes"
                            ,
                            "before-and-after-values"
                            ,
                            "key-attribute-values"
                        ]
                    }
                }
                ,
                "returnUnavailableWhenDisabled": {
                    "description": "Determines whether any LDAP operation that would use this Backend is to return UNAVAILABLE when this Backend is disabled.",
                    "type": "boolean"
                }
                ,
                "primeMethod": {
                    "description": "Specifies the method that should be used to prime caches with data for this backend.",
                    "type": "array",
                    "items": {
                        "type": "string"
                        , "enum": [
                            "none"
                            ,
                            "preload"
                            ,
                            "preload-internal-nodes-only"
                            ,
                            "cursor-across-indexes"
                            ,
                            "prime-to-filesystem-cache"
                            ,
                            "prime-to-filesystem-cache-non-sequential"
                        ]
                    }
                }
                ,
                "changelogExcludeAttribute": {
                    "description": "Specifies a set of attribute types that should be excluded in a changelog entry for ADD and MODIFY operations.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
                ,
                "defaultCacheMode": {
                    "description": "Specifies the cache mode that should be used for any database for which the cache mode is not explicitly specified. This includes the id2entry database, which stores encoded entries, and all attribute indexes.",
                    "type": "string"
                    , "enum": [
                        "cache-keys-and-values"
                        ,
                        "cache-keys-only"
                        ,
                        "no-caching"
                        ,
                        "keep-hot"
                        ,
                        "default"
                        ,
                        "make-cold"
                        ,
                        "evict-leaf-immediately"
                        ,
                        "evict-bin-immediately"
                    ]
                }
                ,
                "mirroredSubtreePeerPollingInterval": {
                    "description": "Tells the server component that is responsible for mirroring configuration data across a topology of servers the maximum amount of time to wait before polling the peer servers in the topology to determine if there are any changes in the topology. Mirrored data includes meta-data about the servers in the topology as well as cluster-wide configuration data.",
                    "type": "string"
                }
                ,
                "uncachedEntryCriteria": {
                    "description": "The criteria that will be used to identify entries that should be written into the uncached-id2entry database rather than the id2entry database.",
                    "type": "string"
                }
                ,
                "importThreadCount": {
                    "description": "Specifies the number of threads to use for concurrent processing during an LDIF import.",
                    "type": "integer"
                }
                ,
                "useReversibleForm": {
                    "description": "Specifies whether the changelog should provide enough information to be able to revert the changes if desired.",
                    "type": "boolean"
                }
            }
        }
        ,
        "local-db-composite-index-list-response": {
            "id": "local-db-composite-index-list-response",
            "description": "Local DB Composite Index list response",
            "required": [
                "schemas",
                "totalResults"
            ],
            "properties": {
                "schemas": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "enum": [
                            "urn:ietf:params:scim:api:messages:2.0:ListResponse"
                        ]
                    }
                },
                "totalResults": {
                    "type": "integer"
                },
                "Resources": {
                    "type": "array",
                    "items": {
                        "$ref": "local-db-composite-index-response"
                    }
                }
            }
        },
        "add-local-db-composite-index-request": {
            "id": "add-local-db-composite-index-request",
            "description": "A Local DB Composite Index resource request",
            "required": [
                "indexName"
            ],
            "properties": {
                "indexName": {
                    "type": "string",
                    "description": "Name of the new Local DB Composite Index"
                },
                "schemas": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "enum": [
                            "urn:pingidentity:schemas:configuration:2.0:local-db-composite-index"
                        ]
                    }
                },
                "primeInternalNodesOnly": {
                    "description": "Indicates whether to only prime the internal nodes of the index database, rather than priming both internal and leaf nodes.",
                    "type": "boolean"
                }
                ,
                "cacheMode": {
                    "description": "The behavior that the server should exhibit when storing information from this index in the database cache.",
                    "type": "string"
                    , "enum": [
                        "cache-keys-and-values"
                        ,
                        "cache-keys-only"
                        ,
                        "no-caching"
                    ]
                }
                ,
                "description": {
                    "description": "A description for this Local DB Composite Index",
                    "type": "string"
                }
                ,
                "indexFilterPattern": {
                    "description": "A filter pattern that identifies which entries to include in the index.",
                    "type": "string"
                }
                ,
                "indexEntryLimit": {
                    "description": "The maximum number of entries that any single index key will be allowed to match before the server stops maintaining the ID set for that index key.",
                    "type": "integer"
                }
                ,
                "primeIndex": {
                    "description": "Indicates whether the server should load the contents of this index into memory when the backend is being opened.",
                    "type": "boolean"
                }
                ,
                "indexBaseDNPattern": {
                    "description": "An optional base DN pattern that identifies portions of the DIT in which entries to index may exist.",
                    "type": "string"
                }
            }
        },
        "local-db-composite-index-response": {
            "id": "local-db-composite-index-response",
            "description": "A Local DB Composite Index resource response",
            "required": [
                "id"
            ],
            "properties": {
                "schemas": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "enum": [
                            "urn:pingidentity:schemas:configuration:2.0:local-db-composite-index"
                        ]
                    }
                },
                "id": {
                    "type": "string",
                    "description": "Name of the Local DB Composite Index"
                },
                "meta": {
                    "$ref": "Meta"
                },
                "urn:pingidentity:schemas:configuration:messages:2.0": {
                    "$ref": "Messages"
                },
                "primeInternalNodesOnly": {
                    "description": "Indicates whether to only prime the internal nodes of the index database, rather than priming both internal and leaf nodes.",
                    "type": "boolean"
                }
                ,
                "cacheMode": {
                    "description": "The behavior that the server should exhibit when storing information from this index in the database cache.",
                    "type": "string"
                    , "enum": [
                        "cache-keys-and-values"
                        ,
                        "cache-keys-only"
                        ,
                        "no-caching"
                    ]
                }
                ,
                "description": {
                    "description": "A description for this Local DB Composite Index",
                    "type": "string"
                }
                ,
                "indexFilterPattern": {
                    "description": "A filter pattern that identifies which entries to include in the index.",
                    "type": "string"
                }
                ,
                "indexEntryLimit": {
                    "description": "The maximum number of entries that any single index key will be allowed to match before the server stops maintaining the ID set for that index key.",
                    "type": "integer"
                }
                ,
                "primeIndex": {
                    "description": "Indicates whether the server should load the contents of this index into memory when the backend is being opened.",
                    "type": "boolean"
                }
                ,
                "indexBaseDNPattern": {
                    "description": "An optional base DN pattern that identifies portions of the DIT in which entries to index may exist.",
                    "type": "string"
                }
            }
        },
        "local-db-composite-index-properties": {
            "id": "local-db-composite-index-properties",
            "description": "Local DB Composite Index properties",
            "properties": {
                "schemas": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "enum": [
                            "urn:pingidentity:schemas:configuration:2.0:local-db-composite-index"
                        ]
                    }
                },
                "primeInternalNodesOnly": {
                    "description": "Indicates whether to only prime the internal nodes of the index database, rather than priming both internal and leaf nodes.",
                    "type": "boolean"
                }
                ,
                "cacheMode": {
                    "description": "The behavior that the server should exhibit when storing information from this index in the database cache.",
                    "type": "string"
                    , "enum": [
                        "cache-keys-and-values"
                        ,
                        "cache-keys-only"
                        ,
                        "no-caching"
                    ]
                }
                ,
                "description": {
                    "description": "A description for this Local DB Composite Index",
                    "type": "string"
                }
                ,
                "indexFilterPattern": {
                    "description": "A filter pattern that identifies which entries to include in the index.",
                    "type": "string"
                }
                ,
                "indexEntryLimit": {
                    "description": "The maximum number of entries that any single index key will be allowed to match before the server stops maintaining the ID set for that index key.",
                    "type": "integer"
                }
                ,
                "primeIndex": {
                    "description": "Indicates whether the server should load the contents of this index into memory when the backend is being opened.",
                    "type": "boolean"
                }
                ,
                "indexBaseDNPattern": {
                    "description": "An optional base DN pattern that identifies portions of the DIT in which entries to index may exist.",
                    "type": "string"
                }
            }
        }
        ,
        "local-db-vlv-index-list-response": {
            "id": "local-db-vlv-index-list-response",
            "description": "Local DB VLV Index list response",
            "required": [
                "schemas",
                "totalResults"
            ],
            "properties": {
                "schemas": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "enum": [
                            "urn:ietf:params:scim:api:messages:2.0:ListResponse"
                        ]
                    }
                },
                "totalResults": {
                    "type": "integer"
                },
                "Resources": {
                    "type": "array",
                    "items": {
                        "$ref": "local-db-vlv-index-response"
                    }
                }
            }
        },
        "add-local-db-vlv-index-request": {
            "id": "add-local-db-vlv-index-request",
            "description": "A Local DB VLV Index resource request",
            "required": [
                "indexName"
            ],
            "properties": {
                "indexName": {
                    "type": "string",
                    "description": "Name of the new Local DB VLV Index"
                },
                "schemas": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "enum": [
                            "urn:pingidentity:schemas:configuration:2.0:local-db-vlv-index"
                        ]
                    }
                },
                "filter": {
                    "description": "Specifies the LDAP filter used in the query that is being indexed.",
                    "type": "string"
                }
                ,
                "maxBlockSize": {
                    "description": "Specifies the number of entry IDs to store in a single sorted set before it must be split.",
                    "type": "integer"
                }
                ,
                "scope": {
                    "description": "Specifies the LDAP scope of the query that is being indexed.",
                    "type": "string"
                    , "enum": [
                        "base-object"
                        ,
                        "single-level"
                        ,
                        "whole-subtree"
                        ,
                        "subordinate-subtree"
                    ]
                }
                ,
                "sortOrder": {
                    "description": "Specifies the names of the attributes that are used to sort the entries for the query being indexed.",
                    "type": "string"
                }
                ,
                "name": {
                    "description": "Specifies a unique name for this VLV index.",
                    "type": "string"
                }
                ,
                "cacheMode": {
                    "description": "Specifies the cache mode that should be used when accessing the records in the database for this index.",
                    "type": "string"
                    , "enum": [
                        "cache-keys-and-values"
                        ,
                        "cache-keys-only"
                        ,
                        "no-caching"
                        ,
                        "keep-hot"
                        ,
                        "default"
                        ,
                        "make-cold"
                        ,
                        "evict-leaf-immediately"
                        ,
                        "evict-bin-immediately"
                    ]
                }
                ,
                "baseDN": {
                    "description": "Specifies the base DN used in the search query that is being indexed.",
                    "type": "string"
                }
            }
        },
        "local-db-vlv-index-response": {
            "id": "local-db-vlv-index-response",
            "description": "A Local DB VLV Index resource response",
            "required": [
                "id"
            ],
            "properties": {
                "schemas": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "enum": [
                            "urn:pingidentity:schemas:configuration:2.0:local-db-vlv-index"
                        ]
                    }
                },
                "id": {
                    "type": "string",
                    "description": "Name of the Local DB VLV Index"
                },
                "meta": {
                    "$ref": "Meta"
                },
                "urn:pingidentity:schemas:configuration:messages:2.0": {
                    "$ref": "Messages"
                },
                "filter": {
                    "description": "Specifies the LDAP filter used in the query that is being indexed.",
                    "type": "string"
                }
                ,
                "maxBlockSize": {
                    "description": "Specifies the number of entry IDs to store in a single sorted set before it must be split.",
                    "type": "integer"
                }
                ,
                "scope": {
                    "description": "Specifies the LDAP scope of the query that is being indexed.",
                    "type": "string"
                    , "enum": [
                        "base-object"
                        ,
                        "single-level"
                        ,
                        "whole-subtree"
                        ,
                        "subordinate-subtree"
                    ]
                }
                ,
                "sortOrder": {
                    "description": "Specifies the names of the attributes that are used to sort the entries for the query being indexed.",
                    "type": "string"
                }
                ,
                "name": {
                    "description": "Specifies a unique name for this VLV index.",
                    "type": "string"
                }
                ,
                "cacheMode": {
                    "description": "Specifies the cache mode that should be used when accessing the records in the database for this index.",
                    "type": "string"
                    , "enum": [
                        "cache-keys-and-values"
                        ,
                        "cache-keys-only"
                        ,
                        "no-caching"
                        ,
                        "keep-hot"
                        ,
                        "default"
                        ,
                        "make-cold"
                        ,
                        "evict-leaf-immediately"
                        ,
                        "evict-bin-immediately"
                    ]
                }
                ,
                "baseDN": {
                    "description": "Specifies the base DN used in the search query that is being indexed.",
                    "type": "string"
                }
            }
        },
        "local-db-vlv-index-properties": {
            "id": "local-db-vlv-index-properties",
            "description": "Local DB VLV Index properties",
            "properties": {
                "schemas": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "enum": [
                            "urn:pingidentity:schemas:configuration:2.0:local-db-vlv-index"
                        ]
                    }
                },
                "filter": {
                    "description": "Specifies the LDAP filter used in the query that is being indexed.",
                    "type": "string"
                }
                ,
                "maxBlockSize": {
                    "description": "Specifies the number of entry IDs to store in a single sorted set before it must be split.",
                    "type": "integer"
                }
                ,
                "scope": {
                    "description": "Specifies the LDAP scope of the query that is being indexed.",
                    "type": "string"
                    , "enum": [
                        "base-object"
                        ,
                        "single-level"
                        ,
                        "whole-subtree"
                        ,
                        "subordinate-subtree"
                    ]
                }
                ,
                "sortOrder": {
                    "description": "Specifies the names of the attributes that are used to sort the entries for the query being indexed.",
                    "type": "string"
                }
                ,
                "name": {
                    "description": "Specifies a unique name for this VLV index.",
                    "type": "string"
                }
                ,
                "cacheMode": {
                    "description": "Specifies the cache mode that should be used when accessing the records in the database for this index.",
                    "type": "string"
                    , "enum": [
                        "cache-keys-and-values"
                        ,
                        "cache-keys-only"
                        ,
                        "no-caching"
                        ,
                        "keep-hot"
                        ,
                        "default"
                        ,
                        "make-cold"
                        ,
                        "evict-leaf-immediately"
                        ,
                        "evict-bin-immediately"
                    ]
                }
                ,
                "baseDN": {
                    "description": "Specifies the base DN used in the search query that is being indexed.",
                    "type": "string"
                }
            }
        }
        ,
        "local-db-index-list-response": {
            "id": "local-db-index-list-response",
            "description": "Local DB Index list response",
            "required": [
                "schemas",
                "totalResults"
            ],
            "properties": {
                "schemas": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "enum": [
                            "urn:ietf:params:scim:api:messages:2.0:ListResponse"
                        ]
                    }
                },
                "totalResults": {
                    "type": "integer"
                },
                "Resources": {
                    "type": "array",
                    "items": {
                        "$ref": "local-db-index-response"
                    }
                }
            }
        },
        "add-local-db-index-request": {
            "id": "add-local-db-index-request",
            "description": "A Local DB Index resource request",
            "required": [
                "indexName"
            ],
            "properties": {
                "indexName": {
                    "type": "string",
                    "description": "Name of the new Local DB Index"
                },
                "schemas": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "enum": [
                            "urn:pingidentity:schemas:configuration:2.0:local-db-index"
                        ]
                    }
                },
                "maintainMatchCountForKeysExceedingEntryLimit": {
                    "description": "Indicates whether to continue to maintain a count of the number of matching entries for an index key even after that count exceeds the index entry limit.",
                    "type": "boolean"
                }
                ,
                "indexType": {
                    "description": "Specifies the type(s) of indexing that should be performed for the associated attribute.",
                    "type": "array",
                    "items": {
                        "type": "string"
                        , "enum": [
                            "equality"
                            ,
                            "ordering"
                            ,
                            "presence"
                            ,
                            "substring"
                            ,
                            "approximate"
                        ]
                    }
                }
                ,
                "equalityIndexFilter": {
                    "description": "A search filter that may be used in conjunction with an equality component for the associated attribute type. If an equality index filter is defined, then an additional equality index will be maintained for the associated attribute, but only for entries which match the provided filter. Further, the index will be used only for searches containing an equality component with the associated attribute type ANDed with this filter.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
                ,
                "primeInternalNodesOnly": {
                    "description": "If this option is enabled and this index's backend is configured to prime indexes using the preload method, then only the internal database nodes (i.e., the database keys but not values) should be primed when the backend is initialized.",
                    "type": "boolean"
                }
                ,
                "substringLength": {
                    "description": "The length of substrings in a substring index.",
                    "type": "integer"
                }
                ,
                "cacheMode": {
                    "description": "Specifies the cache mode that should be used when accessing the records in the database for this index. This controls how much database cache memory can be consumed by this index.",
                    "type": "string"
                    , "enum": [
                        "cache-keys-and-values"
                        ,
                        "cache-keys-only"
                        ,
                        "no-caching"
                        ,
                        "keep-hot"
                        ,
                        "default"
                        ,
                        "make-cold"
                        ,
                        "evict-leaf-immediately"
                        ,
                        "evict-bin-immediately"
                    ]
                }
                ,
                "attribute": {
                    "description": "Specifies the name of the attribute for which the index is to be maintained.",
                    "type": "string"
                }
                ,
                "indexEntryLimit": {
                    "description": "Specifies the maximum number of entries that are allowed to match a given index key before that particular index key is no longer maintained.",
                    "type": "integer"
                }
                ,
                "substringIndexEntryLimit": {
                    "description": "Specifies, for substring indexes, the maximum number of entries that are allowed to match a given index key before that particular index key is no longer maintained. Setting a large limit can dramatically increase the database size on disk and have a big impact on server performance if the indexed attribute is modified frequently. When a very large limit is required, creating a dedicated composite index with an index-filter-pattern of (attr=*?*) will give the best balance between search and update performance.",
                    "type": "integer"
                }
                ,
                "primeIndex": {
                    "description": "If this option is enabled and this index's backend is configured to prime indexes, then this index will be loaded at startup.",
                    "type": "boolean"
                }
                ,
                "maintainEqualityIndexWithoutFilter": {
                    "description": "Indicates whether to maintain a separate equality index for the associated attribute without any filter, in addition to maintaining an index for each equality index filter that is defined. If this is false, then the attribute will not be indexed for equality by itself but only in conjunction with the defined equality index filters.",
                    "type": "boolean"
                }
            }
        },
        "local-db-index-response": {
            "id": "local-db-index-response",
            "description": "A Local DB Index resource response",
            "required": [
                "id"
            ],
            "properties": {
                "schemas": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "enum": [
                            "urn:pingidentity:schemas:configuration:2.0:local-db-index"
                        ]
                    }
                },
                "id": {
                    "type": "string",
                    "description": "Name of the Local DB Index"
                },
                "meta": {
                    "$ref": "Meta"
                },
                "urn:pingidentity:schemas:configuration:messages:2.0": {
                    "$ref": "Messages"
                },
                "maintainMatchCountForKeysExceedingEntryLimit": {
                    "description": "Indicates whether to continue to maintain a count of the number of matching entries for an index key even after that count exceeds the index entry limit.",
                    "type": "boolean"
                }
                ,
                "indexType": {
                    "description": "Specifies the type(s) of indexing that should be performed for the associated attribute.",
                    "type": "array",
                    "items": {
                        "type": "string"
                        , "enum": [
                            "equality"
                            ,
                            "ordering"
                            ,
                            "presence"
                            ,
                            "substring"
                            ,
                            "approximate"
                        ]
                    }
                }
                ,
                "equalityIndexFilter": {
                    "description": "A search filter that may be used in conjunction with an equality component for the associated attribute type. If an equality index filter is defined, then an additional equality index will be maintained for the associated attribute, but only for entries which match the provided filter. Further, the index will be used only for searches containing an equality component with the associated attribute type ANDed with this filter.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
                ,
                "primeInternalNodesOnly": {
                    "description": "If this option is enabled and this index's backend is configured to prime indexes using the preload method, then only the internal database nodes (i.e., the database keys but not values) should be primed when the backend is initialized.",
                    "type": "boolean"
                }
                ,
                "substringLength": {
                    "description": "The length of substrings in a substring index.",
                    "type": "integer"
                }
                ,
                "cacheMode": {
                    "description": "Specifies the cache mode that should be used when accessing the records in the database for this index. This controls how much database cache memory can be consumed by this index.",
                    "type": "string"
                    , "enum": [
                        "cache-keys-and-values"
                        ,
                        "cache-keys-only"
                        ,
                        "no-caching"
                        ,
                        "keep-hot"
                        ,
                        "default"
                        ,
                        "make-cold"
                        ,
                        "evict-leaf-immediately"
                        ,
                        "evict-bin-immediately"
                    ]
                }
                ,
                "attribute": {
                    "description": "Specifies the name of the attribute for which the index is to be maintained.",
                    "type": "string"
                }
                ,
                "indexEntryLimit": {
                    "description": "Specifies the maximum number of entries that are allowed to match a given index key before that particular index key is no longer maintained.",
                    "type": "integer"
                }
                ,
                "substringIndexEntryLimit": {
                    "description": "Specifies, for substring indexes, the maximum number of entries that are allowed to match a given index key before that particular index key is no longer maintained. Setting a large limit can dramatically increase the database size on disk and have a big impact on server performance if the indexed attribute is modified frequently. When a very large limit is required, creating a dedicated composite index with an index-filter-pattern of (attr=*?*) will give the best balance between search and update performance.",
                    "type": "integer"
                }
                ,
                "primeIndex": {
                    "description": "If this option is enabled and this index's backend is configured to prime indexes, then this index will be loaded at startup.",
                    "type": "boolean"
                }
                ,
                "maintainEqualityIndexWithoutFilter": {
                    "description": "Indicates whether to maintain a separate equality index for the associated attribute without any filter, in addition to maintaining an index for each equality index filter that is defined. If this is false, then the attribute will not be indexed for equality by itself but only in conjunction with the defined equality index filters.",
                    "type": "boolean"
                }
            }
        },
        "local-db-index-properties": {
            "id": "local-db-index-properties",
            "description": "Local DB Index properties",
            "properties": {
                "schemas": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "enum": [
                            "urn:pingidentity:schemas:configuration:2.0:local-db-index"
                        ]
                    }
                },
                "maintainMatchCountForKeysExceedingEntryLimit": {
                    "description": "Indicates whether to continue to maintain a count of the number of matching entries for an index key even after that count exceeds the index entry limit.",
                    "type": "boolean"
                }
                ,
                "indexType": {
                    "description": "Specifies the type(s) of indexing that should be performed for the associated attribute.",
                    "type": "array",
                    "items": {
                        "type": "string"
                        , "enum": [
                            "equality"
                            ,
                            "ordering"
                            ,
                            "presence"
                            ,
                            "substring"
                            ,
                            "approximate"
                        ]
                    }
                }
                ,
                "equalityIndexFilter": {
                    "description": "A search filter that may be used in conjunction with an equality component for the associated attribute type. If an equality index filter is defined, then an additional equality index will be maintained for the associated attribute, but only for entries which match the provided filter. Further, the index will be used only for searches containing an equality component with the associated attribute type ANDed with this filter.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
                ,
                "primeInternalNodesOnly": {
                    "description": "If this option is enabled and this index's backend is configured to prime indexes using the preload method, then only the internal database nodes (i.e., the database keys but not values) should be primed when the backend is initialized.",
                    "type": "boolean"
                }
                ,
                "substringLength": {
                    "description": "The length of substrings in a substring index.",
                    "type": "integer"
                }
                ,
                "cacheMode": {
                    "description": "Specifies the cache mode that should be used when accessing the records in the database for this index. This controls how much database cache memory can be consumed by this index.",
                    "type": "string"
                    , "enum": [
                        "cache-keys-and-values"
                        ,
                        "cache-keys-only"
                        ,
                        "no-caching"
                        ,
                        "keep-hot"
                        ,
                        "default"
                        ,
                        "make-cold"
                        ,
                        "evict-leaf-immediately"
                        ,
                        "evict-bin-immediately"
                    ]
                }
                ,
                "attribute": {
                    "description": "Specifies the name of the attribute for which the index is to be maintained.",
                    "type": "string"
                }
                ,
                "indexEntryLimit": {
                    "description": "Specifies the maximum number of entries that are allowed to match a given index key before that particular index key is no longer maintained.",
                    "type": "integer"
                }
                ,
                "substringIndexEntryLimit": {
                    "description": "Specifies, for substring indexes, the maximum number of entries that are allowed to match a given index key before that particular index key is no longer maintained. Setting a large limit can dramatically increase the database size on disk and have a big impact on server performance if the indexed attribute is modified frequently. When a very large limit is required, creating a dedicated composite index with an index-filter-pattern of (attr=*?*) will give the best balance between search and update performance.",
                    "type": "integer"
                }
                ,
                "primeIndex": {
                    "description": "If this option is enabled and this index's backend is configured to prime indexes, then this index will be loaded at startup.",
                    "type": "boolean"
                }
                ,
                "maintainEqualityIndexWithoutFilter": {
                    "description": "Indicates whether to maintain a separate equality index for the associated attribute without any filter, in addition to maintaining an index for each equality index filter that is defined. If this is false, then the attribute will not be indexed for equality by itself but only in conjunction with the defined equality index filters.",
                    "type": "boolean"
                }
            }
        }
    }
}
