{
    "apiVersion": "9.2.0.0",
    "swaggerVersion": "1.2",
    "basePath": "https://localhost:1443/config",
    "authorizations": {
        "basic": {
            "type": "basicAuth"
        }
    },
    "apis": [
        {
            "path": "/virtual-attributes",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Returns a list of all Virtual Attribute objects",
                    "type": "virtual-attribute-list-response",
                    "nickname": "list-virtual-attributes",
                    "parameters": [
                        {
                            "paramType": "query",
                            "name": "filter",
                            "description": "SCIM filter",
                            "required": false,
                            "type": "string"
                        },
                        {
                            "paramType": "query",
                            "name": "sortBy",
                            "description": "Specifies a property value by which to sort",
                            "required": false,
                            "type": "string"
                        },
                        {
                            "paramType": "query",
                            "name": "sortOrder",
                            "description": "Specifies either ascending or descending alphabetical order",
                            "required": false,
                            "type": "string",
                            "enum": [
                                "ascending",
                                "descending"
                            ]
                        },
                        {
                            "paramType": "query",
                            "name": "startIndex",
                            "description": "1-based index of the first result to return",
                            "required": false,
                            "type": "string"
                        },
                        {
                            "paramType": "query",
                            "name": "count",
                            "description": "Indicates the number of results per page",
                            "required": false,
                            "type": "string"
                        },
                        {
                            "paramType": "query",
                            "name": "attributes",
                            "description": "Comma-separated list of attributes to include in the response",
                            "required": false,
                            "type": "string"
                        },
                        {
                            "paramType": "query",
                            "name": "excludeAttributes",
                            "description": "Comma-separated list of attributes to exclude from the response",
                            "required": false,
                            "type": "string"
                        }
                    ],
                    "responseMessages": [
                        {
                            "code": 200,
                            "message": "The requested operation succeeded"
                        },
                        {
                            "code": 204,
                            "message": "The requested operation succeeded and no further information has been provided, such as in the case of a DELETE operation."
                        },
                        {
                            "code": 400,
                            "message": "The request contents are incorrectly formatted or the request was made for an invalid API version."
                        },
                        {
                            "code": 401,
                            "message": "The requester cannot be authenticated"
                        },
                        {
                            "code": 403,
                            "message": "The requester does not have the required privileges or another constraint failed, such as attempting to delete an edit-only object."
                        },
                        {
                            "code": 404,
                            "message": "The requested path does not refer to an existing object or object relation."
                        },
                        {
                            "code": 409,
                            "message": "The requested operation could not be performed due to the current state of the configuration. For example, an attempt was made to create an object that already exists or an attempt was made to delete an object that is referred to by another object."
                        },
                        {
                            "code": 415,
                            "message": "The request is such that the Accept header does not indicate that JSON is an acceptable format for a response."
                        },
                        {
                            "code": 500,
                            "message": "The server encountered an unexpected error."
                        }
                    ]
                },
                {
                    "method": "POST",
                    "summary": "Add a new Virtual Attribute to the config",
                    "nickname": "add-virtual-attribute",
                    "type": "virtual-attribute-response",
                    "parameters": [
                        {
                            "paramType": "body",
                            "required": true,
                            "description": "Virtual Attribute to add",
                            "name": "add-virtual-attribute-request",
                            "type": "add-virtual-attribute-request"
                        },
                        {
                            "paramType": "query",
                            "name": "attributes",
                            "description": "Comma-separated list of attributes to include in the response",
                            "required": false,
                            "type": "string"
                        },
                        {
                            "paramType": "query",
                            "name": "excludeAttributes",
                            "description": "Comma-separated list of attributes to exclude from the response",
                            "required": false,
                            "type": "string"
                        },
                        {
                            "paramType": "query",
                            "name": "applyChangeTo",
                            "description": "Specify whether to apply this configuration change to a single server or the whole server group. This does not apply to mirrored subtree objects",
                            "required": false,
                            "type": "string",
                            "enum": [
                                "singleServer",
                                "serverGroup"
                            ]
                        }
                    ],
                    "responseMessages": [
                        {
                            "code": 200,
                            "message": "The requested operation succeeded"
                        },
                        {
                            "code": 204,
                            "message": "The requested operation succeeded and no further information has been provided, such as in the case of a DELETE operation."
                        },
                        {
                            "code": 400,
                            "message": "The request contents are incorrectly formatted or the request was made for an invalid API version."
                        },
                        {
                            "code": 401,
                            "message": "The requester cannot be authenticated"
                        },
                        {
                            "code": 403,
                            "message": "The requester does not have the required privileges or another constraint failed, such as attempting to delete an edit-only object."
                        },
                        {
                            "code": 404,
                            "message": "The requested path does not refer to an existing object or object relation."
                        },
                        {
                            "code": 409,
                            "message": "The requested operation could not be performed due to the current state of the configuration. For example, an attempt was made to create an object that already exists or an attempt was made to delete an object that is referred to by another object."
                        },
                        {
                            "code": 415,
                            "message": "The request is such that the Accept header does not indicate that JSON is an acceptable format for a response."
                        },
                        {
                            "code": 500,
                            "message": "The server encountered an unexpected error."
                        }
                    ]
                }
            ]
        },
        {
            "path": "/virtual-attributes/{virtual-attribute-name}",
            "operations": [
                {
                    "method": "GET",
                    "summary": "Returns a single Virtual Attribute",
                    "type": "virtual-attribute-response",
                    "nickname": "get-virtual-attribute",
                    "parameters": [
                        {
                            "paramType": "query",
                            "name": "attributes",
                            "description": "Comma-separated list of attributes to include in the response",
                            "required": false,
                            "type": "string"
                        },
                        {
                            "paramType": "query",
                            "name": "excludeAttributes",
                            "description": "Comma-separated list of attributes to exclude from the response",
                            "required": false,
                            "type": "string"
                        },
                        {
                          "name": "virtual-attribute-name",
                          "description": "Name of the Virtual Attribute",
                          "required": true,
                          "type": "string",
                          "paramType": "path"
                        }
                    ],
                    "responseMessages": [
                        {
                            "code": 200,
                            "message": "The requested operation succeeded"
                        },
                        {
                            "code": 204,
                            "message": "The requested operation succeeded and no further information has been provided, such as in the case of a DELETE operation."
                        },
                        {
                            "code": 400,
                            "message": "The request contents are incorrectly formatted or the request was made for an invalid API version."
                        },
                        {
                            "code": 401,
                            "message": "The requester cannot be authenticated"
                        },
                        {
                            "code": 403,
                            "message": "The requester does not have the required privileges or another constraint failed, such as attempting to delete an edit-only object."
                        },
                        {
                            "code": 404,
                            "message": "The requested path does not refer to an existing object or object relation."
                        },
                        {
                            "code": 409,
                            "message": "The requested operation could not be performed due to the current state of the configuration. For example, an attempt was made to create an object that already exists or an attempt was made to delete an object that is referred to by another object."
                        },
                        {
                            "code": 415,
                            "message": "The request is such that the Accept header does not indicate that JSON is an acceptable format for a response."
                        },
                        {
                            "code": 500,
                            "message": "The server encountered an unexpected error."
                        }
                    ]
                },
                {
                    "method": "PUT",
                    "summary": "Update an existing Virtual Attribute by name, replacing any attributes specified in the request body",
                    "type": "virtual-attribute-response",
                    "nickname": "put-virtual-attribute",
                    "parameters": [
                        {
                            "paramType": "query",
                            "name": "attributes",
                            "description": "Comma-separated list of attributes to include in the response",
                            "required": false,
                            "type": "string"
                        },
                        {
                            "paramType": "query",
                            "name": "excludeAttributes",
                            "description": "Comma-separated list of attributes to exclude from the response",
                            "required": false,
                            "type": "string"
                        },
                        {
                            "paramType": "query",
                            "name": "applyChangeTo",
                            "description": "Specify whether to apply this configuration change to a single server or the whole server group. This does not apply to mirrored subtree objects",
                            "required": false,
                            "type": "string",
                            "enum": [
                                "singleServer",
                                "serverGroup"
                            ]
                        },
                        {
                          "name": "virtual-attribute-name",
                          "description": "Name of the Virtual Attribute",
                          "required": true,
                          "type": "string",
                          "paramType": "path"
                        },
                        {
                            "paramType": "body",
                            "required": true,
                            "description": "Virtual Attribute attributes to update",
                            "name": "virtual-attribute-properties",
                            "type": "virtual-attribute-properties"
                        }
                    ],
                    "responseMessages": [
                        {
                            "code": 200,
                            "message": "The requested operation succeeded"
                        },
                        {
                            "code": 204,
                            "message": "The requested operation succeeded and no further information has been provided, such as in the case of a DELETE operation."
                        },
                        {
                            "code": 400,
                            "message": "The request contents are incorrectly formatted or the request was made for an invalid API version."
                        },
                        {
                            "code": 401,
                            "message": "The requester cannot be authenticated"
                        },
                        {
                            "code": 403,
                            "message": "The requester does not have the required privileges or another constraint failed, such as attempting to delete an edit-only object."
                        },
                        {
                            "code": 404,
                            "message": "The requested path does not refer to an existing object or object relation."
                        },
                        {
                            "code": 409,
                            "message": "The requested operation could not be performed due to the current state of the configuration. For example, an attempt was made to create an object that already exists or an attempt was made to delete an object that is referred to by another object."
                        },
                        {
                            "code": 415,
                            "message": "The request is such that the Accept header does not indicate that JSON is an acceptable format for a response."
                        },
                        {
                            "code": 500,
                            "message": "The server encountered an unexpected error."
                        }
                    ]
                },
                {
                    "method": "PATCH",
                    "summary": "Update an existing Virtual Attribute by name, using a SCIM patch request",
                    "type": "virtual-attribute-response",
                    "nickname": "patch-virtual-attribute",
                    "parameters": [
                        {
                            "paramType": "query",
                            "name": "attributes",
                            "description": "Comma-separated list of attributes to include in the response",
                            "required": false,
                            "type": "string"
                        },
                        {
                            "paramType": "query",
                            "name": "excludeAttributes",
                            "description": "Comma-separated list of attributes to exclude from the response",
                            "required": false,
                            "type": "string"
                        },
                        {
                            "paramType": "query",
                            "name": "applyChangeTo",
                            "description": "Specify whether to apply this configuration change to a single server or the whole server group. This does not apply to mirrored subtree objects",
                            "required": false,
                            "type": "string",
                            "enum": [
                                "singleServer",
                                "serverGroup"
                            ]
                        },
                        {
                          "name": "virtual-attribute-name",
                          "description": "Name of the Virtual Attribute",
                          "required": true,
                          "type": "string",
                          "paramType": "path"
                        },
                        {
                            "paramType": "body",
                            "required": true,
                            "description": "SCIM operations to apply to the Virtual Attribute",
                            "name": "Operations",
                            "type": "Operations"
                        }
                    ],
                    "responseMessages": [
                        {
                            "code": 200,
                            "message": "The requested operation succeeded"
                        },
                        {
                            "code": 204,
                            "message": "The requested operation succeeded and no further information has been provided, such as in the case of a DELETE operation."
                        },
                        {
                            "code": 400,
                            "message": "The request contents are incorrectly formatted or the request was made for an invalid API version."
                        },
                        {
                            "code": 401,
                            "message": "The requester cannot be authenticated"
                        },
                        {
                            "code": 403,
                            "message": "The requester does not have the required privileges or another constraint failed, such as attempting to delete an edit-only object."
                        },
                        {
                            "code": 404,
                            "message": "The requested path does not refer to an existing object or object relation."
                        },
                        {
                            "code": 409,
                            "message": "The requested operation could not be performed due to the current state of the configuration. For example, an attempt was made to create an object that already exists or an attempt was made to delete an object that is referred to by another object."
                        },
                        {
                            "code": 415,
                            "message": "The request is such that the Accept header does not indicate that JSON is an acceptable format for a response."
                        },
                        {
                            "code": 500,
                            "message": "The server encountered an unexpected error."
                        }
                    ]
                },
                {
                    "method": "DELETE",
                    "summary": "Delete a Virtual Attribute",
                    "nickname": "delete-virtual-attribute",
                    "parameters": [
                        {
                          "name": "virtual-attribute-name",
                          "description": "Name of the Virtual Attribute",
                          "required": true,
                          "type": "string",
                          "paramType": "path"
                        }
                    ],
                    "responseMessages": [
                        {
                            "code": 200,
                            "message": "The requested operation succeeded"
                        },
                        {
                            "code": 204,
                            "message": "The requested operation succeeded and no further information has been provided, such as in the case of a DELETE operation."
                        },
                        {
                            "code": 400,
                            "message": "The request contents are incorrectly formatted or the request was made for an invalid API version."
                        },
                        {
                            "code": 401,
                            "message": "The requester cannot be authenticated"
                        },
                        {
                            "code": 403,
                            "message": "The requester does not have the required privileges or another constraint failed, such as attempting to delete an edit-only object."
                        },
                        {
                            "code": 404,
                            "message": "The requested path does not refer to an existing object or object relation."
                        },
                        {
                            "code": 409,
                            "message": "The requested operation could not be performed due to the current state of the configuration. For example, an attempt was made to create an object that already exists or an attempt was made to delete an object that is referred to by another object."
                        },
                        {
                            "code": 415,
                            "message": "The request is such that the Accept header does not indicate that JSON is an acceptable format for a response."
                        },
                        {
                            "code": 500,
                            "message": "The server encountered an unexpected error."
                        }
                    ]
                }
            ]
        }

    ],
    "models": {
        "Meta": {
            "id": "Meta",
            "properties": {
                "resourceType": {
                    "type": "string"
                },
                "location": {
                    "type": "string"
                }
            }
        },
        "Messages": {
            "id": "Messages",
            "properties": {
                "notifications": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "requiredActions": {
                    "type": "array",
                    "items": {
                        "$ref": "RequiredAction"
                    }
                }
            }
        },
        "RequiredAction": {
            "id": "RequiredAction",
            "required": [
                "type",
                "synopsis"
            ],
            "properties": {
                "property": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "synopsis": {
                    "type": "string"
                }
            }
        },
        "Operations": {
            "id": "Operations",
            "required": [
                "operations"
            ],
            "properties": {
                "operations": {
                    "type": "array",
                    "items": {
                        "$ref": "Operation"
                    }
                }
            }
        },
        "Operation": {
            "id": "Operation",
            "required": [
                "op",
                "path"
            ],
            "properties": {
                "op": {
                    "type": "string",
                    "enum": [
                        "add",
                        "remove",
                        "replace"
                    ]
                },
                "path": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "virtual-attribute-list-response": {
            "id": "virtual-attribute-list-response",
            "description": "Virtual Attribute list response",
            "required": [
                "schemas",
                "totalResults"
            ],
            "properties": {
                "schemas": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "enum": [
                            "urn:ietf:params:scim:api:messages:2.0:ListResponse"
                        ]
                    }
                },
                "totalResults": {
                    "type": "integer"
                },
                "Resources": {
                    "type": "array",
                    "items": {
                        "$ref": "virtual-attribute-response"
                    }
                }
            }
        },
        "add-virtual-attribute-request": {
            "id": "add-virtual-attribute-request",
            "description": "A Virtual Attribute resource request",
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the new Virtual Attribute"
                },
                "schemas": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "enum": [
                            "urn:pingidentity:schemas:configuration:2.0:virtual-attribute:mirror"
                            ,
                            "urn:pingidentity:schemas:configuration:2.0:virtual-attribute:entry-checksum"
                            ,
                            "urn:pingidentity:schemas:configuration:2.0:virtual-attribute:member-of-server-group"
                            ,
                            "urn:pingidentity:schemas:configuration:2.0:virtual-attribute:constructed"
                            ,
                            "urn:pingidentity:schemas:configuration:2.0:virtual-attribute:is-member-of"
                            ,
                            "urn:pingidentity:schemas:configuration:2.0:virtual-attribute:custom"
                            ,
                            "urn:pingidentity:schemas:configuration:2.0:virtual-attribute:num-subordinates"
                            ,
                            "urn:pingidentity:schemas:configuration:2.0:virtual-attribute:reverse-dn-join"
                            ,
                            "urn:pingidentity:schemas:configuration:2.0:virtual-attribute:identify-references"
                            ,
                            "urn:pingidentity:schemas:configuration:2.0:virtual-attribute:user-defined"
                            ,
                            "urn:pingidentity:schemas:configuration:2.0:virtual-attribute:current-time"
                            ,
                            "urn:pingidentity:schemas:configuration:2.0:virtual-attribute:short-unique-id"
                            ,
                            "urn:pingidentity:schemas:configuration:2.0:virtual-attribute:entry-dn"
                            ,
                            "urn:pingidentity:schemas:configuration:2.0:virtual-attribute:has-subordinates"
                            ,
                            "urn:pingidentity:schemas:configuration:2.0:virtual-attribute:equality-join"
                            ,
                            "urn:pingidentity:schemas:configuration:2.0:virtual-attribute:groovy-scripted"
                            ,
                            "urn:pingidentity:schemas:configuration:2.0:virtual-attribute:instance-name"
                            ,
                            "urn:pingidentity:schemas:configuration:2.0:virtual-attribute:replication-state-detail"
                            ,
                            "urn:pingidentity:schemas:configuration:2.0:virtual-attribute:member"
                            ,
                            "urn:pingidentity:schemas:configuration:2.0:virtual-attribute:password-policy-state-json"
                            ,
                            "urn:pingidentity:schemas:configuration:2.0:virtual-attribute:subschema-subentry"
                            ,
                            "urn:pingidentity:schemas:configuration:2.0:virtual-attribute:dn-join"
                            ,
                            "urn:pingidentity:schemas:configuration:2.0:virtual-attribute:third-party"
                        ]
                    }
                },
                "extensionClass": {
                    "description": "The fully-qualified name of the Java class providing the logic for the Third Party Virtual Attribute.",
                    "type": "string"
                }
                ,
                "multipleVirtualAttributeEvaluationOrderIndex": {
                    "description": "Specifies the order in which virtual attribute definitions for the same attribute type will be evaluated when generating values for an entry.",
                    "type": "integer"
                }
                ,
                "sequenceNumberAttribute": {
                    "description": "Specifies the name or OID of the attribute which contains the sequence number from which unique identifiers are generated. The attribute should have Integer syntax or a String syntax permitting integer values. If this property is modified then the filter property should be updated accordingly so that only entries containing the sequence number attribute are eligible to have a value generated for this virtual attribute.",
                    "type": "string"
                }
                ,
                "excludedAttribute": {
                    "description": "Specifies the attributes that should be excluded from the checksum calculation.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
                ,
                "description": {
                    "description": "A description for this Virtual Attribute",
                    "type": "string"
                }
                ,
                "joinFilter": {
                    "description": "An optional filter that specifies additional criteria for identifying joined entries. If a join-filter value is specified, then only entries matching that filter (in addition to satisfying the other join criteria) will be joined with the search result entry.",
                    "type": "string"
                }
                ,
                "enabled": {
                    "description": "Indicates whether the Virtual Attribute is enabled for use.",
                    "type": "boolean"
                }
                ,
                "extensionArgument": {
                    "description": "The set of arguments used to customize the behavior for the Third Party Virtual Attribute. Each configuration property should be given in the form 'name=value'.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
                ,
                "joinAttribute": {
                    "description": "An optional set of the names of the attributes to include with joined entries.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
                ,
                "referenceSearchBaseDN": {
                    "description": "The base DN that will be used when searching for references to the target entry. If no reference search base DN is specified, the default behavior will be to search below all public naming contexts configured in the server.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
                ,
                "directMembershipsOnly": {
                    "description": "Specifies whether to only include groups in which the user is directly associated with and the membership maybe modified via the group entry. Groups in which the user's membership is derived dynamically or through nested groups will not be included.",
                    "type": "boolean"
                }
                ,
                "includedGroupFilter": {
                    "description": "A search filter that will be used to identify which groups should be included in the values of the virtual attribute. With no value defined (which is the default behavior), all groups that contain the target user will be included.",
                    "type": "string"
                }
                ,
                "joinSizeLimit": {
                    "description": "The maximum number of entries that may be joined with the source entry, which also corresponds to the maximum number of values that the virtual attribute provider will generate for an entry.",
                    "type": "integer"
                }
                ,
                "joinCustomBaseDN": {
                    "description": "The fixed, administrator-specified base DN for the internal searches used to identify joined entries.",
                    "type": "string"
                }
                ,
                "attributeType": {
                    "description": "Specifies the attribute type for the attribute whose values are to be dynamically assigned by the virtual attribute.",
                    "type": "string"
                }
                ,
                "joinScope": {
                    "description": "The scope for searches used to identify joined entries.",
                    "type": "string"
                    , "enum": [
                        "base-object"
                        ,
                        "single-level"
                        ,
                        "whole-subtree"
                        ,
                        "subordinate-subtree"
                    ]
                }
                ,
                "sourceEntryDNAttribute": {
                    "description": "Specifies the attribute containing the DN of another entry from which to obtain the source attribute providing the values for this virtual attribute.",
                    "type": "string"
                }
                ,
                "sourceEntryDNMap": {
                    "description": "Specifies a DN map that will be used to identify the entry from which to obtain the source attribute providing the values for this virtual attribute.",
                    "type": "string"
                }
                ,
                "conflictBehavior": {
                    "description": "Specifies the behavior that the server is to exhibit for entries that already contain one or more real values for the associated attribute.",
                    "type": "string"
                    , "enum": [
                        "real-overrides-virtual"
                        ,
                        "virtual-overrides-real"
                        ,
                        "merge-real-and-virtual"
                    ]
                }
                ,
                "allowIndexConflicts": {
                    "description": "Indicates whether the server should allow creating or altering this virtual attribute definition even if it conflicts with one or more indexes defined in the server.",
                    "type": "boolean"
                }
                ,
                "returnUtcTime": {
                    "description": "Indicates whether to return current time in UTC.",
                    "type": "boolean"
                }
                ,
                "scriptArgument": {
                    "description": "The set of arguments used to customize the behavior for the Scripted Virtual Attribute. Each configuration property should be given in the form 'name=value'.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
                ,
                "sourceAttribute": {
                    "description": "Specifies the source attribute containing the values to use for this virtual attribute.",
                    "type": "string"
                }
                ,
                "baseDN": {
                    "description": "Specifies the base DNs for the branches containing entries that are eligible to use this virtual attribute.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
                ,
                "includeMilliseconds": {
                    "description": "Indicates whether the current time includes millisecond precision.",
                    "type": "boolean"
                }
                ,
                "value": {
                    "description": "Specifies the values to be included in the virtual attribute.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
                ,
                "rewriteSearchFilters": {
                    "description": "Search filters that include Is Member Of Virtual Attribute searches on dynamic groups can be updated to include the dynamic group filter in the search filter itself. This can allow the backend to more efficiently process the search filter by using attribute indexes sooner in the search processing.",
                    "type": "string"
                    , "enum": [
                        "always"
                        ,
                        "within-group-scope"
                        ,
                        "never"
                    ]
                }
                ,
                "joinSourceAttribute": {
                    "description": "The attribute containing the value(s) in the source entry to use to identify related entries.",
                    "type": "string"
                }
                ,
                "joinBaseDNType": {
                    "description": "Specifies how server should determine the base DN for the internal searches used to identify joined entries.",
                    "type": "string"
                    , "enum": [
                        "use-search-base-dn"
                        ,
                        "use-source-entry-dn"
                        ,
                        "use-custom-base-dn"
                    ]
                }
                ,
                "valuePattern": {
                    "description": "Specifies a pattern for constructing the virtual attribute value using fixed text and attribute values from the entry.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
                ,
                "scriptClass": {
                    "description": "The fully-qualified name of the Groovy class providing the logic for the Groovy Scripted Virtual Attribute.",
                    "type": "string"
                }
                ,
                "excludeOperationalAttributes": {
                    "description": "Indicates whether all operational attributes should be excluded from the generated checksum.",
                    "type": "boolean"
                }
                ,
                "joinMatchAll": {
                    "description": "Indicates whether joined entries will be required to have all values for the source attribute, or only at least one of its values.",
                    "type": "boolean"
                }
                ,
                "referencedByAttribute": {
                    "description": "The name or OID of an attribute type whose values will be searched for references to the target entry. The attribute type must be defined in the server schema, must have a syntax of either "distinguished name" or "name and optional UID", and must be indexed for equality.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
                ,
                "filter": {
                    "description": "Specifies the search filters to be applied against entries to determine if the virtual attribute is to be generated for those entries.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
                ,
                "groupDN": {
                    "description": "Specifies the DNs of the groups whose members can be eligible to use this virtual attribute.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
                ,
                "allowRetrievingMembership": {
                    "description": "Indicates whether to handle requests that request all values for the virtual attribute.",
                    "type": "boolean"
                }
                ,
                "bypassAccessControlForSearches": {
                    "description": "Indicates whether searches performed by this virtual attribute provider should be exempted from access control restrictions.",
                    "type": "boolean"
                }
                ,
                "clientConnectionPolicy": {
                    "description": "Specifies a set of client connection policies for which this Virtual Attribute should be generated. If this is undefined, then this Virtual Attribute will always be generated. If it is associated with one or more client connection policies, then this Virtual Attribute will be generated only for operations requested by clients assigned to one of those client connection policies.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
                ,
                "multipleVirtualAttributeMergeBehavior": {
                    "description": "Specifies the behavior that will be exhibited for cases in which multiple virtual attribute definitions apply to the same multivalued attribute type. This will be ignored for single-valued attribute types.",
                    "type": "string"
                    , "enum": [
                        "use-first-definition"
                        ,
                        "use-only-definitions-with-the-lowest-evaluation-order-index"
                        ,
                        "use-all-definitions"
                    ]
                }
                ,
                "joinDNAttribute": {
                    "description": "The attribute in related entries whose set of values must contain the DN of the search result entry to be joined with that entry.",
                    "type": "string"
                }
                ,
                "joinTargetAttribute": {
                    "description": "The attribute in target entries whose value(s) match values of the source attribute in the source entry.",
                    "type": "string"
                }
                ,
                "requireExplicitRequestByName": {
                    "description": "Indicates whether attributes of this type must be explicitly included by name in the list of requested attributes. Note that this will only apply to virtual attributes which are associated with an attribute type that is operational. It will be ignored for virtual attributes associated with a non-operational attribute type.",
                    "type": "boolean"
                }
            }
        },
        "virtual-attribute-response": {
            "id": "virtual-attribute-response",
            "description": "A Virtual Attribute resource response",
            "required": [
                "id"
            ],
            "properties": {
                "schemas": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "enum": [
                            "urn:pingidentity:schemas:configuration:2.0:virtual-attribute:mirror"
                            ,
                            "urn:pingidentity:schemas:configuration:2.0:virtual-attribute:entry-checksum"
                            ,
                            "urn:pingidentity:schemas:configuration:2.0:virtual-attribute:member-of-server-group"
                            ,
                            "urn:pingidentity:schemas:configuration:2.0:virtual-attribute:constructed"
                            ,
                            "urn:pingidentity:schemas:configuration:2.0:virtual-attribute:is-member-of"
                            ,
                            "urn:pingidentity:schemas:configuration:2.0:virtual-attribute:custom"
                            ,
                            "urn:pingidentity:schemas:configuration:2.0:virtual-attribute:num-subordinates"
                            ,
                            "urn:pingidentity:schemas:configuration:2.0:virtual-attribute:reverse-dn-join"
                            ,
                            "urn:pingidentity:schemas:configuration:2.0:virtual-attribute:identify-references"
                            ,
                            "urn:pingidentity:schemas:configuration:2.0:virtual-attribute:user-defined"
                            ,
                            "urn:pingidentity:schemas:configuration:2.0:virtual-attribute:current-time"
                            ,
                            "urn:pingidentity:schemas:configuration:2.0:virtual-attribute:short-unique-id"
                            ,
                            "urn:pingidentity:schemas:configuration:2.0:virtual-attribute:entry-dn"
                            ,
                            "urn:pingidentity:schemas:configuration:2.0:virtual-attribute:has-subordinates"
                            ,
                            "urn:pingidentity:schemas:configuration:2.0:virtual-attribute:equality-join"
                            ,
                            "urn:pingidentity:schemas:configuration:2.0:virtual-attribute:groovy-scripted"
                            ,
                            "urn:pingidentity:schemas:configuration:2.0:virtual-attribute:instance-name"
                            ,
                            "urn:pingidentity:schemas:configuration:2.0:virtual-attribute:replication-state-detail"
                            ,
                            "urn:pingidentity:schemas:configuration:2.0:virtual-attribute:member"
                            ,
                            "urn:pingidentity:schemas:configuration:2.0:virtual-attribute:password-policy-state-json"
                            ,
                            "urn:pingidentity:schemas:configuration:2.0:virtual-attribute:subschema-subentry"
                            ,
                            "urn:pingidentity:schemas:configuration:2.0:virtual-attribute:dn-join"
                            ,
                            "urn:pingidentity:schemas:configuration:2.0:virtual-attribute:third-party"
                        ]
                    }
                },
                "id": {
                    "type": "string",
                    "description": "Name of the Virtual Attribute"
                },
                "meta": {
                    "$ref": "Meta"
                },
                "urn:pingidentity:schemas:configuration:messages:2.0": {
                    "$ref": "Messages"
                },
                "extensionClass": {
                    "description": "The fully-qualified name of the Java class providing the logic for the Third Party Virtual Attribute.",
                    "type": "string"
                }
                ,
                "multipleVirtualAttributeEvaluationOrderIndex": {
                    "description": "Specifies the order in which virtual attribute definitions for the same attribute type will be evaluated when generating values for an entry.",
                    "type": "integer"
                }
                ,
                "sequenceNumberAttribute": {
                    "description": "Specifies the name or OID of the attribute which contains the sequence number from which unique identifiers are generated. The attribute should have Integer syntax or a String syntax permitting integer values. If this property is modified then the filter property should be updated accordingly so that only entries containing the sequence number attribute are eligible to have a value generated for this virtual attribute.",
                    "type": "string"
                }
                ,
                "excludedAttribute": {
                    "description": "Specifies the attributes that should be excluded from the checksum calculation.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
                ,
                "description": {
                    "description": "A description for this Virtual Attribute",
                    "type": "string"
                }
                ,
                "joinFilter": {
                    "description": "An optional filter that specifies additional criteria for identifying joined entries. If a join-filter value is specified, then only entries matching that filter (in addition to satisfying the other join criteria) will be joined with the search result entry.",
                    "type": "string"
                }
                ,
                "enabled": {
                    "description": "Indicates whether the Virtual Attribute is enabled for use.",
                    "type": "boolean"
                }
                ,
                "extensionArgument": {
                    "description": "The set of arguments used to customize the behavior for the Third Party Virtual Attribute. Each configuration property should be given in the form 'name=value'.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
                ,
                "joinAttribute": {
                    "description": "An optional set of the names of the attributes to include with joined entries.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
                ,
                "referenceSearchBaseDN": {
                    "description": "The base DN that will be used when searching for references to the target entry. If no reference search base DN is specified, the default behavior will be to search below all public naming contexts configured in the server.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
                ,
                "directMembershipsOnly": {
                    "description": "Specifies whether to only include groups in which the user is directly associated with and the membership maybe modified via the group entry. Groups in which the user's membership is derived dynamically or through nested groups will not be included.",
                    "type": "boolean"
                }
                ,
                "includedGroupFilter": {
                    "description": "A search filter that will be used to identify which groups should be included in the values of the virtual attribute. With no value defined (which is the default behavior), all groups that contain the target user will be included.",
                    "type": "string"
                }
                ,
                "joinSizeLimit": {
                    "description": "The maximum number of entries that may be joined with the source entry, which also corresponds to the maximum number of values that the virtual attribute provider will generate for an entry.",
                    "type": "integer"
                }
                ,
                "joinCustomBaseDN": {
                    "description": "The fixed, administrator-specified base DN for the internal searches used to identify joined entries.",
                    "type": "string"
                }
                ,
                "attributeType": {
                    "description": "Specifies the attribute type for the attribute whose values are to be dynamically assigned by the virtual attribute.",
                    "type": "string"
                }
                ,
                "joinScope": {
                    "description": "The scope for searches used to identify joined entries.",
                    "type": "string"
                    , "enum": [
                        "base-object"
                        ,
                        "single-level"
                        ,
                        "whole-subtree"
                        ,
                        "subordinate-subtree"
                    ]
                }
                ,
                "sourceEntryDNAttribute": {
                    "description": "Specifies the attribute containing the DN of another entry from which to obtain the source attribute providing the values for this virtual attribute.",
                    "type": "string"
                }
                ,
                "sourceEntryDNMap": {
                    "description": "Specifies a DN map that will be used to identify the entry from which to obtain the source attribute providing the values for this virtual attribute.",
                    "type": "string"
                }
                ,
                "conflictBehavior": {
                    "description": "Specifies the behavior that the server is to exhibit for entries that already contain one or more real values for the associated attribute.",
                    "type": "string"
                    , "enum": [
                        "real-overrides-virtual"
                        ,
                        "virtual-overrides-real"
                        ,
                        "merge-real-and-virtual"
                    ]
                }
                ,
                "allowIndexConflicts": {
                    "description": "Indicates whether the server should allow creating or altering this virtual attribute definition even if it conflicts with one or more indexes defined in the server.",
                    "type": "boolean"
                }
                ,
                "returnUtcTime": {
                    "description": "Indicates whether to return current time in UTC.",
                    "type": "boolean"
                }
                ,
                "scriptArgument": {
                    "description": "The set of arguments used to customize the behavior for the Scripted Virtual Attribute. Each configuration property should be given in the form 'name=value'.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
                ,
                "sourceAttribute": {
                    "description": "Specifies the source attribute containing the values to use for this virtual attribute.",
                    "type": "string"
                }
                ,
                "baseDN": {
                    "description": "Specifies the base DNs for the branches containing entries that are eligible to use this virtual attribute.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
                ,
                "includeMilliseconds": {
                    "description": "Indicates whether the current time includes millisecond precision.",
                    "type": "boolean"
                }
                ,
                "value": {
                    "description": "Specifies the values to be included in the virtual attribute.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
                ,
                "rewriteSearchFilters": {
                    "description": "Search filters that include Is Member Of Virtual Attribute searches on dynamic groups can be updated to include the dynamic group filter in the search filter itself. This can allow the backend to more efficiently process the search filter by using attribute indexes sooner in the search processing.",
                    "type": "string"
                    , "enum": [
                        "always"
                        ,
                        "within-group-scope"
                        ,
                        "never"
                    ]
                }
                ,
                "joinSourceAttribute": {
                    "description": "The attribute containing the value(s) in the source entry to use to identify related entries.",
                    "type": "string"
                }
                ,
                "joinBaseDNType": {
                    "description": "Specifies how server should determine the base DN for the internal searches used to identify joined entries.",
                    "type": "string"
                    , "enum": [
                        "use-search-base-dn"
                        ,
                        "use-source-entry-dn"
                        ,
                        "use-custom-base-dn"
                    ]
                }
                ,
                "valuePattern": {
                    "description": "Specifies a pattern for constructing the virtual attribute value using fixed text and attribute values from the entry.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
                ,
                "scriptClass": {
                    "description": "The fully-qualified name of the Groovy class providing the logic for the Groovy Scripted Virtual Attribute.",
                    "type": "string"
                }
                ,
                "excludeOperationalAttributes": {
                    "description": "Indicates whether all operational attributes should be excluded from the generated checksum.",
                    "type": "boolean"
                }
                ,
                "joinMatchAll": {
                    "description": "Indicates whether joined entries will be required to have all values for the source attribute, or only at least one of its values.",
                    "type": "boolean"
                }
                ,
                "referencedByAttribute": {
                    "description": "The name or OID of an attribute type whose values will be searched for references to the target entry. The attribute type must be defined in the server schema, must have a syntax of either "distinguished name" or "name and optional UID", and must be indexed for equality.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
                ,
                "filter": {
                    "description": "Specifies the search filters to be applied against entries to determine if the virtual attribute is to be generated for those entries.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
                ,
                "groupDN": {
                    "description": "Specifies the DNs of the groups whose members can be eligible to use this virtual attribute.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
                ,
                "allowRetrievingMembership": {
                    "description": "Indicates whether to handle requests that request all values for the virtual attribute.",
                    "type": "boolean"
                }
                ,
                "bypassAccessControlForSearches": {
                    "description": "Indicates whether searches performed by this virtual attribute provider should be exempted from access control restrictions.",
                    "type": "boolean"
                }
                ,
                "clientConnectionPolicy": {
                    "description": "Specifies a set of client connection policies for which this Virtual Attribute should be generated. If this is undefined, then this Virtual Attribute will always be generated. If it is associated with one or more client connection policies, then this Virtual Attribute will be generated only for operations requested by clients assigned to one of those client connection policies.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
                ,
                "multipleVirtualAttributeMergeBehavior": {
                    "description": "Specifies the behavior that will be exhibited for cases in which multiple virtual attribute definitions apply to the same multivalued attribute type. This will be ignored for single-valued attribute types.",
                    "type": "string"
                    , "enum": [
                        "use-first-definition"
                        ,
                        "use-only-definitions-with-the-lowest-evaluation-order-index"
                        ,
                        "use-all-definitions"
                    ]
                }
                ,
                "joinDNAttribute": {
                    "description": "The attribute in related entries whose set of values must contain the DN of the search result entry to be joined with that entry.",
                    "type": "string"
                }
                ,
                "joinTargetAttribute": {
                    "description": "The attribute in target entries whose value(s) match values of the source attribute in the source entry.",
                    "type": "string"
                }
                ,
                "requireExplicitRequestByName": {
                    "description": "Indicates whether attributes of this type must be explicitly included by name in the list of requested attributes. Note that this will only apply to virtual attributes which are associated with an attribute type that is operational. It will be ignored for virtual attributes associated with a non-operational attribute type.",
                    "type": "boolean"
                }
            }
        },
        "virtual-attribute-properties": {
            "id": "virtual-attribute-properties",
            "description": "Virtual Attribute properties",
            "properties": {
                "schemas": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "enum": [
                            "urn:pingidentity:schemas:configuration:2.0:virtual-attribute:mirror"
                            ,
                            "urn:pingidentity:schemas:configuration:2.0:virtual-attribute:entry-checksum"
                            ,
                            "urn:pingidentity:schemas:configuration:2.0:virtual-attribute:member-of-server-group"
                            ,
                            "urn:pingidentity:schemas:configuration:2.0:virtual-attribute:constructed"
                            ,
                            "urn:pingidentity:schemas:configuration:2.0:virtual-attribute:is-member-of"
                            ,
                            "urn:pingidentity:schemas:configuration:2.0:virtual-attribute:custom"
                            ,
                            "urn:pingidentity:schemas:configuration:2.0:virtual-attribute:num-subordinates"
                            ,
                            "urn:pingidentity:schemas:configuration:2.0:virtual-attribute:reverse-dn-join"
                            ,
                            "urn:pingidentity:schemas:configuration:2.0:virtual-attribute:identify-references"
                            ,
                            "urn:pingidentity:schemas:configuration:2.0:virtual-attribute:user-defined"
                            ,
                            "urn:pingidentity:schemas:configuration:2.0:virtual-attribute:current-time"
                            ,
                            "urn:pingidentity:schemas:configuration:2.0:virtual-attribute:short-unique-id"
                            ,
                            "urn:pingidentity:schemas:configuration:2.0:virtual-attribute:entry-dn"
                            ,
                            "urn:pingidentity:schemas:configuration:2.0:virtual-attribute:has-subordinates"
                            ,
                            "urn:pingidentity:schemas:configuration:2.0:virtual-attribute:equality-join"
                            ,
                            "urn:pingidentity:schemas:configuration:2.0:virtual-attribute:groovy-scripted"
                            ,
                            "urn:pingidentity:schemas:configuration:2.0:virtual-attribute:instance-name"
                            ,
                            "urn:pingidentity:schemas:configuration:2.0:virtual-attribute:replication-state-detail"
                            ,
                            "urn:pingidentity:schemas:configuration:2.0:virtual-attribute:member"
                            ,
                            "urn:pingidentity:schemas:configuration:2.0:virtual-attribute:password-policy-state-json"
                            ,
                            "urn:pingidentity:schemas:configuration:2.0:virtual-attribute:subschema-subentry"
                            ,
                            "urn:pingidentity:schemas:configuration:2.0:virtual-attribute:dn-join"
                            ,
                            "urn:pingidentity:schemas:configuration:2.0:virtual-attribute:third-party"
                        ]
                    }
                },
                "extensionClass": {
                    "description": "The fully-qualified name of the Java class providing the logic for the Third Party Virtual Attribute.",
                    "type": "string"
                }
                ,
                "multipleVirtualAttributeEvaluationOrderIndex": {
                    "description": "Specifies the order in which virtual attribute definitions for the same attribute type will be evaluated when generating values for an entry.",
                    "type": "integer"
                }
                ,
                "sequenceNumberAttribute": {
                    "description": "Specifies the name or OID of the attribute which contains the sequence number from which unique identifiers are generated. The attribute should have Integer syntax or a String syntax permitting integer values. If this property is modified then the filter property should be updated accordingly so that only entries containing the sequence number attribute are eligible to have a value generated for this virtual attribute.",
                    "type": "string"
                }
                ,
                "excludedAttribute": {
                    "description": "Specifies the attributes that should be excluded from the checksum calculation.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
                ,
                "description": {
                    "description": "A description for this Virtual Attribute",
                    "type": "string"
                }
                ,
                "joinFilter": {
                    "description": "An optional filter that specifies additional criteria for identifying joined entries. If a join-filter value is specified, then only entries matching that filter (in addition to satisfying the other join criteria) will be joined with the search result entry.",
                    "type": "string"
                }
                ,
                "enabled": {
                    "description": "Indicates whether the Virtual Attribute is enabled for use.",
                    "type": "boolean"
                }
                ,
                "extensionArgument": {
                    "description": "The set of arguments used to customize the behavior for the Third Party Virtual Attribute. Each configuration property should be given in the form 'name=value'.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
                ,
                "joinAttribute": {
                    "description": "An optional set of the names of the attributes to include with joined entries.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
                ,
                "referenceSearchBaseDN": {
                    "description": "The base DN that will be used when searching for references to the target entry. If no reference search base DN is specified, the default behavior will be to search below all public naming contexts configured in the server.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
                ,
                "directMembershipsOnly": {
                    "description": "Specifies whether to only include groups in which the user is directly associated with and the membership maybe modified via the group entry. Groups in which the user's membership is derived dynamically or through nested groups will not be included.",
                    "type": "boolean"
                }
                ,
                "includedGroupFilter": {
                    "description": "A search filter that will be used to identify which groups should be included in the values of the virtual attribute. With no value defined (which is the default behavior), all groups that contain the target user will be included.",
                    "type": "string"
                }
                ,
                "joinSizeLimit": {
                    "description": "The maximum number of entries that may be joined with the source entry, which also corresponds to the maximum number of values that the virtual attribute provider will generate for an entry.",
                    "type": "integer"
                }
                ,
                "joinCustomBaseDN": {
                    "description": "The fixed, administrator-specified base DN for the internal searches used to identify joined entries.",
                    "type": "string"
                }
                ,
                "attributeType": {
                    "description": "Specifies the attribute type for the attribute whose values are to be dynamically assigned by the virtual attribute.",
                    "type": "string"
                }
                ,
                "joinScope": {
                    "description": "The scope for searches used to identify joined entries.",
                    "type": "string"
                    , "enum": [
                        "base-object"
                        ,
                        "single-level"
                        ,
                        "whole-subtree"
                        ,
                        "subordinate-subtree"
                    ]
                }
                ,
                "sourceEntryDNAttribute": {
                    "description": "Specifies the attribute containing the DN of another entry from which to obtain the source attribute providing the values for this virtual attribute.",
                    "type": "string"
                }
                ,
                "sourceEntryDNMap": {
                    "description": "Specifies a DN map that will be used to identify the entry from which to obtain the source attribute providing the values for this virtual attribute.",
                    "type": "string"
                }
                ,
                "conflictBehavior": {
                    "description": "Specifies the behavior that the server is to exhibit for entries that already contain one or more real values for the associated attribute.",
                    "type": "string"
                    , "enum": [
                        "real-overrides-virtual"
                        ,
                        "virtual-overrides-real"
                        ,
                        "merge-real-and-virtual"
                    ]
                }
                ,
                "allowIndexConflicts": {
                    "description": "Indicates whether the server should allow creating or altering this virtual attribute definition even if it conflicts with one or more indexes defined in the server.",
                    "type": "boolean"
                }
                ,
                "returnUtcTime": {
                    "description": "Indicates whether to return current time in UTC.",
                    "type": "boolean"
                }
                ,
                "scriptArgument": {
                    "description": "The set of arguments used to customize the behavior for the Scripted Virtual Attribute. Each configuration property should be given in the form 'name=value'.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
                ,
                "sourceAttribute": {
                    "description": "Specifies the source attribute containing the values to use for this virtual attribute.",
                    "type": "string"
                }
                ,
                "baseDN": {
                    "description": "Specifies the base DNs for the branches containing entries that are eligible to use this virtual attribute.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
                ,
                "includeMilliseconds": {
                    "description": "Indicates whether the current time includes millisecond precision.",
                    "type": "boolean"
                }
                ,
                "value": {
                    "description": "Specifies the values to be included in the virtual attribute.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
                ,
                "rewriteSearchFilters": {
                    "description": "Search filters that include Is Member Of Virtual Attribute searches on dynamic groups can be updated to include the dynamic group filter in the search filter itself. This can allow the backend to more efficiently process the search filter by using attribute indexes sooner in the search processing.",
                    "type": "string"
                    , "enum": [
                        "always"
                        ,
                        "within-group-scope"
                        ,
                        "never"
                    ]
                }
                ,
                "joinSourceAttribute": {
                    "description": "The attribute containing the value(s) in the source entry to use to identify related entries.",
                    "type": "string"
                }
                ,
                "joinBaseDNType": {
                    "description": "Specifies how server should determine the base DN for the internal searches used to identify joined entries.",
                    "type": "string"
                    , "enum": [
                        "use-search-base-dn"
                        ,
                        "use-source-entry-dn"
                        ,
                        "use-custom-base-dn"
                    ]
                }
                ,
                "valuePattern": {
                    "description": "Specifies a pattern for constructing the virtual attribute value using fixed text and attribute values from the entry.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
                ,
                "scriptClass": {
                    "description": "The fully-qualified name of the Groovy class providing the logic for the Groovy Scripted Virtual Attribute.",
                    "type": "string"
                }
                ,
                "excludeOperationalAttributes": {
                    "description": "Indicates whether all operational attributes should be excluded from the generated checksum.",
                    "type": "boolean"
                }
                ,
                "joinMatchAll": {
                    "description": "Indicates whether joined entries will be required to have all values for the source attribute, or only at least one of its values.",
                    "type": "boolean"
                }
                ,
                "referencedByAttribute": {
                    "description": "The name or OID of an attribute type whose values will be searched for references to the target entry. The attribute type must be defined in the server schema, must have a syntax of either "distinguished name" or "name and optional UID", and must be indexed for equality.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
                ,
                "filter": {
                    "description": "Specifies the search filters to be applied against entries to determine if the virtual attribute is to be generated for those entries.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
                ,
                "groupDN": {
                    "description": "Specifies the DNs of the groups whose members can be eligible to use this virtual attribute.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
                ,
                "allowRetrievingMembership": {
                    "description": "Indicates whether to handle requests that request all values for the virtual attribute.",
                    "type": "boolean"
                }
                ,
                "bypassAccessControlForSearches": {
                    "description": "Indicates whether searches performed by this virtual attribute provider should be exempted from access control restrictions.",
                    "type": "boolean"
                }
                ,
                "clientConnectionPolicy": {
                    "description": "Specifies a set of client connection policies for which this Virtual Attribute should be generated. If this is undefined, then this Virtual Attribute will always be generated. If it is associated with one or more client connection policies, then this Virtual Attribute will be generated only for operations requested by clients assigned to one of those client connection policies.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
                ,
                "multipleVirtualAttributeMergeBehavior": {
                    "description": "Specifies the behavior that will be exhibited for cases in which multiple virtual attribute definitions apply to the same multivalued attribute type. This will be ignored for single-valued attribute types.",
                    "type": "string"
                    , "enum": [
                        "use-first-definition"
                        ,
                        "use-only-definitions-with-the-lowest-evaluation-order-index"
                        ,
                        "use-all-definitions"
                    ]
                }
                ,
                "joinDNAttribute": {
                    "description": "The attribute in related entries whose set of values must contain the DN of the search result entry to be joined with that entry.",
                    "type": "string"
                }
                ,
                "joinTargetAttribute": {
                    "description": "The attribute in target entries whose value(s) match values of the source attribute in the source entry.",
                    "type": "string"
                }
                ,
                "requireExplicitRequestByName": {
                    "description": "Indicates whether attributes of this type must be explicitly included by name in the list of requested attributes. Note that this will only apply to virtual attributes which are associated with an attribute type that is operational. It will be ignored for virtual attributes associated with a non-operational attribute type.",
                    "type": "boolean"
                }
            }
        }
    }
}
