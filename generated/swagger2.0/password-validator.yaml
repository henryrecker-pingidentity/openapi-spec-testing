swagger: "2.0"
info:
  description: PingData Configuration API - OpenAPI 3.0
  title: PingData Configuration API
  version: "9.2.0.0"
externalDocs:
  description: PingDirectory Configuration API Docs
  url: https://docs.pingidentity.com/r/en-us/pingdirectory-92/pd_ds_use_config_api
basePath: /config
securityDefinitions:
  basicAuth:
    type: "basic"
security:
- basicAuth: []
produces:
- application/json
paths:
  /ResourceTypes:
    get:
      summary: List all sub-paths for the Configuration API
      operationId: get-resource-types
      responses:
        "200":
          description: Successful operation
          schema:
            $ref: '#/definitions/get-resource-types-response'
        "400":
          description: The request contents are incorrectly formatted or the request was made for an invalid API version.
        "401":
          description: The requester cannot be authenticated
        "403":
          description: The requester does not have the required privileges or another constraint failed, such as attempting to delete an edit-only object.
        "415":
          description: The request is such that the Accept header does not indicate that JSON is an acceptable format for a response.
        "500":
          description: The server encountered an unexpected error.
      tags:
      - list-resource-types
  /password-validators:
    get:
      summary: Returns a list of all Password Validator objects
      operationId: list-password-validators
      parameters:
      - $ref: '#/parameters/filter'
      - $ref: '#/parameters/sortBy'
      - $ref: '#/parameters/sortOrder'
      - $ref: '#/parameters/startIndex'
      - $ref: '#/parameters/count'
      - $ref: '#/parameters/attributes'
      - $ref: '#/parameters/excludeAttributes'
      responses:
        "200":
          description: Successful operation
          schema:
            $ref: '#/definitions/password-validator-list-response'
        "204":
          description: The requested operation succeeded and no further information has been provided, such as in the case of a DELETE operation.
        "400":
          description: The request contents are incorrectly formatted or the request was made for an invalid API version.
        "401":
          description: The requester cannot be authenticated
        "403":
          description: The requester does not have the required privileges or another constraint failed, such as attempting to delete an edit-only object.
        "404":
          description: The requested path does not refer to an existing object or object relation.
        "409":
          description: The requested operation could not be performed due to the current state of the configuration. For example, an attempt was made to create an object that already exists or an attempt was made to delete an object that is referred to by another object.
        "415":
          description: The request is such that the Accept header does not indicate that JSON is an acceptable format for a response.
        "500":
          description: The server encountered an unexpected error.
      tags:
      - password-validator
    post:
      summary: Add a new Password Validator to the config
      operationId: add-password-validator
      parameters:
      - $ref: '#/parameters/attributes'
      - $ref: '#/parameters/excludeAttributes'
      - $ref: '#/parameters/applyChangeTo'
      - name: body
        in: body
        schema:
          $ref: '#/definitions/add-password-validator-request'
        description: Create a new Password Validator in the config
        required: true
      responses:
        "200":
          description: Successful operation
          schema:
            $ref: '#/definitions/password-validator-response-with-messages'
        "204":
          description: The requested operation succeeded and no further information has been provided, such as in the case of a DELETE operation.
        "400":
          description: The request contents are incorrectly formatted or the request was made for an invalid API version.
        "401":
          description: The requester cannot be authenticated
        "403":
          description: The requester does not have the required privileges or another constraint failed, such as attempting to delete an edit-only object.
        "404":
          description: The requested path does not refer to an existing object or object relation.
        "409":
          description: The requested operation could not be performed due to the current state of the configuration. For example, an attempt was made to create an object that already exists or an attempt was made to delete an object that is referred to by another object.
        "415":
          description: The request is such that the Accept header does not indicate that JSON is an acceptable format for a response.
        "500":
          description: The server encountered an unexpected error.
      tags:
      - password-validator
  /password-validators/{password-validator-name}:
    get:
      operationId: get-password-validator
      summary: Returns a single Password Validator
      parameters:
      - $ref: '#/parameters/attributes'
      - $ref: '#/parameters/excludeAttributes'
      - description: Name of the Password Validator
        in: path
        name: password-validator-name
        required: true
        type: string
      responses:
        "200":
          description: Successful operation
          schema:
            $ref: '#/definitions/password-validator-response'
        "204":
          description: The requested operation succeeded and no further information has been provided, such as in the case of a DELETE operation.
        "400":
          description: The request contents are incorrectly formatted or the request was made for an invalid API version.
        "401":
          description: The requester cannot be authenticated
        "403":
          description: The requester does not have the required privileges or another constraint failed, such as attempting to delete an edit-only object.
        "404":
          description: The requested path does not refer to an existing object or object relation.
        "409":
          description: The requested operation could not be performed due to the current state of the configuration. For example, an attempt was made to create an object that already exists or an attempt was made to delete an object that is referred to by another object.
        "415":
          description: The request is such that the Accept header does not indicate that JSON is an acceptable format for a response.
        "500":
          description: The server encountered an unexpected error.
      tags:
      - password-validator
    put:
      operationId: put-password-validator
      summary: Update an existing Password Validator by name, replacing any attributes specified in the request body
      parameters:
      - $ref: '#/parameters/attributes'
      - $ref: '#/parameters/excludeAttributes'
      - $ref: '#/parameters/applyChangeTo'
      - description: Name of the Password Validator
        in: path
        name: password-validator-name
        required: true
        type: string
      - name: body
        in: body
        schema:
          $ref: '#/definitions/password-validator-properties'
        description: Attributes to replace in the Password Validator
        required: true
      responses:
        "200":
          description: Successful operation
          schema:
            $ref: '#/definitions/password-validator-response-with-messages'
        "204":
          description: The requested operation succeeded and no further information has been provided, such as in the case of a DELETE operation.
        "400":
          description: The request contents are incorrectly formatted or the request was made for an invalid API version.
        "401":
          description: The requester cannot be authenticated
        "403":
          description: The requester does not have the required privileges or another constraint failed, such as attempting to delete an edit-only object.
        "404":
          description: The requested path does not refer to an existing object or object relation.
        "409":
          description: The requested operation could not be performed due to the current state of the configuration. For example, an attempt was made to create an object that already exists or an attempt was made to delete an object that is referred to by another object.
        "415":
          description: The request is such that the Accept header does not indicate that JSON is an acceptable format for a response.
        "500":
          description: The server encountered an unexpected error.
      tags:
      - password-validator
    patch:
      operationId: patch-password-validator
      summary: Update an existing Password Validator by name, using a SCIM patch request
      parameters:
      - $ref: '#/parameters/attributes'
      - $ref: '#/parameters/excludeAttributes'
      - $ref: '#/parameters/applyChangeTo'
      - description: Name of the Password Validator
        in: path
        name: password-validator-name
        required: true
        type: string
      - name: body
        in: body
        schema:
          $ref: '#/definitions/patch-request'
        description: SCIM operations to apply to the Password Validator
        required: true
      responses:
        "200":
          description: Successful operation
          schema:
            $ref: '#/definitions/password-validator-response-with-messages'
        "204":
          description: The requested operation succeeded and no further information has been provided, such as in the case of a DELETE operation.
        "400":
          description: The request contents are incorrectly formatted or the request was made for an invalid API version.
        "401":
          description: The requester cannot be authenticated
        "403":
          description: The requester does not have the required privileges or another constraint failed, such as attempting to delete an edit-only object.
        "404":
          description: The requested path does not refer to an existing object or object relation.
        "409":
          description: The requested operation could not be performed due to the current state of the configuration. For example, an attempt was made to create an object that already exists or an attempt was made to delete an object that is referred to by another object.
        "415":
          description: The request is such that the Accept header does not indicate that JSON is an acceptable format for a response.
        "500":
          description: The server encountered an unexpected error.
      tags:
      - password-validator
    delete:
      summary: Delete a Password Validator
      operationId: delete-password-validator
      parameters:
      - $ref: '#/parameters/applyChangeTo'
      - description: Name of the Password Validator
        in: path
        name: password-validator-name
        required: true
        type: string
      responses:
        "200":
          description: Successful operation
        "204":
          description: The requested operation succeeded and no further information has been provided, such as in the case of a DELETE operation.
        "400":
          description: The request contents are incorrectly formatted or the request was made for an invalid API version.
        "401":
          description: The requester cannot be authenticated
        "403":
          description: The requester does not have the required privileges or another constraint failed, such as attempting to delete an edit-only object.
        "404":
          description: The requested path does not refer to an existing object or object relation.
        "409":
          description: The requested operation could not be performed due to the current state of the configuration. For example, an attempt was made to create an object that already exists or an attempt was made to delete an object that is referred to by another object.
        "415":
          description: The request is such that the Accept header does not indicate that JSON is an acceptable format for a response.
        "500":
          description: The server encountered an unexpected error.
      tags:
      - password-validator

parameters:
  filter:
    in: query
    name: filter
    description: "SCIM filter"
    required: false
    type: string
  sortBy:
    in: query
    name: sortBy
    description: "Specifies a property value by which to sort"
    required: false
    type: string
  sortOrder:
    in: query
    name: sortOrder
    description: "Specifies either ascending or descending alphabetical order"
    required: false
    type: string
    enum:
    - "ascending"
    - "descending"
  startIndex:
    in: query
    name: startIndex
    description: "1-based index of the first result to return"
    required: false
    type: number
  count:
    in: query
    name: count
    description: "Indicates the number of results per page"
    required: false
    type: number
  attributes:
    in: query
    name: attributes
    description: "Comma-separated list of attributes to include in the response"
    required: false
    type: string
  excludeAttributes:
    in: query
    name: excludeAttributes
    description: "Comma-separated list of attributes to exclude from the response"
    required: false
    type: string
  applyChangeTo:
    in: query
    name: applyChangeTo
    description: "Specify whether to apply this configuration change to a single server or the whole server group. This does not apply to mirrored subtree objects"
    required: false
    type: string
    enum:
    - "singleServer"
    - "serverGroup"
definitions:
  get-resource-types-response:
    type: object
    properties:
      schemas:
        type: array
        items:
          type: string
          enum:
          - "urn:ietf:params:scim:api:messages:2.0:ListResponse"
      totalResults:
        type: number
      Resources:
        type: array
        items:
          allOf:
          - type: object
            properties:
              schemas:
                type: array
                items:
                  type: string
                  enum:
                  - "urn:ietf:params:scim:schemas:core:2.0:ResourceType"
              id:
                type: string
              name:
                type: string
              description:
                type: string
              endpoint:
                type: string
          - $ref: '#/definitions/meta'
  meta:
    type: object
    properties:
      meta:
        type: object
        properties:
          resourceType:
            type: string
          location:
            type: string
  messages:
    type: object
    properties:
      "urn:pingidentity:schemas:configuration:messages:2.0":
        type: object
        properties:
          notifications:
            type: array
            items:
              type: string
          requiredActions:
            type: array
            items:
              type: object
              properties:
                property:
                  type: string
                type:
                  type: string
                synopsis:
                  type: string
              required:
              - type
              - synopsis
  patch-request:
    type: object
    properties:
      operations:
        type: array
        items:
          $ref: '#/definitions/operation'
    required:
    - operations
  operation:
    type: object
    properties:
      op:
        type: string
        enum:
        - "add"
        - "remove"
        - "replace"
      path:
        type: string
      value:
        type: string
    required:
    - op
    - path
  password-validator-list-response:
    type: object
    properties:
      schemas:
        type: array
        minItems: 1
        maxItems: 1
        items:
          type: string
          enum:
          - "urn:ietf:params:scim:api:messages:2.0:ListResponse"
      totalResults:
        type: number
      Resources:
        type: array
        items:
          $ref: '#/definitions/password-validator-response'
    required:
    - schemas
    - totalResults
  add-password-validator-request:
    allOf:
    - type: object
      properties:
        validatorName:
          type: string
          description: >-
              Name of the new Password Validator
    - $ref: '#/definitions/password-validator-properties'
    required:
    - validatorName
  password-validator-response:
    allOf:
    - type: object
      properties:
        id:
          type: string
          description: >-
              Name of the Password Validator
    - $ref: '#/definitions/meta'
    - $ref: '#/definitions/password-validator-properties'
    required:
    - id
    - schemas
  password-validator-response-with-messages:
    allOf:
    - $ref: '#/definitions/messages'
    - $ref: '#/definitions/password-validator-response'
  password-validator-properties:
    type: object
    properties:
      schemas:
        type: array
        minItems: 1
        maxItems: 1
        items:
          type: string
          enum:
          - "urn:pingidentity:schemas:configuration:2.0:password-validator:character-set"
          - "urn:pingidentity:schemas:configuration:2.0:password-validator:similarity-based"
          - "urn:pingidentity:schemas:configuration:2.0:password-validator:attribute-value"
          - "urn:pingidentity:schemas:configuration:2.0:password-validator:custom"
          - "urn:pingidentity:schemas:configuration:2.0:password-validator:repeated-characters"
          - "urn:pingidentity:schemas:configuration:2.0:password-validator:dictionary"
          - "urn:pingidentity:schemas:configuration:2.0:password-validator:haystack"
          - "urn:pingidentity:schemas:configuration:2.0:password-validator:groovy-scripted"
          - "urn:pingidentity:schemas:configuration:2.0:password-validator:pwned-passwords"
          - "urn:pingidentity:schemas:configuration:2.0:password-validator:length-based"
          - "urn:pingidentity:schemas:configuration:2.0:password-validator:regular-expression"
          - "urn:pingidentity:schemas:configuration:2.0:password-validator:unique-characters"
          - "urn:pingidentity:schemas:configuration:2.0:password-validator:third-party"
      extensionClass:
        type: string
        description: >-
               The fully-qualified name of the Java class providing the logic for the Third Party Password Validator.
      characterSet:
        type: array
        items:
          type: string
        description: >-
               Specifies a character set containing characters that a password may contain and a value indicating the minimum number of characters required from that set.
      matchAttribute:
        type: array
        items:
          type: string
        description: >-
               Specifies the name(s) of the attribute(s) whose values should be checked to determine whether they match the provided password. If no values are provided, then the server checks if the proposed password matches the value of any user attribute in the target user's entry.
      validatorRequirementDescription:
        type: string
        description: >-
               Specifies a message that can be used to describe the requirements imposed by this password validator to end users. If a value is provided for this property, then it will override any description that may have otherwise been generated by the validator.
      minimumAcceptableTimeToExhaustSearchSpace:
        type: string
        description: >-
               The minimum length of time (using the configured number of password guesses per second) required to exhaust the entire search space for a proposed password in order for that password to be considered acceptable.
      acceptPasswordOnServiceError:
        type: boolean
        description: >-
               Indicates whether to accept the proposed password if an error occurs while attempting to interact with the Pwned Passwords service.
      description:
        type: string
        description: >-
               A description for this Password Validator
      testPasswordSubstringOfAttributeValue:
        type: boolean
        description: >-
               Indicates whether to reject any proposed password that is a substring of a value in one of the match attributes in the target user's entry.
      invokeForAdminReset:
        type: boolean
        description: >-
               Indicates whether this password validator should be used to validate clear-text passwords provided by administrators when changing the password for another user.
      maxPasswordLength:
        type: integer
        description: >-
               Specifies the maximum number of characters that can be included in a proposed password.
      enabled:
        type: boolean
        description: >-
               Indicates whether the password validator is enabled for use.
      extensionArgument:
        type: array
        items:
          type: string
        description: >-
               The set of arguments used to customize the behavior for the Third Party Password Validator. Each configuration property should be given in the form 'name=value'.
      caseSensitiveValidation:
        type: boolean
        description: >-
               Indicates whether this password validator should treat password characters in a case-sensitive manner.
      validatorFailureMessage:
        type: string
        description: >-
               Specifies a message that may be provided to the end user in the event that a proposed password is rejected by this validator. If a value is provided for this property, then it will override any failure message that may have otherwise been generated by the validator.
      keyManagerProvider:
        type: string
        description: >-
               Specifies which key manager provider should be used to obtain a client certificate to present to the validation server when performing HTTPS communication. This may be left undefined if communication will not be secured with HTTPS, or if there is no need to present a client certificate to the validation service.
      allowUnclassifiedCharacters:
        type: boolean
        description: >-
               Indicates whether this password validator allows passwords to contain characters outside of any of the user-defined character sets.
      minUniqueCharacters:
        type: integer
        description: >-
               Specifies the minimum number of unique characters that a password will be allowed to contain.
      minPasswordDifference:
        type: integer
        description: >-
               Specifies the minimum difference of new and old password.
      testReversedPassword:
        type: boolean
        description: >-
               Indicates whether to perform matching against the reversed value of the provided password in addition to the order in which it was given.
      maximumAllowedPercentOfPassword:
        type: integer
        description: >-
               The maximum allowed percent of a proposed password that any single dictionary word is allowed to comprise. A value of 100 indicates that a proposed password will only be rejected if the dictionary contains the entire proposed password (after any configured transformations have been applied).
      scriptArgument:
        type: array
        items:
          type: string
        description: >-
               The set of arguments used to customize the behavior for the Scripted Password Validator. Each configuration property should be given in the form 'name=value'.
      matchPattern:
        type: string
        description: >-
               The regular expression to use for this password validator.
      matchBehavior:
        type: string
        enum:
        - "require-match"
        - "reject-match"
        description: >-
               The behavior to exhibit if a user's proposed password matches the regular expression defined in the match-pattern property.
      maxConsecutiveLength:
        type: integer
        description: >-
               Specifies the maximum number of times that any character can appear consecutively in a password value.
      ignoreLeadingNonAlphabeticCharacters:
        type: boolean
        description: >-
               Indicates whether to ignore any digits, symbols, or other non-alphabetic characters that may appear at the beginning of a proposed password.
      dictionaryFile:
        type: string
        description: >-
               Specifies the path to the file containing a list of words that cannot be used as passwords.
      trustManagerProvider:
        type: string
        description: >-
               Specifies which trust manager provider should be used to determine whether to trust the certificate presented by the server when performing HTTPS communication. This may be left undefined if HTTPS communication is not needed, or if the validation service presents a certificate that is trusted by the default JVM configuration (which should be the case for the Pwned Password servers).
      invokeForSelfChange:
        type: boolean
        description: >-
               Indicates whether this password validator should be used to validate clear-text passwords provided by an end user in the course of changing their own password.
      alternativePasswordCharacterMapping:
        type: array
        items:
          type: string
        description: >-
               Provides a set of character substitutions that can be applied to the proposed password when checking to see if it is in the provided dictionary. Each mapping should consist of a single character followed by a colon and a list of the alternative characters that may be used in place of that character.
      scriptClass:
        type: string
        description: >-
               The fully-qualified name of the Groovy class providing the logic for the Groovy Scripted Password Validator.
      minimumAttributeValueLengthForSubstringMatches:
        type: integer
        description: >-
               The minimum length that an attribute value must have for it to be considered when rejecting passwords that contain the value of another attribute as a substring.
      stripDiacriticalMarks:
        type: boolean
        description: >-
               Indicates whether to strip characters of any diacritical marks (like accents, cedillas, circumflexes, diaereses, tildes, and umlauts) they may contain. Any characters with a diacritical mark would be replaced with a base version
      invokeForAdd:
        type: boolean
        description: >-
               Indicates whether this password validator should be used to validate clear-text passwords provided in LDAP add requests.
      ignoreTrailingNonAlphabeticCharacters:
        type: boolean
        description: >-
               Indicates whether to ignore any digits, symbols, or other non-alphabetic characters that may appear at the end of a proposed password.
      testAttributeValueSubstringOfPassword:
        type: boolean
        description: >-
               Indicates whether to reject any proposed password in which a value in one of the match attributes in the target user's entry is a substring of that password.
      assumedPasswordGuessesPerSecond:
        type: string
        description: >-
               The number of password guesses per second that a potential attacker may be expected to make.
      minPasswordLength:
        type: integer
        description: >-
               Specifies the minimum number of characters that must be included in a proposed password.
      pwnedPasswordsBaseURL:
        type: string
        description: >-
               The base URL for requests used to interact with the Pwned Passwords service. The first five characters of the hexadecimal representation of the unsalted SHA-1 digest of a proposed password will be appended to this base URL to construct the HTTP GET request used to obtain information about potential matches.
      httpProxyExternalServer:
        type: string
        description: >-
               A reference to an HTTP proxy server that should be used for requests sent to the Pwned Passwords service.
      minimumRequiredCharacterSets:
        type: integer
        description: >-
               Specifies the minimum number of character sets that must be represented in a proposed password.


